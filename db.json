{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/particle.js","path":"js/src/particle.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/404.html","hash":"2f6d7a7551aa497aaf9c48bd599791e45192c088","modified":1488260311068},{"_id":"source/CNAME","hash":"e5b567dabf2273ec013d8ead7a2101b7cbfd6898","modified":1488250678291},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1488181005000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1488181005000},{"_id":"themes/next/.gitignore","hash":"5f09fca02e030b7676c1d312cd88ce8fbccf381c","modified":1488181005000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1488181005000},{"_id":"themes/next/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1488181005000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1488181005000},{"_id":"themes/next/.travis.yml","hash":"c42d9608c8c7fe90de7b1581a8dc3886e90c179e","modified":1488181005000},{"_id":"themes/next/README.en.md","hash":"4ece25ee5f64447cd522e54cb0fffd9a375f0bd4","modified":1488181005000},{"_id":"themes/next/bower.json","hash":"5abc236d9cc2512f5457ed57c1fba76669eb7399","modified":1488181005000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1488181005000},{"_id":"themes/next/package.json","hash":"a042faed34835a52505643aa2d841cd2dcf5dff6","modified":1488181005000},{"_id":"themes/next/gulpfile.coffee","hash":"b00e93c5c8667a4fbed71046dc93ce6784bf6257","modified":1488181005000},{"_id":"themes/next/_config.yml","hash":"fcf4d3479a533bf5a9f5be3a450199079e9d4cbd","modified":1490345062804},{"_id":"source/about/index.md","hash":"d7dec1499d11bfd8f65a641ac9b168aa7eb20e39","modified":1488422728568},{"_id":"source/categories/index.md","hash":"8f47c1ce7a17cf5c67b8714fb9e988824bbd63b9","modified":1488261265071},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1488181005000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1488181005000},{"_id":"themes/next/languages/de.yml","hash":"1fdea1f84b7f691f5b4dd4d2b43eeb27b10fa0c8","modified":1488181005000},{"_id":"themes/next/languages/fr-FR.yml","hash":"e98f1558347752a20019b71f0b1f9c8be1b34f42","modified":1488181005000},{"_id":"themes/next/languages/en.yml","hash":"95ec5cdfb563854f231b76162a3494f6ecc5bf61","modified":1488181005000},{"_id":"themes/next/languages/default.yml","hash":"95ec5cdfb563854f231b76162a3494f6ecc5bf61","modified":1488181005000},{"_id":"themes/next/languages/id.yml","hash":"34396bef27c4ab9e9a3c5d3e3aa94b0e3b3a7b0d","modified":1488181005000},{"_id":"themes/next/languages/ja.yml","hash":"49f12149edcc1892b26a6207328cda64da20116d","modified":1488181005000},{"_id":"themes/next/languages/pt.yml","hash":"6b660b117314cad93f08757601df3adb04c68beb","modified":1488181005000},{"_id":"themes/next/languages/pt-BR.yml","hash":"7742ba4c0d682cbe1d38305332ebc928abd754b5","modified":1488181005000},{"_id":"themes/next/languages/ko.yml","hash":"b6bc5d6b0c000deb44099b42d3aebb8c49dbfca9","modified":1488181005000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"aa1e8d3380904a3717006759d74f00d7b6fe0267","modified":1488195637471},{"_id":"themes/next/languages/ru.yml","hash":"5022885d8955e1b91d8841048db272bf99c59a76","modified":1488181005000},{"_id":"themes/next/layout/_layout.swig","hash":"7438d71822adf690d47c87fd64efb8f09d6ed88a","modified":1489979751609},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1488181005000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1488181005000},{"_id":"themes/next/languages/zh-hk.yml","hash":"19c23d21f262e24c06ee6ddfd51d2a6585304f88","modified":1488181005000},{"_id":"themes/next/layout/schedule.swig","hash":"1f1cdc268f4ef773fd3ae693bbdf7d0b2f45c3a3","modified":1488181005000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1488181005000},{"_id":"themes/next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1488181005000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1488181005000},{"_id":"themes/next/layout/page.swig","hash":"3727fab9dadb967e9c2204edca787dc72264674a","modified":1488181005000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1488181005000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1488181005000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1488181005000},{"_id":"themes/next/languages/zh-tw.yml","hash":"68407799271c78ecc07f03d238257dd8c65ad42d","modified":1488181005000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1488181005000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488181005000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1488181005000},{"_id":"source/_posts/JVM/反编译i++.md","hash":"cb9284130ed06837b3df93f07092fbefcf119145","modified":1489112618026},{"_id":"source/_posts/JVM/引用计数算法和根搜索算法.md","hash":"2bb141c0f1afedf5cd75f6df075b537b2b915ae5","modified":1489740128113},{"_id":"source/_posts/MySQL/GROUP_CONCAT，GROUP BY结合使用.md","hash":"0090055f1d8f5fc660b508eeffa8fe32fb6de5ea","modified":1491887213796},{"_id":"source/_posts/Spring/AOP导致@Autowired失败.md","hash":"6ac51ae3d7d588ceadffdf014b5845d2ceaa9729","modified":1492685366931},{"_id":"source/_posts/Java设计模式/Java设计模式--单例模式.md","hash":"ade8ed84aab68c4296e0e13dd30ec44022507349","modified":1488507186618},{"_id":"source/_posts/MySQL/COUNT,GROUP BY,CASE WHEN混用.md","hash":"13c23b9ee45124192e59640884ff4e1221b6e578","modified":1491879493734},{"_id":"source/_posts/Maven/Maven插件开发(1).md","hash":"590ec0142736da02f79e95ea4892420a32ab3cc3","modified":1491017383798},{"_id":"source/_posts/Spring/Spring配置欢迎页引发的思考.md","hash":"a91b49829cf65da8342fe0bca9a1045afdcb26e3","modified":1489560759542},{"_id":"source/_posts/JavaScript/AngularJs验证动态生成的表单.md","hash":"5d716112fad6357e1d271f02139ac166593c4812","modified":1488330799738},{"_id":"source/_posts/Spring/浅谈AOP.md","hash":"a7e44df3d1207e2eea9cd3cc10f3998f2af0d9b1","modified":1488522099052},{"_id":"source/_posts/JavaScript/浏览器后退不刷新页面的解决办法.md","hash":"66f185e63f5803083af4f5e0f7430651d076e6d8","modified":1492665415542},{"_id":"source/_posts/MySQL/Navicat for MySQL直接编辑Blob字段.md","hash":"ecc7ce12595e23d700a349024b6c936f9f2b9cd2","modified":1490339801856},{"_id":"source/_posts/MySQL/MySQL的四种隔离级别.md","hash":"53e7cfb5418e93ab50b995ecc761995073712fc7","modified":1492052389723},{"_id":"source/_posts/JavaScript/$.post返回状态码200，但却进入error.md","hash":"cb8e2e00e03c7250d04175bfc94a311a5ad50650","modified":1490335121976},{"_id":"source/_posts/MySQL/WINDOWS如何进入MySQL命令行.md","hash":"9cae0d296e9c395c7016a150964497c8c089ba94","modified":1491979295706},{"_id":"source/_posts/git/git clone的时候显示Filename too long的解决办法.md","hash":"0ce4450cdc4c46d05db3e5ba9327938373a6a591","modified":1488762640914},{"_id":"source/_posts/JavaScript/通过js实现导入导出txt格式.md","hash":"692764901f183b6c0ce2f9f04812c2ef1fc1e6ca","modified":1488264189378},{"_id":"source/_posts/Spring/ResponseEntity和@ResponseBody的区别.md","hash":"989fad55aed0ad9fda99b5dcee00ea988bbe8e95","modified":1488535967927},{"_id":"source/_posts/dubbo/查看zookeeper节点的几种方式.md","hash":"5dd9009e3547a9692880a7d6bec68a5f477dcb89","modified":1490680563663},{"_id":"source/_posts/git/git在push的时候显示the remote end hung up的解决办法.md","hash":"d9705762b08b3e62766d8cb78a195351c2ebc486","modified":1488762522295},{"_id":"source/_posts/git/git如何忽略不想提交的文件.md","hash":"0ba6156acc58bb5bb3506c5ec23581c41a69109b","modified":1489735418344},{"_id":"source/_posts/Tomcat/重定向和转发的区别.md","hash":"992a316bac5ab690429f837d8c24426a0b1b39b2","modified":1488870211908},{"_id":"source/_posts/java基础/final的用法.md","hash":"dc4e9739b7362e816276904264389a2425adc492","modified":1488349341098},{"_id":"source/_posts/java基础/java数组复制的四种方式.md","hash":"75460d618981b819f93e38da291861dc74b711ec","modified":1488349371399},{"_id":"source/_posts/java基础/java的八种基本类型的默认值.md","hash":"246a39b302a1bd5c06aa4a513c751a937d3aa03c","modified":1488349361840},{"_id":"source/_posts/Tomcat/Nginx+重定向导致的问题.md","hash":"b51d3fa153a090b2ebe708d28752dd8f0a7022c7","modified":1488871049221},{"_id":"source/_posts/java基础/java的八种基本类型~byte.md","hash":"653ee948ba1e15390a6c091ba9e3c1ad27f5c5b3","modified":1488349350555},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1488181005000},{"_id":"source/_posts/java基础/Math类中的几种取整方式.md","hash":"8b2d981eea2be27470f12c80ef3393768ace6aa4","modified":1488349379487},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1488181005000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"5864f5567ba5efeabcf6ea355013c0b603ee07f2","modified":1488181005000},{"_id":"source/_posts/java基础/switch的用法.md","hash":"e2d71380853f140a391aa81683a3657c9df94be7","modified":1488349387677},{"_id":"themes/next/layout/_macro/post.swig","hash":"2c2efe44ea013030f3ce5da7bfdeddb74489eb6e","modified":1488181005000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1488181005000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"b57650032ed47b8bd357ec4dcc02d872fdd0e3e1","modified":1488181005000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1488181005000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"7172c6053118b7c291a56a7860128a652ae66b83","modified":1488181005000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1488181005000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"970aa668680896262b1056bb5787fc9ec8754495","modified":1488181005000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1488181005000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1488181005000},{"_id":"themes/next/layout/_partials/head.swig","hash":"a0eafe24d1dae30c790ae35612154b3ffbbd5cce","modified":1488181005000},{"_id":"themes/next/layout/_partials/search.swig","hash":"7b61e96508df70152b809ea5354236ab7f0d54f4","modified":1488181005000},{"_id":"themes/next/layout/_partials/header.swig","hash":"a1ffbb691dfad3eaf2832a11766e58a179003b8b","modified":1488181005000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1488181005000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1488181005000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1488181005000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1488181005000},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1488181005000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"79378f3a1cd90518b07808ed09156a3ab55ffa31","modified":1488181005000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1488181005000},{"_id":"themes/next/scripts/tags/note.js","hash":"6752925eedbdb939d8ec4d11bdfb75199f18dd70","modified":1488181005000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1488181005000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1488181005000},{"_id":"source/_posts/Tomcat/Linux熵池导致的Tomcat启动缓慢.md","hash":"67f7f25ba7d8cac919b999632e28fea8a0450642","modified":1490768020651},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1488181005000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"4512867d80d9eddfc3a0f5fea3c456f33aa9d522","modified":1488181005000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1488181005000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1488181005000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1488181005000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1488181005000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1488181005000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1488181005000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1488181005000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1488181005000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1488181005000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1488181005000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1488181005000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1488181005000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488181005000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488181005000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1488181005000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488181005000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488181005000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488181005000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488181005000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488181005000},{"_id":"source/_posts/java基础/内部类/java的内部类--静态内部类【4】.md","hash":"b11d612fe327a720fb95140b65123bd20f661f0a","modified":1488876019517},{"_id":"source/_posts/java基础/内部类/java的内部类.md","hash":"7e09f7a3f13e3a261c414c47c0b7e4e1b3efd84d","modified":1488877312047},{"_id":"source/_posts/java基础/内部类/java的内部类--匿名内部类【3】.md","hash":"cf0c54046145e328bc0412e392ec6b26480497e1","modified":1488876004442},{"_id":"themes/next/layout/_components/algolia-search/dom.swig","hash":"636f1181dd5887a70b4a08ca8f655d4e46635792","modified":1488181005000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1488181005000},{"_id":"themes/next/layout/_components/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1488181005000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"741f09b2ba4e440011c15f5d288b109b82c87f1b","modified":1488181005000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1488181005000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1488181005000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1488181005000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1488181005000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1488181005000},{"_id":"source/_posts/java基础/内部类/java的内部类--局部内部类【2】.md","hash":"93c2bfecdd2218b950415d9689f80ba4626356b0","modified":1488875970962},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1488181005000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1488181005000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1488181005000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"e46900412e28f529c26e25e6bada342006435a32","modified":1488181005000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"a279e1881208aff2f669fe235e9661ab825bc540","modified":1488181005000},{"_id":"source/_posts/java基础/内部类/java的内部类--成员内部类【1】.md","hash":"0567e8d328bfa5393496ff47ef10d8b4faec42cf","modified":1489021688089},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1488181005000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1488181005000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1488181005000},{"_id":"themes/next/layout/_scripts/third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1488181005000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1488181005000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1488181005000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1488181005000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1488181005000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"06f432f328a5b8a9ef0dbd5301b002aba600b4ce","modified":1488181005000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1488181005000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"ceb39c100c99900294ddee8b1ff81fcaf43873b5","modified":1488181005000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1488181005000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1488181005000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1488181005000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"54ca0acff29a414e2c1b7c1790db22f0c775604c","modified":1488181005000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1488181005000},{"_id":"themes/next/source/js/src/particle.js","hash":"914c8e99af756e7004359aaa71fee4e59f214649","modified":1489979453109},{"_id":"themes/next/source/js/src/post-details.js","hash":"3b2d64c2e6ae072ba2a9ebf7f09908a1543abd58","modified":1488181005000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1488181005000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1488181005000},{"_id":"themes/next/source/js/src/utils.js","hash":"9ff232a2d39a513b811814480502e3eaac429c52","modified":1488181005000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1488181005000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1488181005000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1488181005000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1488181005000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1488181005000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1488181005000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1488181005000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"c1072942459fa0880e8a33a1bd929176b62b4171","modified":1488181005000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1488181005000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1488181005000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1488181005000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1488181005000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1488181005000},{"_id":"source/_posts/java基础/内部类/通过反射分析内部类【5】.md","hash":"c12c6b09b1397f6406a61f52c1ef743e2108032a","modified":1488876033850},{"_id":"themes/next/source/css/_variables/base.styl","hash":"3472aa003e93ee2bc6f1928494d7f9f976067ce4","modified":1489980117983},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1488181005000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1488181005000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1488181005000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1488181005000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1488181005000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1488181005000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1488181005000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1488181005000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1488181005000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1488181005000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1488181005000},{"_id":"themes/next/source/images/favicon.ico","hash":"ada741a7f52c0ab960d1c2cf1d85e8f2ce16864b","modified":1488520330212},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1488181005000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1488181005000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1488181005000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1488181005000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1488181005000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1488181005000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1488181005000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1488181005000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-mta.swig","hash":"a652f202bd5b30c648c228ab8f0e997eb4928e44","modified":1488181005000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1488181005000},{"_id":"themes/next/layout/_scripts/third-party/comments/gentie.swig","hash":"03592d1d731592103a41ebb87437fe4b0a4c78ca","modified":1488181005000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"fb1d04ede838b52ca7541973f86c3810f1ad396e","modified":1488181005000},{"_id":"themes/next/layout/_scripts/third-party/comments/livere.swig","hash":"7240f2e5ec7115f8abbbc4c9ef73d4bed180fdc7","modified":1488181005000},{"_id":"themes/next/layout/_scripts/third-party/comments/youyan.swig","hash":"af9dd8a4aed7d06cf47b363eebff48850888566c","modified":1488181005000},{"_id":"themes/next/layout/_scripts/third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"59ad08bcc6fe9793594869ac2b4c525021453e78","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ef089a407c90e58eca10c49bc47ec978f96e03ba","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1488181005000},{"_id":"themes/next/layout/_scripts/third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1488181005000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1488181005000},{"_id":"themes/next/layout/_scripts/third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1488181005000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1488181005000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1488181005000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1488181005000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1488181005000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1488181005000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1488181005000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1488181005000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1488181005000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1488181005000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1488181005000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1488181005000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1488181005000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1488181005000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1488181005000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1488181005000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1488181005000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1488181005000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1488181005000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1488181005000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1488181005000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1488181005000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1488181005000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"f15537cee1a9ef4fa1e72a1670ebce4097db8115","modified":1488181005000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1488181005000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1488181005000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e3e23751d4ad24e8714b425d768cf68e37de7ded","modified":1488181005000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1488181005000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1488181005000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1488181005000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1488181005000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"7e18f08c2c82f71e83860f232d43d8b89865ac2e","modified":1488181005000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1488181005000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1488181005000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1488181005000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1488181005000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1488181005000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1488181005000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1488181005000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1488181005000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1488181005000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1488181005000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1488181005000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1488181005000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"72bb1c9c890a1dfeca7804d681b366fea0ac4421","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"755b04edbbfbdd981a783edb09c9cc34cb79cea7","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"77d51c3de352566abf2cfcd3e6bc9eb431c4d898","modified":1489980051544},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"b9a2e76f019a5941191f1263b54aef7b69c48789","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a2ec22ef4a6817bbb2abe8660fcd99fe4ca0cc5e","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"bfd806d0a9f21446a22df82ac02e37d0075cc3b5","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"8fe1e55bc290e6aaf07cc644fe27b62107a272a8","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"586a3ec0f1015e7207cd6a2474362e068c341744","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"74d0ba86f698165d13402670382a822c8736a556","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"42348219db93a85d2ee23cb06cebd4d8ab121726","modified":1488181005000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1488181005000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1488181005000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1488181005000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"173490e21bece35a34858e8e534cf86e34561350","modified":1488181005000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1488181005000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1488181005000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1488181005000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1488181005000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1488181005000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1488181005000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1488181005000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1488181005000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1488181005000},{"_id":"public/baidusitemap.xml","hash":"6ee168f962b59addc99c6f283ceb1206c0af6d39","modified":1492685489434},{"_id":"public/search.xml","hash":"5fe4ba61ee16302dd5863cf3530736e0bd3d6f98","modified":1492685489492},{"_id":"public/sitemap.xml","hash":"7d81103cd6edff03d5dc1f98f6109cdffafe2119","modified":1492685489494},{"_id":"public/404.html","hash":"f3760f7b1b6fc41ea144dc49c6db4d56b952edeb","modified":1492685489521},{"_id":"public/categories/index.html","hash":"08def4245b9c8917ac272c1e707e1743b76e7820","modified":1492685489521},{"_id":"public/about/index.html","hash":"ffdac9b6bb7a8bf99cff17a4ed1403593308fcb4","modified":1492685489521},{"_id":"public/Spring/Spring/AOP导致@Autowired失败/index.html","hash":"a6297080bc2bf8913dbe1190192417c19fd9b906","modified":1492685489521},{"_id":"public/JavaScript/JavaScript/浏览器后退不刷新页面的解决办法/index.html","hash":"fe96207c1405ac254d9326652a2476e14d883df2","modified":1492685489521},{"_id":"public/MySQL/MySQL/MySQL的四种隔离级别/index.html","hash":"2bd5d7936c295a2f1c9d0fd00985585a726dbdca","modified":1492685489522},{"_id":"public/MySQL/MySQL/WINDOWS如何进入MySQL命令行/index.html","hash":"bd256da5d3a1e846514ac8bc033081040f1a0920","modified":1492685489522},{"_id":"public/MySQL/MySQL/COUNT,GROUP BY,CASE WHEN混用/index.html","hash":"8fcf00795e3f9d69c6bbb024cf60a892660be8b8","modified":1492685489522},{"_id":"public/MySQL/MySQL/GROUP_CONCAT，GROUP BY结合使用/index.html","hash":"93e57712f3f4258190a38f4e7c21c152e9e4f997","modified":1492685489522},{"_id":"public/Maven/Maven/Maven插件开发(1)/index.html","hash":"48068d91475cdf9f832cfd44f6e82517b6e52828","modified":1492685489522},{"_id":"public/Tomcat/Tomcat/Linux熵池导致的Tomcat启动缓慢/index.html","hash":"f045a2c5d14c84f3db632be1c3e68fd542bedf3d","modified":1492685489523},{"_id":"public/dubbo/dubbo/查看zookeeper节点的几种方式/index.html","hash":"03bedfe106c7935b5718ce3eb1c703fc5d0f1268","modified":1492685489523},{"_id":"public/MySQL/MySQL/Navicat for MySQL直接编辑Blob字段/index.html","hash":"5f9d0cce64668382a469327c07fe2bbac7d4cabd","modified":1492685489523},{"_id":"public/JavaScript/JavaScript/$.post返回状态码200，但却进入error/index.html","hash":"5acc8d2985a191c473e62efb4882e652ca10deca","modified":1492685489524},{"_id":"public/git/git/git如何忽略不想提交的文件/index.html","hash":"b0555a6a76933013425ab4b10872edb873ac2599","modified":1492685489524},{"_id":"public/Spring/Spring/Spring配置欢迎页引发的思考/index.html","hash":"6f1b77ae99ad0e4bb4135050d8f223effd491e22","modified":1492685489524},{"_id":"public/JVM/JVM/反编译i++/index.html","hash":"a1e0752cf0cac52cf3bd73968e06095578829689","modified":1492685489524},{"_id":"public/JVM/JVM/引用计数算法和根搜索算法/index.html","hash":"dd6bb5747e29f683e80119c3c58e1d38862f53c2","modified":1492685489525},{"_id":"public/Java基础/java基础/内部类/通过反射分析内部类【5】/index.html","hash":"08abb999fc4e535313826c61bcfbdb14af1029c9","modified":1492685489525},{"_id":"public/Java基础/java基础/内部类/java的内部类--成员内部类【1】/index.html","hash":"97e69eed83fbc94aedbaf1b7695612a9eb7c0c9a","modified":1492685489525},{"_id":"public/Java基础/java基础/内部类/java的内部类--局部内部类【2】/index.html","hash":"b37c981a73d5a55526c230a6d0e33de45de26ad8","modified":1492685489525},{"_id":"public/Tomcat/Tomcat/重定向和转发的区别/index.html","hash":"1d5851a325ddec143763bfbb42481cbce7463bd8","modified":1492685489526},{"_id":"public/Java基础/java基础/内部类/java的内部类--匿名内部类【3】/index.html","hash":"5fdc5a992ccfa62e9c27bc546e73be9342292c28","modified":1492685489526},{"_id":"public/Java基础/java基础/内部类/java的内部类/index.html","hash":"545fd449bb2e04689e44e2c1f9c37567e116aeae","modified":1492685489526},{"_id":"public/Java基础/java基础/内部类/java的内部类--静态内部类【4】/index.html","hash":"ac2799fccf39c7f45ee4556207812ba230992474","modified":1492685489529},{"_id":"public/Tomcat/Tomcat/Nginx+重定向导致的问题/index.html","hash":"dcf2d110a9ba44fc552c856555888303bdfefc44","modified":1492685489530},{"_id":"public/git/git/git在push的时候显示the remote end hung up的解决办法/index.html","hash":"dec044cc717cfeb5187c29e2fc7968e309d0bb96","modified":1492685489530},{"_id":"public/git/git/git clone的时候显示Filename too long的解决办法/index.html","hash":"2318809f6ce6fd6ab4b6b338f21f7ba541dc154a","modified":1492685489531},{"_id":"public/Java设计模式/Java设计模式/Java设计模式--单例模式/index.html","hash":"206560d77edcb47380fa0ae27d10852baf22846b","modified":1492685489532},{"_id":"public/Spring/Spring/ResponseEntity和@ResponseBody的区别/index.html","hash":"4105be2ddebff8d04c11b0a37af7ca5fbd2e58a8","modified":1492685489532},{"_id":"public/Spring/Spring/浅谈AOP/index.html","hash":"421d102dd1c7970414c965d07514c4ce0d5ee60b","modified":1492685489532},{"_id":"public/Java基础/java基础/java的八种基本类型的默认值/index.html","hash":"b406bbf709327b5d25d7f6bcda96e05c3a6b9f29","modified":1492685489533},{"_id":"public/Java基础/java基础/java的八种基本类型~byte/index.html","hash":"8c20d1ef8bcd1f1200fb2acb5218dc6bdce86917","modified":1492685489533},{"_id":"public/Java基础/java基础/Math类中的几种取整方式/index.html","hash":"b7250c2ee61e9ccd5aa8ba666b840e0a904ab239","modified":1492685489533},{"_id":"public/Java基础/java基础/final的用法/index.html","hash":"7f2fc72dbd36daf5ecdec69ca630a3d7c935d3f4","modified":1492685489533},{"_id":"public/Java基础/java基础/java数组复制的四种方式/index.html","hash":"35ada4e969e81325212226adf9ba45d415d7300f","modified":1492685489533},{"_id":"public/Java基础/java基础/switch的用法/index.html","hash":"82862bbfad828bad97f3aec5a24d733f342df906","modified":1492685489533},{"_id":"public/JavaScript/JavaScript/AngularJs验证动态生成的表单/index.html","hash":"94b69040fdf04b4258eadd0f6c4558400532421b","modified":1492685489533},{"_id":"public/JavaScript/JavaScript/通过js实现导入导出txt格式/index.html","hash":"44c6ee4bb4d7813797d38d7ce01fb90439451f1e","modified":1492685489533},{"_id":"public/archives/index.html","hash":"23eb79a060e69bd51137b2e576034841a9bd4076","modified":1492685489533},{"_id":"public/archives/page/2/index.html","hash":"c06876ae59fbc815c87aed6276e8ef4558affae3","modified":1492685489533},{"_id":"public/archives/page/3/index.html","hash":"f01ba19246ede238a32b97584eb1467bd87577b8","modified":1492685489534},{"_id":"public/archives/page/4/index.html","hash":"d68cef1620cff7039eac29ac91f144dbd5b69661","modified":1492685489534},{"_id":"public/archives/2017/index.html","hash":"10adb9aa93b0b2dec9b7680593294125cf973d98","modified":1492685489534},{"_id":"public/archives/2017/page/2/index.html","hash":"a1ffdc5ec38e2ad90963cee1c3a4b609eed21f25","modified":1492685489534},{"_id":"public/archives/2017/page/3/index.html","hash":"aafb0e29be67d9761b5b7511a8d6a9e5f7cbed7b","modified":1492685489534},{"_id":"public/archives/2017/page/4/index.html","hash":"d2fd230be41cb5de036cd1fce9e19f314de57ae0","modified":1492685489534},{"_id":"public/archives/2017/02/index.html","hash":"4967eef70a8cfb4d6aab269b8ed899a0770b1044","modified":1492685489534},{"_id":"public/archives/2017/03/index.html","hash":"c9e5b4cca85626c337ae21cdf107aae5f3e24f6a","modified":1492685489534},{"_id":"public/archives/2017/03/page/2/index.html","hash":"3a6651f187af6d563ac6334a966f3f9cd742152c","modified":1492685489534},{"_id":"public/archives/2017/03/page/3/index.html","hash":"bbcbf3d6d62244e8fc2fdb44acc30e1a935e02e2","modified":1492685489534},{"_id":"public/archives/2017/04/index.html","hash":"d6c37d910119840575de74e956323d0b1a35a4da","modified":1492685489534},{"_id":"public/categories/JVM/index.html","hash":"dcb6e94a61ac19a0d29cefb1f4592368d597a879","modified":1492685489534},{"_id":"public/categories/MySQL/index.html","hash":"384a9df31ab08e8b5575bca19e9fee34f7798a21","modified":1492685489535},{"_id":"public/categories/Spring/index.html","hash":"8308767a7b4880a1ccd2b3d5dc3c2db7d2bd1d58","modified":1492685489535},{"_id":"public/categories/Maven/index.html","hash":"13e764fb9947c3fe0ec5a9a14ab76ad2d59c753a","modified":1492685489535},{"_id":"public/categories/JavaScript/index.html","hash":"17462018201ba93748ce8b6aefddf594456a8f00","modified":1492685489535},{"_id":"public/categories/Java设计模式/index.html","hash":"2bfddd35cada4298a321520775f64c26e130e818","modified":1492685489535},{"_id":"public/categories/git/index.html","hash":"5f2aa5e3481ab9e2517bb7c079bfe6b510a3cfa1","modified":1492685489535},{"_id":"public/categories/dubbo/index.html","hash":"76f8213fa2acfbb90b14e707d76efca6cd0cb09d","modified":1492685489535},{"_id":"public/categories/Tomcat/index.html","hash":"0e52221718b3e98bf8b749dcb160cdc1b9fc7bb7","modified":1492685489535},{"_id":"public/categories/Java基础/index.html","hash":"b32249de57449c50e1e88ce883aeac4815e0782a","modified":1492685489535},{"_id":"public/categories/Java基础/page/2/index.html","hash":"d67f82f0f443fe781786825c11543cff857b2d98","modified":1492685489535},{"_id":"public/index.html","hash":"54b67637ba26e92ff95b63c6e6b6586c265649f9","modified":1492685489535},{"_id":"public/page/2/index.html","hash":"082abd0a9b78fa845131a3ab0956ddbbc225f417","modified":1492685489535},{"_id":"public/page/3/index.html","hash":"ef2016cd5b19cc8c06ea26ed5aeb567297db3607","modified":1492685489535},{"_id":"public/page/4/index.html","hash":"e2af6b24d042c2160f6d1e0b6e176b0468b3d6e4","modified":1492685489535},{"_id":"public/CNAME","hash":"e5b567dabf2273ec013d8ead7a2101b7cbfd6898","modified":1492685489572},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1492685489572},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1492685489572},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1492685489572},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1492685489572},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1492685489572},{"_id":"public/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1492685489572},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1492685489572},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1492685489572},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1492685489572},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1492685489572},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1492685489572},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1492685489572},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1492685489572},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1492685489572},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1492685489572},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1492685489572},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1492685489572},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1492685489572},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1492685489573},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1492685489573},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1492685489573},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1492685489573},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1492685489573},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1492685489573},{"_id":"public/images/favicon.ico","hash":"ada741a7f52c0ab960d1c2cf1d85e8f2ce16864b","modified":1492685493781},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1492685493787},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1492685493794},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1492685493794},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1492685493795},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1492685493801},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1492685493801},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1492685493801},{"_id":"public/js/src/algolia-search.js","hash":"54ca0acff29a414e2c1b7c1790db22f0c775604c","modified":1492685493801},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1492685493801},{"_id":"public/js/src/particle.js","hash":"914c8e99af756e7004359aaa71fee4e59f214649","modified":1492685493801},{"_id":"public/js/src/post-details.js","hash":"3b2d64c2e6ae072ba2a9ebf7f09908a1543abd58","modified":1492685493801},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1492685493802},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1492685493802},{"_id":"public/js/src/utils.js","hash":"9ff232a2d39a513b811814480502e3eaac429c52","modified":1492685493802},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1492685493802},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1492685493802},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1492685493802},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1492685493802},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1492685493802},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1492685493802},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1492685493802},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1492685493802},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1492685493802},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1492685493802},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1492685493802},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1492685493802},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1492685493802},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1492685493803},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1492685493803},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1492685493803},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1492685493803},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1492685493803},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1492685493803},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1492685493803},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1492685493803},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1492685493803},{"_id":"public/css/main.css","hash":"817901142588bbbde5dc73dc64ddc76ccfc1dbdd","modified":1492685493803},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1492685493805},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1492685493805},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1492685493805},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1492685493805},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1492685493806},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1492685493806},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1492685493806},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1492685493806},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1492685493806},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1492685493806},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1492685493806},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1492685493846}],"Category":[{"name":"JVM","_id":"cj1qae4790005c8121hsoifu0"},{"name":"MySQL","_id":"cj1qae47q000dc812urb00ylq"},{"name":"Spring","_id":"cj1qae47w000hc812fksjtfpa"},{"name":"Maven","_id":"cj1qae48a000pc812h25i9fxr"},{"name":"JavaScript","_id":"cj1qae48j000zc812nz4uwhkg"},{"name":"Java设计模式","_id":"cj1qae49p001hc812fmvz4bxe"},{"name":"git","_id":"cj1qae4ae001lc812us9e4jhg"},{"name":"dubbo","_id":"cj1qae4ay001rc812g6l3ywtx"},{"name":"Tomcat","_id":"cj1qae4b8001yc812mvklkhw6"},{"name":"Java基础","_id":"cj1qae4bb0020c812xb3ms95v"}],"Data":[],"Page":[{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\"\n        charset=\"utf-8\" homePageUrl=\"your site url \"\n        homePageName=\"�ص��ҵ���ҳ\">\n</script>\n\n</body>\n</html>","source":"404.html","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\"\n        charset=\"utf-8\" homePageUrl=\"your site url \"\n        homePageName=\"�ص��ҵ���ҳ\">\n</script>\n\n</body>\n</html>","date":"2017-02-28T05:38:31.068Z","updated":"2017-02-28T05:38:31.068Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cj1qae3h70000c812fl9oejyd","content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"your site url \" homepagename=\"�ص��ҵ���ҳ\">\n</script>\n\n</body>\n</html>","excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\"\n        charset=\"utf-8\" homePageUrl=\"your site url \"\n        homePageName=\"�ص��ҵ���ҳ\">\n</script>\n\n</body>\n</html>"},{"title":"分类","date":"2017-02-28T05:51:08.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2017-02-28 13:51:08\ntype: \"categories\"\ncomments: false\n---\n","updated":"2017-02-28T05:54:25.071Z","path":"categories/index.html","layout":"page","_id":"cj1qae40i0001c812gf811nhy","content":"","excerpt":"","more":""},{"title":"about","date":"2017-03-02T02:38:06.000Z","_content":"\n## 关于我\n\nJava开发攻城狮，欢迎一起交流\n\nFrom lxl\n\nQQ：348863018\nEmail: 348863018@qq.com","source":"about/index.md","raw":"---\ntitle: about\ndate: 2017-03-02 10:38:06\n---\n\n## 关于我\n\nJava开发攻城狮，欢迎一起交流\n\nFrom lxl\n\nQQ：348863018\nEmail: 348863018@qq.com","updated":"2017-03-02T02:45:28.568Z","path":"about/index.html","comments":1,"layout":"page","_id":"cj1qae40l0002c812o9xv7ngp","content":"<h2 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h2><p>Java开发攻城狮，欢迎一起交流</p>\n<p>From lxl</p>\n<p>QQ：348863018<br>Email: 348863018@qq.com</p>\n","excerpt":"","more":"<h2 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h2><p>Java开发攻城狮，欢迎一起交流</p>\n<p>From lxl</p>\n<p>QQ：348863018<br>Email: 348863018@qq.com</p>\n"}],"Post":[{"title":"反编译i++","date":"2017-03-10T03:34:47.000Z","_content":"通过反编译来研究一下java的指令集\n\n## i = i++\n```java\npublic class Test {\n    public static void main(String... args) {\n        int i = 0;\n        i = i++;\n        System.out.println(i);  //0\n    }\n}\n```\n使用javac编译后再使用`javap -c Test`反编译这个类查看它的字节码，如下（只摘取main方法）：\n```java\npublic static void main(java.lang.String[]);\nCode:\n0: iconst_0\n1: istore_1\n2: iload_1\n3: iinc 1, 1\n6: istore_1\n7: getstatic #2; //Field java/lang/System.out:Ljava/io/PrintStream;\n10: iload_1\n11: invokevirtual #3; //Method java/io/PrintStream.println:(I)V\n14: return\n```\n\n这里，我从第0行开始分析（分析中【】表示栈，栈的底端在左边，顶端在右边）：\n\n- 0：将常数0压入栈，栈内容：【0】\n- 1：将栈顶的元素弹出，也就是0，保存到局部变量区索引为为1（也就是变量i）的地方。栈内容：【】\n- 2：将局部变量区索引为1（也就是变量i）的值压入栈，栈内容：【0】\n- 3：将局部变量区索引为1（也就是常量i）的值加一，此时局部变量区索引为1的值（也就是i的值）是1。栈内容：【0】\n- 6：将栈顶元素弹出，保存到局部变量区索引为1（也就是i）的地方，此时i又变成了0。栈内容：【】\n- 7：获取常量池中索引为2所表示的类变量，也就是System.out。栈元素：【】\n- 10：将局部变量区索引为1的值（也就是i）压入栈。栈元素：【0】\n- 11：调用常量池索引为3的方法，也就是System.out.println\n- 14：返回main方法\n\n## i = ++i\n```java\npublic class Test {\n    public static void main(String... args) {\n        int i = 0;\n        i = ++i;\n        System.out.println(i);  //1\n    }\n}\n```\n同样`javap -c Test`\n```java\n  public static void main(java.lang.String...);\n    Code:\n       0: iconst_0   //0入栈，【0】\n       1: istore_1   //栈顶出栈，并赋值给索引为1的变量，【】\n       2: iinc          1, 1    //索引为1的变量+1，【】\n       5: iload_1    //索引为1的变量入栈，【1】\n       6: istore_1   //栈顶出栈，并赋值给索引为1的变量，【】\n       7: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;\n      10: iload_1\n      11: invokevirtual #3                  // Method java/io/PrintStream.println:(I)V\n      14: return\n```\n\n## i = i++ + ++i\n```java\npublic class Test {\n    public static void main(String... args) {\n        int i = 0;\n        i = i++ + ++i;\n        System.out.println(i);  //2\n    }\n}\n```\n同样`javap -c Test`\n```java\n  public static void main(java.lang.String...);\n    Code:\n       0: iconst_0   //0入栈，【0】\n       1: istore_1   //栈顶出栈，并赋值给索引为1的变量，【】\n       2: iload_1    //索引为1的变量入栈，【0】\n       3: iinc          1, 1    //索引为1的变量+1，【0】\n       6: iinc          1, 1    //索引为1的变量+1，【0】\n       9: iload_1    //索引为1的变量入栈，【0|2】\n      10: iadd       //栈顶的两个整型相加并入栈，【2】\n      11: istore_1   //栈顶出栈，并赋值给索引为1的变量，【】\n      12: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;\n      15: iload_1\n      16: invokevirtual #3                  // Method java/io/PrintStream.println:(I)V\n      19: return\n```\n\n## 通过图片理解指令\nint a = 100;\n\nint b = 98;\n\nint c = a+b;\n\n![image](http://images.cnitblog.com/i/535328/201403/111017360158953.jpg)\n","source":"_posts/JVM/反编译i++.md","raw":"---\ntitle: 反编译i++\ndate: 2017-03-10 11:34:47\ncategories: JVM\n---\n通过反编译来研究一下java的指令集\n\n## i = i++\n```java\npublic class Test {\n    public static void main(String... args) {\n        int i = 0;\n        i = i++;\n        System.out.println(i);  //0\n    }\n}\n```\n使用javac编译后再使用`javap -c Test`反编译这个类查看它的字节码，如下（只摘取main方法）：\n```java\npublic static void main(java.lang.String[]);\nCode:\n0: iconst_0\n1: istore_1\n2: iload_1\n3: iinc 1, 1\n6: istore_1\n7: getstatic #2; //Field java/lang/System.out:Ljava/io/PrintStream;\n10: iload_1\n11: invokevirtual #3; //Method java/io/PrintStream.println:(I)V\n14: return\n```\n\n这里，我从第0行开始分析（分析中【】表示栈，栈的底端在左边，顶端在右边）：\n\n- 0：将常数0压入栈，栈内容：【0】\n- 1：将栈顶的元素弹出，也就是0，保存到局部变量区索引为为1（也就是变量i）的地方。栈内容：【】\n- 2：将局部变量区索引为1（也就是变量i）的值压入栈，栈内容：【0】\n- 3：将局部变量区索引为1（也就是常量i）的值加一，此时局部变量区索引为1的值（也就是i的值）是1。栈内容：【0】\n- 6：将栈顶元素弹出，保存到局部变量区索引为1（也就是i）的地方，此时i又变成了0。栈内容：【】\n- 7：获取常量池中索引为2所表示的类变量，也就是System.out。栈元素：【】\n- 10：将局部变量区索引为1的值（也就是i）压入栈。栈元素：【0】\n- 11：调用常量池索引为3的方法，也就是System.out.println\n- 14：返回main方法\n\n## i = ++i\n```java\npublic class Test {\n    public static void main(String... args) {\n        int i = 0;\n        i = ++i;\n        System.out.println(i);  //1\n    }\n}\n```\n同样`javap -c Test`\n```java\n  public static void main(java.lang.String...);\n    Code:\n       0: iconst_0   //0入栈，【0】\n       1: istore_1   //栈顶出栈，并赋值给索引为1的变量，【】\n       2: iinc          1, 1    //索引为1的变量+1，【】\n       5: iload_1    //索引为1的变量入栈，【1】\n       6: istore_1   //栈顶出栈，并赋值给索引为1的变量，【】\n       7: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;\n      10: iload_1\n      11: invokevirtual #3                  // Method java/io/PrintStream.println:(I)V\n      14: return\n```\n\n## i = i++ + ++i\n```java\npublic class Test {\n    public static void main(String... args) {\n        int i = 0;\n        i = i++ + ++i;\n        System.out.println(i);  //2\n    }\n}\n```\n同样`javap -c Test`\n```java\n  public static void main(java.lang.String...);\n    Code:\n       0: iconst_0   //0入栈，【0】\n       1: istore_1   //栈顶出栈，并赋值给索引为1的变量，【】\n       2: iload_1    //索引为1的变量入栈，【0】\n       3: iinc          1, 1    //索引为1的变量+1，【0】\n       6: iinc          1, 1    //索引为1的变量+1，【0】\n       9: iload_1    //索引为1的变量入栈，【0|2】\n      10: iadd       //栈顶的两个整型相加并入栈，【2】\n      11: istore_1   //栈顶出栈，并赋值给索引为1的变量，【】\n      12: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;\n      15: iload_1\n      16: invokevirtual #3                  // Method java/io/PrintStream.println:(I)V\n      19: return\n```\n\n## 通过图片理解指令\nint a = 100;\n\nint b = 98;\n\nint c = a+b;\n\n![image](http://images.cnitblog.com/i/535328/201403/111017360158953.jpg)\n","slug":"JVM/反编译i++","published":1,"updated":"2017-03-10T02:23:38.026Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1qae4700003c812nso4tpn6","content":"<p>通过反编译来研究一下java的指令集</p>\n<h2 id=\"i-i\"><a href=\"#i-i\" class=\"headerlink\" title=\"i = i++\"></a>i = i++</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String... args)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</div><div class=\"line\">        i = i++;</div><div class=\"line\">        System.out.println(i);  <span class=\"comment\">//0</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>使用javac编译后再使用<code>javap -c Test</code>反编译这个类查看它的字节码，如下（只摘取main方法）：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static void main(java.lang.String[]);</div><div class=\"line\">Code:</div><div class=\"line\">0: iconst_0</div><div class=\"line\">1: istore_1</div><div class=\"line\">2: iload_1</div><div class=\"line\">3: iinc 1, 1</div><div class=\"line\">6: istore_1</div><div class=\"line\">7: getstatic #2; //Field java/lang/System.out:Ljava/io/PrintStream;</div><div class=\"line\">10: iload_1</div><div class=\"line\">11: invokevirtual #3; //Method java/io/PrintStream.println:(I)V</div><div class=\"line\">14: return</div></pre></td></tr></table></figure></p>\n<p>这里，我从第0行开始分析（分析中【】表示栈，栈的底端在左边，顶端在右边）：</p>\n<ul>\n<li>0：将常数0压入栈，栈内容：【0】</li>\n<li>1：将栈顶的元素弹出，也就是0，保存到局部变量区索引为为1（也就是变量i）的地方。栈内容：【】</li>\n<li>2：将局部变量区索引为1（也就是变量i）的值压入栈，栈内容：【0】</li>\n<li>3：将局部变量区索引为1（也就是常量i）的值加一，此时局部变量区索引为1的值（也就是i的值）是1。栈内容：【0】</li>\n<li>6：将栈顶元素弹出，保存到局部变量区索引为1（也就是i）的地方，此时i又变成了0。栈内容：【】</li>\n<li>7：获取常量池中索引为2所表示的类变量，也就是System.out。栈元素：【】</li>\n<li>10：将局部变量区索引为1的值（也就是i）压入栈。栈元素：【0】</li>\n<li>11：调用常量池索引为3的方法，也就是System.out.println</li>\n<li>14：返回main方法</li>\n</ul>\n<h2 id=\"i-i-1\"><a href=\"#i-i-1\" class=\"headerlink\" title=\"i = ++i\"></a>i = ++i</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String... args)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</div><div class=\"line\">        i = ++i;</div><div class=\"line\">        System.out.println(i);  <span class=\"comment\">//1</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>同样<code>javap -c Test</code><br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static void main(java.lang.String...);</div><div class=\"line\">  Code:</div><div class=\"line\">     0: iconst_0   //0入栈，【0】</div><div class=\"line\">     1: istore_1   //栈顶出栈，并赋值给索引为1的变量，【】</div><div class=\"line\">     2: iinc          1, 1    //索引为1的变量+1，【】</div><div class=\"line\">     5: iload_1    //索引为1的变量入栈，【1】</div><div class=\"line\">     6: istore_1   //栈顶出栈，并赋值给索引为1的变量，【】</div><div class=\"line\">     7: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;</div><div class=\"line\">    10: iload_1</div><div class=\"line\">    11: invokevirtual #3                  // Method java/io/PrintStream.println:(I)V</div><div class=\"line\">    14: return</div></pre></td></tr></table></figure></p>\n<h2 id=\"i-i-i\"><a href=\"#i-i-i\" class=\"headerlink\" title=\"i = i++ + ++i\"></a>i = i++ + ++i</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String... args)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</div><div class=\"line\">        i = i++ + ++i;</div><div class=\"line\">        System.out.println(i);  <span class=\"comment\">//2</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>同样<code>javap -c Test</code><br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static void main(java.lang.String...);</div><div class=\"line\">  Code:</div><div class=\"line\">     0: iconst_0   //0入栈，【0】</div><div class=\"line\">     1: istore_1   //栈顶出栈，并赋值给索引为1的变量，【】</div><div class=\"line\">     2: iload_1    //索引为1的变量入栈，【0】</div><div class=\"line\">     3: iinc          1, 1    //索引为1的变量+1，【0】</div><div class=\"line\">     6: iinc          1, 1    //索引为1的变量+1，【0】</div><div class=\"line\">     9: iload_1    //索引为1的变量入栈，【0|2】</div><div class=\"line\">    10: iadd       //栈顶的两个整型相加并入栈，【2】</div><div class=\"line\">    11: istore_1   //栈顶出栈，并赋值给索引为1的变量，【】</div><div class=\"line\">    12: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;</div><div class=\"line\">    15: iload_1</div><div class=\"line\">    16: invokevirtual #3                  // Method java/io/PrintStream.println:(I)V</div><div class=\"line\">    19: return</div></pre></td></tr></table></figure></p>\n<h2 id=\"通过图片理解指令\"><a href=\"#通过图片理解指令\" class=\"headerlink\" title=\"通过图片理解指令\"></a>通过图片理解指令</h2><p>int a = 100;</p>\n<p>int b = 98;</p>\n<p>int c = a+b;</p>\n<p><img src=\"http://images.cnitblog.com/i/535328/201403/111017360158953.jpg\" alt=\"image\"></p>\n","excerpt":"","more":"<p>通过反编译来研究一下java的指令集</p>\n<h2 id=\"i-i\"><a href=\"#i-i\" class=\"headerlink\" title=\"i = i++\"></a>i = i++</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String... args)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</div><div class=\"line\">        i = i++;</div><div class=\"line\">        System.out.println(i);  <span class=\"comment\">//0</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>使用javac编译后再使用<code>javap -c Test</code>反编译这个类查看它的字节码，如下（只摘取main方法）：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static void main(java.lang.String[]);</div><div class=\"line\">Code:</div><div class=\"line\">0: iconst_0</div><div class=\"line\">1: istore_1</div><div class=\"line\">2: iload_1</div><div class=\"line\">3: iinc 1, 1</div><div class=\"line\">6: istore_1</div><div class=\"line\">7: getstatic #2; //Field java/lang/System.out:Ljava/io/PrintStream;</div><div class=\"line\">10: iload_1</div><div class=\"line\">11: invokevirtual #3; //Method java/io/PrintStream.println:(I)V</div><div class=\"line\">14: return</div></pre></td></tr></table></figure></p>\n<p>这里，我从第0行开始分析（分析中【】表示栈，栈的底端在左边，顶端在右边）：</p>\n<ul>\n<li>0：将常数0压入栈，栈内容：【0】</li>\n<li>1：将栈顶的元素弹出，也就是0，保存到局部变量区索引为为1（也就是变量i）的地方。栈内容：【】</li>\n<li>2：将局部变量区索引为1（也就是变量i）的值压入栈，栈内容：【0】</li>\n<li>3：将局部变量区索引为1（也就是常量i）的值加一，此时局部变量区索引为1的值（也就是i的值）是1。栈内容：【0】</li>\n<li>6：将栈顶元素弹出，保存到局部变量区索引为1（也就是i）的地方，此时i又变成了0。栈内容：【】</li>\n<li>7：获取常量池中索引为2所表示的类变量，也就是System.out。栈元素：【】</li>\n<li>10：将局部变量区索引为1的值（也就是i）压入栈。栈元素：【0】</li>\n<li>11：调用常量池索引为3的方法，也就是System.out.println</li>\n<li>14：返回main方法</li>\n</ul>\n<h2 id=\"i-i-1\"><a href=\"#i-i-1\" class=\"headerlink\" title=\"i = ++i\"></a>i = ++i</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String... args)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</div><div class=\"line\">        i = ++i;</div><div class=\"line\">        System.out.println(i);  <span class=\"comment\">//1</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>同样<code>javap -c Test</code><br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static void main(java.lang.String...);</div><div class=\"line\">  Code:</div><div class=\"line\">     0: iconst_0   //0入栈，【0】</div><div class=\"line\">     1: istore_1   //栈顶出栈，并赋值给索引为1的变量，【】</div><div class=\"line\">     2: iinc          1, 1    //索引为1的变量+1，【】</div><div class=\"line\">     5: iload_1    //索引为1的变量入栈，【1】</div><div class=\"line\">     6: istore_1   //栈顶出栈，并赋值给索引为1的变量，【】</div><div class=\"line\">     7: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;</div><div class=\"line\">    10: iload_1</div><div class=\"line\">    11: invokevirtual #3                  // Method java/io/PrintStream.println:(I)V</div><div class=\"line\">    14: return</div></pre></td></tr></table></figure></p>\n<h2 id=\"i-i-i\"><a href=\"#i-i-i\" class=\"headerlink\" title=\"i = i++ + ++i\"></a>i = i++ + ++i</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String... args)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</div><div class=\"line\">        i = i++ + ++i;</div><div class=\"line\">        System.out.println(i);  <span class=\"comment\">//2</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>同样<code>javap -c Test</code><br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static void main(java.lang.String...);</div><div class=\"line\">  Code:</div><div class=\"line\">     0: iconst_0   //0入栈，【0】</div><div class=\"line\">     1: istore_1   //栈顶出栈，并赋值给索引为1的变量，【】</div><div class=\"line\">     2: iload_1    //索引为1的变量入栈，【0】</div><div class=\"line\">     3: iinc          1, 1    //索引为1的变量+1，【0】</div><div class=\"line\">     6: iinc          1, 1    //索引为1的变量+1，【0】</div><div class=\"line\">     9: iload_1    //索引为1的变量入栈，【0|2】</div><div class=\"line\">    10: iadd       //栈顶的两个整型相加并入栈，【2】</div><div class=\"line\">    11: istore_1   //栈顶出栈，并赋值给索引为1的变量，【】</div><div class=\"line\">    12: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;</div><div class=\"line\">    15: iload_1</div><div class=\"line\">    16: invokevirtual #3                  // Method java/io/PrintStream.println:(I)V</div><div class=\"line\">    19: return</div></pre></td></tr></table></figure></p>\n<h2 id=\"通过图片理解指令\"><a href=\"#通过图片理解指令\" class=\"headerlink\" title=\"通过图片理解指令\"></a>通过图片理解指令</h2><p>int a = 100;</p>\n<p>int b = 98;</p>\n<p>int c = a+b;</p>\n<p><img src=\"http://images.cnitblog.com/i/535328/201403/111017360158953.jpg\" alt=\"image\"></p>\n"},{"title":"引用计数算法和根搜索算法","date":"2017-03-10T03:34:47.000Z","_content":"\n要判断JVM中哪些对象是可以被回收的。有两种算法，一起了解一下。\n\n## 引用计数算法\n### 实现方式\n给一个对象添加一个引用计数器，每当有一个地方引用它时，则引用计数器+1，当引用失效的时候-1。当减到0的时候，则说明该对象可以被回收了。\n\n这个算法有个致命的缺陷，当有循环引用的时候就不行了。如下图，如果用引用计数算法，则这两个对象都不会被GC回收了。所以Java使用的是根搜索算法。\n\n![image](http://p1.bpimg.com/567571/32ae7aaeee9f5952.png)\n\n## 根搜索算法\n### 实现方法\n指定一系列的叫做“GC Roots”的对象，以这些对象作为起点往下遍历搜索，当有对象不在搜索的路径上的时候，也就是不可达的时候，则说明它该被回收了。\n\n比如下图的Object2,3,4因为在搜索路径上，是可达的，所以不会被GC回收。  \n而Object5,6,7虽然有互相引用，但是不在根搜索的路径上，是不可达的，所以会被GC视为可回收对象。\n\n![image](http://p1.bpimg.com/567571/1a6d6da2ca67ee60.png)\n\n### GC Roots\n那么哪些对象是GC Roots对象呢？\n1. 虚拟机栈（栈帧中的本地变量表）中的引用的对象。\n2. 方法区的类静态属性引用的对象。\n3. 方法区的常量引用的对象。\n4. 本地方法栈中JNI（即Native方法）的引用的对象。","source":"_posts/JVM/引用计数算法和根搜索算法.md","raw":"---\ntitle: 引用计数算法和根搜索算法\ndate: 2017-03-10 11:34:47\ncategories: JVM\n---\n\n要判断JVM中哪些对象是可以被回收的。有两种算法，一起了解一下。\n\n## 引用计数算法\n### 实现方式\n给一个对象添加一个引用计数器，每当有一个地方引用它时，则引用计数器+1，当引用失效的时候-1。当减到0的时候，则说明该对象可以被回收了。\n\n这个算法有个致命的缺陷，当有循环引用的时候就不行了。如下图，如果用引用计数算法，则这两个对象都不会被GC回收了。所以Java使用的是根搜索算法。\n\n![image](http://p1.bpimg.com/567571/32ae7aaeee9f5952.png)\n\n## 根搜索算法\n### 实现方法\n指定一系列的叫做“GC Roots”的对象，以这些对象作为起点往下遍历搜索，当有对象不在搜索的路径上的时候，也就是不可达的时候，则说明它该被回收了。\n\n比如下图的Object2,3,4因为在搜索路径上，是可达的，所以不会被GC回收。  \n而Object5,6,7虽然有互相引用，但是不在根搜索的路径上，是不可达的，所以会被GC视为可回收对象。\n\n![image](http://p1.bpimg.com/567571/1a6d6da2ca67ee60.png)\n\n### GC Roots\n那么哪些对象是GC Roots对象呢？\n1. 虚拟机栈（栈帧中的本地变量表）中的引用的对象。\n2. 方法区的类静态属性引用的对象。\n3. 方法区的常量引用的对象。\n4. 本地方法栈中JNI（即Native方法）的引用的对象。","slug":"JVM/引用计数算法和根搜索算法","published":1,"updated":"2017-03-17T08:42:08.113Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1qae4750004c812xggtpqyx","content":"<p>要判断JVM中哪些对象是可以被回收的。有两种算法，一起了解一下。</p>\n<h2 id=\"引用计数算法\"><a href=\"#引用计数算法\" class=\"headerlink\" title=\"引用计数算法\"></a>引用计数算法</h2><h3 id=\"实现方式\"><a href=\"#实现方式\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h3><p>给一个对象添加一个引用计数器，每当有一个地方引用它时，则引用计数器+1，当引用失效的时候-1。当减到0的时候，则说明该对象可以被回收了。</p>\n<p>这个算法有个致命的缺陷，当有循环引用的时候就不行了。如下图，如果用引用计数算法，则这两个对象都不会被GC回收了。所以Java使用的是根搜索算法。</p>\n<p><img src=\"http://p1.bpimg.com/567571/32ae7aaeee9f5952.png\" alt=\"image\"></p>\n<h2 id=\"根搜索算法\"><a href=\"#根搜索算法\" class=\"headerlink\" title=\"根搜索算法\"></a>根搜索算法</h2><h3 id=\"实现方法\"><a href=\"#实现方法\" class=\"headerlink\" title=\"实现方法\"></a>实现方法</h3><p>指定一系列的叫做“GC Roots”的对象，以这些对象作为起点往下遍历搜索，当有对象不在搜索的路径上的时候，也就是不可达的时候，则说明它该被回收了。</p>\n<p>比如下图的Object2,3,4因为在搜索路径上，是可达的，所以不会被GC回收。<br>而Object5,6,7虽然有互相引用，但是不在根搜索的路径上，是不可达的，所以会被GC视为可回收对象。</p>\n<p><img src=\"http://p1.bpimg.com/567571/1a6d6da2ca67ee60.png\" alt=\"image\"></p>\n<h3 id=\"GC-Roots\"><a href=\"#GC-Roots\" class=\"headerlink\" title=\"GC Roots\"></a>GC Roots</h3><p>那么哪些对象是GC Roots对象呢？</p>\n<ol>\n<li>虚拟机栈（栈帧中的本地变量表）中的引用的对象。</li>\n<li>方法区的类静态属性引用的对象。</li>\n<li>方法区的常量引用的对象。</li>\n<li>本地方法栈中JNI（即Native方法）的引用的对象。</li>\n</ol>\n","excerpt":"","more":"<p>要判断JVM中哪些对象是可以被回收的。有两种算法，一起了解一下。</p>\n<h2 id=\"引用计数算法\"><a href=\"#引用计数算法\" class=\"headerlink\" title=\"引用计数算法\"></a>引用计数算法</h2><h3 id=\"实现方式\"><a href=\"#实现方式\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h3><p>给一个对象添加一个引用计数器，每当有一个地方引用它时，则引用计数器+1，当引用失效的时候-1。当减到0的时候，则说明该对象可以被回收了。</p>\n<p>这个算法有个致命的缺陷，当有循环引用的时候就不行了。如下图，如果用引用计数算法，则这两个对象都不会被GC回收了。所以Java使用的是根搜索算法。</p>\n<p><img src=\"http://p1.bpimg.com/567571/32ae7aaeee9f5952.png\" alt=\"image\"></p>\n<h2 id=\"根搜索算法\"><a href=\"#根搜索算法\" class=\"headerlink\" title=\"根搜索算法\"></a>根搜索算法</h2><h3 id=\"实现方法\"><a href=\"#实现方法\" class=\"headerlink\" title=\"实现方法\"></a>实现方法</h3><p>指定一系列的叫做“GC Roots”的对象，以这些对象作为起点往下遍历搜索，当有对象不在搜索的路径上的时候，也就是不可达的时候，则说明它该被回收了。</p>\n<p>比如下图的Object2,3,4因为在搜索路径上，是可达的，所以不会被GC回收。<br>而Object5,6,7虽然有互相引用，但是不在根搜索的路径上，是不可达的，所以会被GC视为可回收对象。</p>\n<p><img src=\"http://p1.bpimg.com/567571/1a6d6da2ca67ee60.png\" alt=\"image\"></p>\n<h3 id=\"GC-Roots\"><a href=\"#GC-Roots\" class=\"headerlink\" title=\"GC Roots\"></a>GC Roots</h3><p>那么哪些对象是GC Roots对象呢？</p>\n<ol>\n<li>虚拟机栈（栈帧中的本地变量表）中的引用的对象。</li>\n<li>方法区的类静态属性引用的对象。</li>\n<li>方法区的常量引用的对象。</li>\n<li>本地方法栈中JNI（即Native方法）的引用的对象。</li>\n</ol>\n"},{"title":"GROUP_CONCAT，GROUP BY结合使用","date":"2017-04-11T04:34:47.000Z","_content":"今天做查询拼接的时候学习使用了`GROUP_CONCAT`。\n\n<!-- more -->\n\n**统计各年龄段所有人员的名字，并放在一个字段内**\n\n```\nSELECT\n\tpv.age,\n\tGROUP_CONCAT(DISTINCT pv.patient_name) AS 'all_name'\nFROM\n\tpv_patient_visit pv\nGROUP BY\n\tpv.age\n```\n\n因为用了`GROUP BY`,所以使用`GROUP_CONCAT`，而不是使用`CONCAT`。\n\n因为名字可能重复，所以加上`DISTINCT`。\n\n[参考资料](http://blog.csdn.net/gggxin/article/details/5282672)","source":"_posts/MySQL/GROUP_CONCAT，GROUP BY结合使用.md","raw":"---\ntitle: GROUP_CONCAT，GROUP BY结合使用\ndate: 2017-04-11 12:34:47\ncategories: MySQL\n---\n今天做查询拼接的时候学习使用了`GROUP_CONCAT`。\n\n<!-- more -->\n\n**统计各年龄段所有人员的名字，并放在一个字段内**\n\n```\nSELECT\n\tpv.age,\n\tGROUP_CONCAT(DISTINCT pv.patient_name) AS 'all_name'\nFROM\n\tpv_patient_visit pv\nGROUP BY\n\tpv.age\n```\n\n因为用了`GROUP BY`,所以使用`GROUP_CONCAT`，而不是使用`CONCAT`。\n\n因为名字可能重复，所以加上`DISTINCT`。\n\n[参考资料](http://blog.csdn.net/gggxin/article/details/5282672)","slug":"MySQL/GROUP_CONCAT，GROUP BY结合使用","published":1,"updated":"2017-04-11T05:06:53.796Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1qae47c0006c8123r18ms11","content":"<p>今天做查询拼接的时候学习使用了<code>GROUP_CONCAT</code>。</p>\n<a id=\"more\"></a>\n<p><strong>统计各年龄段所有人员的名字，并放在一个字段内</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT</div><div class=\"line\">\tpv.age,</div><div class=\"line\">\tGROUP_CONCAT(DISTINCT pv.patient_name) AS &apos;all_name&apos;</div><div class=\"line\">FROM</div><div class=\"line\">\tpv_patient_visit pv</div><div class=\"line\">GROUP BY</div><div class=\"line\">\tpv.age</div></pre></td></tr></table></figure>\n<p>因为用了<code>GROUP BY</code>,所以使用<code>GROUP_CONCAT</code>，而不是使用<code>CONCAT</code>。</p>\n<p>因为名字可能重复，所以加上<code>DISTINCT</code>。</p>\n<p><a href=\"http://blog.csdn.net/gggxin/article/details/5282672\" target=\"_blank\" rel=\"external\">参考资料</a></p>\n","excerpt":"<p>今天做查询拼接的时候学习使用了<code>GROUP_CONCAT</code>。</p>","more":"<p><strong>统计各年龄段所有人员的名字，并放在一个字段内</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT</div><div class=\"line\">\tpv.age,</div><div class=\"line\">\tGROUP_CONCAT(DISTINCT pv.patient_name) AS &apos;all_name&apos;</div><div class=\"line\">FROM</div><div class=\"line\">\tpv_patient_visit pv</div><div class=\"line\">GROUP BY</div><div class=\"line\">\tpv.age</div></pre></td></tr></table></figure>\n<p>因为用了<code>GROUP BY</code>,所以使用<code>GROUP_CONCAT</code>，而不是使用<code>CONCAT</code>。</p>\n<p>因为名字可能重复，所以加上<code>DISTINCT</code>。</p>\n<p><a href=\"http://blog.csdn.net/gggxin/article/details/5282672\">参考资料</a></p>"},{"title":"AOP导致@Autowired失败","date":"2017-04-20T10:34:47.000Z","_content":"\n今天给某个service方法加了一个切面，然后项目就启动报错了。\n\n<!-- more -->\n\n用简单的代码演示一下。\n\n**service代码**\n```\npublic interface StuentService {\n    void print();\n}\n```\n\n**service实现类代码**\n```\n@service(\"studentServiceImpl\")\npublic class StuentServiceImpl implements StuentService{\n    public void print(){\n        //\n    }\n}\n```\n\n**controller代码**\n```\n@RestController\npublic class StudentController {\n\n    @Autowired\n    private StuentServiceImpl studentServiceImpl;\n    \n    //省略mapping方法\n}\n```\n\n**当我加上切面时**\n```\n@Around(\"execution(* wiki.lxl.service.StudentService.print(..))\")\npublic Object print(ProceedingJoinPoint joinPoint) throws Throwable {\n    return joinPoint.proceed();\n}\n```\n\n启动项目，报错了\n`Error creating bean with name 'studentController'`，因为没有类型为`StuentServiceImpl`的bean，所以注入失败了。\n\n把controller里的\n```\n@Autowired\nprivate StuentServiceImpl studentServiceImpl;\n```\n改成\n```\n@Autowired\nprivate StuentService studentServiceImpl;\n```\n问题就解决了。\n\n因为AOP是基于代理模式的，在切print方法的时候，其实是生成了一个实现`StudentService`的代理类proxy，这个proxy类是无法把引用赋给`StudentServiceImpl`的。\n\n\n## 结语\n\n平时的《设计模式之禅》没有白看，虽然平时框架帮我们实现好了N多功能，我们也许很少用到其中的设计模式，但是看到源码就知道这里使用了哪种设计模式的能力，个人觉得还是很有必要的。","source":"_posts/Spring/AOP导致@Autowired失败.md","raw":"---\ntitle: AOP导致@Autowired失败\ndate: 2017-04-20 18:34:47\ncategories: Spring\n---\n\n今天给某个service方法加了一个切面，然后项目就启动报错了。\n\n<!-- more -->\n\n用简单的代码演示一下。\n\n**service代码**\n```\npublic interface StuentService {\n    void print();\n}\n```\n\n**service实现类代码**\n```\n@service(\"studentServiceImpl\")\npublic class StuentServiceImpl implements StuentService{\n    public void print(){\n        //\n    }\n}\n```\n\n**controller代码**\n```\n@RestController\npublic class StudentController {\n\n    @Autowired\n    private StuentServiceImpl studentServiceImpl;\n    \n    //省略mapping方法\n}\n```\n\n**当我加上切面时**\n```\n@Around(\"execution(* wiki.lxl.service.StudentService.print(..))\")\npublic Object print(ProceedingJoinPoint joinPoint) throws Throwable {\n    return joinPoint.proceed();\n}\n```\n\n启动项目，报错了\n`Error creating bean with name 'studentController'`，因为没有类型为`StuentServiceImpl`的bean，所以注入失败了。\n\n把controller里的\n```\n@Autowired\nprivate StuentServiceImpl studentServiceImpl;\n```\n改成\n```\n@Autowired\nprivate StuentService studentServiceImpl;\n```\n问题就解决了。\n\n因为AOP是基于代理模式的，在切print方法的时候，其实是生成了一个实现`StudentService`的代理类proxy，这个proxy类是无法把引用赋给`StudentServiceImpl`的。\n\n\n## 结语\n\n平时的《设计模式之禅》没有白看，虽然平时框架帮我们实现好了N多功能，我们也许很少用到其中的设计模式，但是看到源码就知道这里使用了哪种设计模式的能力，个人觉得还是很有必要的。","slug":"Spring/AOP导致@Autowired失败","published":1,"updated":"2017-04-20T10:49:26.931Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1qae47e0007c8129g5c62n7","content":"<p>今天给某个service方法加了一个切面，然后项目就启动报错了。</p>\n<a id=\"more\"></a>\n<p>用简单的代码演示一下。</p>\n<p><strong>service代码</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">public interface StuentService &#123;</div><div class=\"line\">    void print();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>service实现类代码</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">@service(&quot;studentServiceImpl&quot;)</div><div class=\"line\">public class StuentServiceImpl implements StuentService&#123;</div><div class=\"line\">    public void print()&#123;</div><div class=\"line\">        //</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>controller代码</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">@RestController</div><div class=\"line\">public class StudentController &#123;</div><div class=\"line\"></div><div class=\"line\">    @Autowired</div><div class=\"line\">    private StuentServiceImpl studentServiceImpl;</div><div class=\"line\">    </div><div class=\"line\">    //省略mapping方法</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>当我加上切面时</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Around(&quot;execution(* wiki.lxl.service.StudentService.print(..))&quot;)</div><div class=\"line\">public Object print(ProceedingJoinPoint joinPoint) throws Throwable &#123;</div><div class=\"line\">    return joinPoint.proceed();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>启动项目，报错了<br><code>Error creating bean with name &#39;studentController&#39;</code>，因为没有类型为<code>StuentServiceImpl</code>的bean，所以注入失败了。</p>\n<p>把controller里的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Autowired</div><div class=\"line\">private StuentServiceImpl studentServiceImpl;</div></pre></td></tr></table></figure></p>\n<p>改成<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Autowired</div><div class=\"line\">private StuentService studentServiceImpl;</div></pre></td></tr></table></figure></p>\n<p>问题就解决了。</p>\n<p>因为AOP是基于代理模式的，在切print方法的时候，其实是生成了一个实现<code>StudentService</code>的代理类proxy，这个proxy类是无法把引用赋给<code>StudentServiceImpl</code>的。</p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>平时的《设计模式之禅》没有白看，虽然平时框架帮我们实现好了N多功能，我们也许很少用到其中的设计模式，但是看到源码就知道这里使用了哪种设计模式的能力，个人觉得还是很有必要的。</p>\n","excerpt":"<p>今天给某个service方法加了一个切面，然后项目就启动报错了。</p>","more":"<p>用简单的代码演示一下。</p>\n<p><strong>service代码</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">public interface StuentService &#123;</div><div class=\"line\">    void print();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>service实现类代码</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">@service(&quot;studentServiceImpl&quot;)</div><div class=\"line\">public class StuentServiceImpl implements StuentService&#123;</div><div class=\"line\">    public void print()&#123;</div><div class=\"line\">        //</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>controller代码</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">@RestController</div><div class=\"line\">public class StudentController &#123;</div><div class=\"line\"></div><div class=\"line\">    @Autowired</div><div class=\"line\">    private StuentServiceImpl studentServiceImpl;</div><div class=\"line\">    </div><div class=\"line\">    //省略mapping方法</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>当我加上切面时</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Around(&quot;execution(* wiki.lxl.service.StudentService.print(..))&quot;)</div><div class=\"line\">public Object print(ProceedingJoinPoint joinPoint) throws Throwable &#123;</div><div class=\"line\">    return joinPoint.proceed();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>启动项目，报错了<br><code>Error creating bean with name &#39;studentController&#39;</code>，因为没有类型为<code>StuentServiceImpl</code>的bean，所以注入失败了。</p>\n<p>把controller里的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Autowired</div><div class=\"line\">private StuentServiceImpl studentServiceImpl;</div></pre></td></tr></table></figure></p>\n<p>改成<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Autowired</div><div class=\"line\">private StuentService studentServiceImpl;</div></pre></td></tr></table></figure></p>\n<p>问题就解决了。</p>\n<p>因为AOP是基于代理模式的，在切print方法的时候，其实是生成了一个实现<code>StudentService</code>的代理类proxy，这个proxy类是无法把引用赋给<code>StudentServiceImpl</code>的。</p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>平时的《设计模式之禅》没有白看，虽然平时框架帮我们实现好了N多功能，我们也许很少用到其中的设计模式，但是看到源码就知道这里使用了哪种设计模式的能力，个人觉得还是很有必要的。</p>"},{"title":"COUNT,GROUP BY,CASE WHEN混用","date":"2017-04-11T04:34:47.000Z","_content":"今天在使用COUNT的时候学习了新的写法。\n\n也就是COUNT结合CASE WHEN使用。\n\n<!-- more -->\n\n**统计病人表不同年龄段各有多少人。**\n\n```\nSELECT\n\tpv.age,\n\tCOUNT(pv.age) AS 'count'\nFROM\n\tpv_patient_visit pv\nGROUP BY\n\tpv.age\n```\n\n**统计病人表不同年龄段各有多少男人，女人。**\n\n```\nSELECT\n\tpv.age,\n\tCOUNT(case when pv.sex='0' then 1 else null end ) AS 'man',\n\tCOUNT(case when pv.sex='1' then 1 else null end ) AS 'woman'\nFROM\n\tpv_patient_visit pv\nGROUP BY\n\tpv.age\n```\n\n## 后记\n`COUNT( CASE WHEN pv.sex='0' THEN 1 ELSE NULL END )`这种写法，只适合表达式内字段属性很少的情况。比如是否删除，男女等。","source":"_posts/MySQL/COUNT,GROUP BY,CASE WHEN混用.md","raw":"---\ntitle: COUNT,GROUP BY,CASE WHEN混用\ndate: 2017-04-11 12:34:47\ncategories: MySQL\n---\n今天在使用COUNT的时候学习了新的写法。\n\n也就是COUNT结合CASE WHEN使用。\n\n<!-- more -->\n\n**统计病人表不同年龄段各有多少人。**\n\n```\nSELECT\n\tpv.age,\n\tCOUNT(pv.age) AS 'count'\nFROM\n\tpv_patient_visit pv\nGROUP BY\n\tpv.age\n```\n\n**统计病人表不同年龄段各有多少男人，女人。**\n\n```\nSELECT\n\tpv.age,\n\tCOUNT(case when pv.sex='0' then 1 else null end ) AS 'man',\n\tCOUNT(case when pv.sex='1' then 1 else null end ) AS 'woman'\nFROM\n\tpv_patient_visit pv\nGROUP BY\n\tpv.age\n```\n\n## 后记\n`COUNT( CASE WHEN pv.sex='0' THEN 1 ELSE NULL END )`这种写法，只适合表达式内字段属性很少的情况。比如是否删除，男女等。","slug":"MySQL/COUNT,GROUP BY,CASE WHEN混用","published":1,"updated":"2017-04-11T02:58:13.734Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1qae47i0008c812r5mtogfh","content":"<p>今天在使用COUNT的时候学习了新的写法。</p>\n<p>也就是COUNT结合CASE WHEN使用。</p>\n<a id=\"more\"></a>\n<p><strong>统计病人表不同年龄段各有多少人。</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT</div><div class=\"line\">\tpv.age,</div><div class=\"line\">\tCOUNT(pv.age) AS &apos;count&apos;</div><div class=\"line\">FROM</div><div class=\"line\">\tpv_patient_visit pv</div><div class=\"line\">GROUP BY</div><div class=\"line\">\tpv.age</div></pre></td></tr></table></figure>\n<p><strong>统计病人表不同年龄段各有多少男人，女人。</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT</div><div class=\"line\">\tpv.age,</div><div class=\"line\">\tCOUNT(case when pv.sex=&apos;0&apos; then 1 else null end ) AS &apos;man&apos;,</div><div class=\"line\">\tCOUNT(case when pv.sex=&apos;1&apos; then 1 else null end ) AS &apos;woman&apos;</div><div class=\"line\">FROM</div><div class=\"line\">\tpv_patient_visit pv</div><div class=\"line\">GROUP BY</div><div class=\"line\">\tpv.age</div></pre></td></tr></table></figure>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p><code>COUNT( CASE WHEN pv.sex=&#39;0&#39; THEN 1 ELSE NULL END )</code>这种写法，只适合表达式内字段属性很少的情况。比如是否删除，男女等。</p>\n","excerpt":"<p>今天在使用COUNT的时候学习了新的写法。</p>\n<p>也就是COUNT结合CASE WHEN使用。</p>","more":"<p><strong>统计病人表不同年龄段各有多少人。</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT</div><div class=\"line\">\tpv.age,</div><div class=\"line\">\tCOUNT(pv.age) AS &apos;count&apos;</div><div class=\"line\">FROM</div><div class=\"line\">\tpv_patient_visit pv</div><div class=\"line\">GROUP BY</div><div class=\"line\">\tpv.age</div></pre></td></tr></table></figure>\n<p><strong>统计病人表不同年龄段各有多少男人，女人。</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT</div><div class=\"line\">\tpv.age,</div><div class=\"line\">\tCOUNT(case when pv.sex=&apos;0&apos; then 1 else null end ) AS &apos;man&apos;,</div><div class=\"line\">\tCOUNT(case when pv.sex=&apos;1&apos; then 1 else null end ) AS &apos;woman&apos;</div><div class=\"line\">FROM</div><div class=\"line\">\tpv_patient_visit pv</div><div class=\"line\">GROUP BY</div><div class=\"line\">\tpv.age</div></pre></td></tr></table></figure>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p><code>COUNT( CASE WHEN pv.sex=&#39;0&#39; THEN 1 ELSE NULL END )</code>这种写法，只适合表达式内字段属性很少的情况。比如是否删除，男女等。</p>"},{"title":"Maven插件开发(1)","date":"2017-04-01T03:34:47.000Z","_content":"\n学习Maven插件的编写，有助于理解Maven的生命周期，goal，-D，-P参数等。\n\n以一个Hello,World的例子来入门Maven插件的开发吧。\n\n<!-- more -->\n\nMaven插件本身也是Maven项目，所以我们先搭一个Maven项目的骨架出来。\n \n**先创建一个pom.xml文件**\n```xml\n <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>sample.plugin</groupId>\n    <artifactId>hello-maven-plugin</artifactId>\n    <version>1.0.0-SNAPSHOT</version>\n    <packaging>maven-plugin</packaging>\n\n    <name>Sample Maven Plugin</name>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.apache.maven</groupId>\n            <artifactId>maven-plugin-api</artifactId>\n            <version>3.0</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.maven.plugin-tools</groupId>\n            <artifactId>maven-plugin-annotations</artifactId>\n            <version>3.4</version>\n            <scope>provided</scope>\n        </dependency>\n    </dependencies>\n\n</project>\n```\n指定这个sample项目的`groupId`，`artifactId`，`version`，`packaging`。加入该sample项目所需要依赖的jar包。\n \n这里要注意的是，写一个Maven插件，`packaging`必须指定为`maven-plugin`。\n \n`artifactId`最好是指定为`xxxx-maven-plugin`或者是`maven-xxxx-plugin`。这对后面执行这个插件有好处。\n\n**编写Java代码**\n```java\npackage sample.plugin;\n\nimport org.apache.maven.plugin.AbstractMojo;\nimport org.apache.maven.plugin.MojoExecutionException;\nimport org.apache.maven.plugin.MojoFailureException;\nimport org.apache.maven.plugins.annotations.Mojo;\n\n/**\n * Says \"Hi\" to the user.\n */\n@Mojo(name = \"sayhi\")\npublic class GreetingMojo extends AbstractMojo {\n\n    public void execute() throws MojoExecutionException, MojoFailureException {\n        getLog().info(\"Hello,world.\");\n    }\n\n}\n```\n- 抽象类`AbstractMojo`实现了接口`Mojo`和`ContextEnabled`，除了`execute`方法要我们自己实现外，其他的都可以直接使用。\n- `@Mojo`注解是必须要的，否则install插件的时候会失败。该注解用来控制在什么时候以何种方式来执行这个mojo。\n- `execute`方法可以抛出两个异常\n    - `MojoExecutionException`，指的是非预期的异常。\n    - `MojoFailureException`，指的是预期的异常。\n\n**安装插件**\n\n在pom.xml目录下，执行`mvn clean install`命令。\n\n看到`BUILD SUCCESS`后，就可以在本地仓库里看到自己写的Maven插件了。\n\n**使用插件**\n\n我们在pom.xml里依赖一下新写的插件\n```\n<build>\n    <plugins>\n        <plugin>\n            <groupId>sample.plugin</groupId>\n            <artifactId>hello-maven-plugin</artifactId>\n            <version>1.0.0-SNAPSHOT</version>\n        </plugin>\n    </plugins>\n</build>\n```\n依旧还是在pom.xml目录下，按下面的规则执行插件\n\n`mvn groupId:artifactId:version:goal`\n\n在刚写的sample项目里就是\n\n`mvn sample.plugin:hello-maven-plugin:1.0.0-SNAPSHOT:sayhi`\n\n可以看到屏幕上输出了`Hello,world.`\n\n是不是执行命令太长，感觉这么写很烦，可以简写成`mvn hello:sayhi`。前提是你要遵循插件的`artifactId`指定为`xxxx-maven-plugin`或者是`maven-xxxx-plugin`。\n\n\n\n### 结语\n本篇通过一个简单的demo来入门Maven插件，下次再写一些更实际的例子。\n\n[参考资料](http://maven.apache.org/guides/plugin/guide-java-plugin-development.html)\n","source":"_posts/Maven/Maven插件开发(1).md","raw":"---\ntitle: Maven插件开发(1)\ndate: 2017-04-01 11:34:47\ncategories: Maven\n---\n\n学习Maven插件的编写，有助于理解Maven的生命周期，goal，-D，-P参数等。\n\n以一个Hello,World的例子来入门Maven插件的开发吧。\n\n<!-- more -->\n\nMaven插件本身也是Maven项目，所以我们先搭一个Maven项目的骨架出来。\n \n**先创建一个pom.xml文件**\n```xml\n <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>sample.plugin</groupId>\n    <artifactId>hello-maven-plugin</artifactId>\n    <version>1.0.0-SNAPSHOT</version>\n    <packaging>maven-plugin</packaging>\n\n    <name>Sample Maven Plugin</name>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.apache.maven</groupId>\n            <artifactId>maven-plugin-api</artifactId>\n            <version>3.0</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.maven.plugin-tools</groupId>\n            <artifactId>maven-plugin-annotations</artifactId>\n            <version>3.4</version>\n            <scope>provided</scope>\n        </dependency>\n    </dependencies>\n\n</project>\n```\n指定这个sample项目的`groupId`，`artifactId`，`version`，`packaging`。加入该sample项目所需要依赖的jar包。\n \n这里要注意的是，写一个Maven插件，`packaging`必须指定为`maven-plugin`。\n \n`artifactId`最好是指定为`xxxx-maven-plugin`或者是`maven-xxxx-plugin`。这对后面执行这个插件有好处。\n\n**编写Java代码**\n```java\npackage sample.plugin;\n\nimport org.apache.maven.plugin.AbstractMojo;\nimport org.apache.maven.plugin.MojoExecutionException;\nimport org.apache.maven.plugin.MojoFailureException;\nimport org.apache.maven.plugins.annotations.Mojo;\n\n/**\n * Says \"Hi\" to the user.\n */\n@Mojo(name = \"sayhi\")\npublic class GreetingMojo extends AbstractMojo {\n\n    public void execute() throws MojoExecutionException, MojoFailureException {\n        getLog().info(\"Hello,world.\");\n    }\n\n}\n```\n- 抽象类`AbstractMojo`实现了接口`Mojo`和`ContextEnabled`，除了`execute`方法要我们自己实现外，其他的都可以直接使用。\n- `@Mojo`注解是必须要的，否则install插件的时候会失败。该注解用来控制在什么时候以何种方式来执行这个mojo。\n- `execute`方法可以抛出两个异常\n    - `MojoExecutionException`，指的是非预期的异常。\n    - `MojoFailureException`，指的是预期的异常。\n\n**安装插件**\n\n在pom.xml目录下，执行`mvn clean install`命令。\n\n看到`BUILD SUCCESS`后，就可以在本地仓库里看到自己写的Maven插件了。\n\n**使用插件**\n\n我们在pom.xml里依赖一下新写的插件\n```\n<build>\n    <plugins>\n        <plugin>\n            <groupId>sample.plugin</groupId>\n            <artifactId>hello-maven-plugin</artifactId>\n            <version>1.0.0-SNAPSHOT</version>\n        </plugin>\n    </plugins>\n</build>\n```\n依旧还是在pom.xml目录下，按下面的规则执行插件\n\n`mvn groupId:artifactId:version:goal`\n\n在刚写的sample项目里就是\n\n`mvn sample.plugin:hello-maven-plugin:1.0.0-SNAPSHOT:sayhi`\n\n可以看到屏幕上输出了`Hello,world.`\n\n是不是执行命令太长，感觉这么写很烦，可以简写成`mvn hello:sayhi`。前提是你要遵循插件的`artifactId`指定为`xxxx-maven-plugin`或者是`maven-xxxx-plugin`。\n\n\n\n### 结语\n本篇通过一个简单的demo来入门Maven插件，下次再写一些更实际的例子。\n\n[参考资料](http://maven.apache.org/guides/plugin/guide-java-plugin-development.html)\n","slug":"Maven/Maven插件开发(1)","published":1,"updated":"2017-04-01T03:29:43.798Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1qae47m000ac812rdwao53z","content":"<p>学习Maven插件的编写，有助于理解Maven的生命周期，goal，-D，-P参数等。</p>\n<p>以一个Hello,World的例子来入门Maven插件的开发吧。</p>\n<a id=\"more\"></a>\n<p>Maven插件本身也是Maven项目，所以我们先搭一个Maven项目的骨架出来。</p>\n<p><strong>先创建一个pom.xml文件</strong><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></div><div class=\"line\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>sample.plugin<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hello-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Sample Maven Plugin<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-plugin-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugin-tools<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-plugin-annotations<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>provided<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>指定这个sample项目的<code>groupId</code>，<code>artifactId</code>，<code>version</code>，<code>packaging</code>。加入该sample项目所需要依赖的jar包。</p>\n<p>这里要注意的是，写一个Maven插件，<code>packaging</code>必须指定为<code>maven-plugin</code>。</p>\n<p><code>artifactId</code>最好是指定为<code>xxxx-maven-plugin</code>或者是<code>maven-xxxx-plugin</code>。这对后面执行这个插件有好处。</p>\n<p><strong>编写Java代码</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> sample.plugin;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.maven.plugin.AbstractMojo;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.maven.plugin.MojoExecutionException;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.maven.plugin.MojoFailureException;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.maven.plugins.annotations.Mojo;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Says \"Hi\" to the user.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">@Mojo</span>(name = <span class=\"string\">\"sayhi\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GreetingMojo</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractMojo</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> MojoExecutionException, MojoFailureException </span>&#123;</div><div class=\"line\">        getLog().info(<span class=\"string\">\"Hello,world.\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>抽象类<code>AbstractMojo</code>实现了接口<code>Mojo</code>和<code>ContextEnabled</code>，除了<code>execute</code>方法要我们自己实现外，其他的都可以直接使用。</li>\n<li><code>@Mojo</code>注解是必须要的，否则install插件的时候会失败。该注解用来控制在什么时候以何种方式来执行这个mojo。</li>\n<li><code>execute</code>方法可以抛出两个异常<ul>\n<li><code>MojoExecutionException</code>，指的是非预期的异常。</li>\n<li><code>MojoFailureException</code>，指的是预期的异常。</li>\n</ul>\n</li>\n</ul>\n<p><strong>安装插件</strong></p>\n<p>在pom.xml目录下，执行<code>mvn clean install</code>命令。</p>\n<p>看到<code>BUILD SUCCESS</code>后，就可以在本地仓库里看到自己写的Maven插件了。</p>\n<p><strong>使用插件</strong></p>\n<p>我们在pom.xml里依赖一下新写的插件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;build&gt;</div><div class=\"line\">    &lt;plugins&gt;</div><div class=\"line\">        &lt;plugin&gt;</div><div class=\"line\">            &lt;groupId&gt;sample.plugin&lt;/groupId&gt;</div><div class=\"line\">            &lt;artifactId&gt;hello-maven-plugin&lt;/artifactId&gt;</div><div class=\"line\">            &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;</div><div class=\"line\">        &lt;/plugin&gt;</div><div class=\"line\">    &lt;/plugins&gt;</div><div class=\"line\">&lt;/build&gt;</div></pre></td></tr></table></figure></p>\n<p>依旧还是在pom.xml目录下，按下面的规则执行插件</p>\n<p><code>mvn groupId:artifactId:version:goal</code></p>\n<p>在刚写的sample项目里就是</p>\n<p><code>mvn sample.plugin:hello-maven-plugin:1.0.0-SNAPSHOT:sayhi</code></p>\n<p>可以看到屏幕上输出了<code>Hello,world.</code></p>\n<p>是不是执行命令太长，感觉这么写很烦，可以简写成<code>mvn hello:sayhi</code>。前提是你要遵循插件的<code>artifactId</code>指定为<code>xxxx-maven-plugin</code>或者是<code>maven-xxxx-plugin</code>。</p>\n<h3 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h3><p>本篇通过一个简单的demo来入门Maven插件，下次再写一些更实际的例子。</p>\n<p><a href=\"http://maven.apache.org/guides/plugin/guide-java-plugin-development.html\" target=\"_blank\" rel=\"external\">参考资料</a></p>\n","excerpt":"<p>学习Maven插件的编写，有助于理解Maven的生命周期，goal，-D，-P参数等。</p>\n<p>以一个Hello,World的例子来入门Maven插件的开发吧。</p>","more":"<p>Maven插件本身也是Maven项目，所以我们先搭一个Maven项目的骨架出来。</p>\n<p><strong>先创建一个pom.xml文件</strong><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></div><div class=\"line\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>sample.plugin<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hello-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Sample Maven Plugin<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-plugin-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugin-tools<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-plugin-annotations<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>provided<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>指定这个sample项目的<code>groupId</code>，<code>artifactId</code>，<code>version</code>，<code>packaging</code>。加入该sample项目所需要依赖的jar包。</p>\n<p>这里要注意的是，写一个Maven插件，<code>packaging</code>必须指定为<code>maven-plugin</code>。</p>\n<p><code>artifactId</code>最好是指定为<code>xxxx-maven-plugin</code>或者是<code>maven-xxxx-plugin</code>。这对后面执行这个插件有好处。</p>\n<p><strong>编写Java代码</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> sample.plugin;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.maven.plugin.AbstractMojo;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.maven.plugin.MojoExecutionException;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.maven.plugin.MojoFailureException;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.maven.plugins.annotations.Mojo;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Says \"Hi\" to the user.</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"meta\">@Mojo</span>(name = <span class=\"string\">\"sayhi\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GreetingMojo</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractMojo</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> MojoExecutionException, MojoFailureException </span>&#123;</div><div class=\"line\">        getLog().info(<span class=\"string\">\"Hello,world.\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>抽象类<code>AbstractMojo</code>实现了接口<code>Mojo</code>和<code>ContextEnabled</code>，除了<code>execute</code>方法要我们自己实现外，其他的都可以直接使用。</li>\n<li><code>@Mojo</code>注解是必须要的，否则install插件的时候会失败。该注解用来控制在什么时候以何种方式来执行这个mojo。</li>\n<li><code>execute</code>方法可以抛出两个异常<ul>\n<li><code>MojoExecutionException</code>，指的是非预期的异常。</li>\n<li><code>MojoFailureException</code>，指的是预期的异常。</li>\n</ul>\n</li>\n</ul>\n<p><strong>安装插件</strong></p>\n<p>在pom.xml目录下，执行<code>mvn clean install</code>命令。</p>\n<p>看到<code>BUILD SUCCESS</code>后，就可以在本地仓库里看到自己写的Maven插件了。</p>\n<p><strong>使用插件</strong></p>\n<p>我们在pom.xml里依赖一下新写的插件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;build&gt;</div><div class=\"line\">    &lt;plugins&gt;</div><div class=\"line\">        &lt;plugin&gt;</div><div class=\"line\">            &lt;groupId&gt;sample.plugin&lt;/groupId&gt;</div><div class=\"line\">            &lt;artifactId&gt;hello-maven-plugin&lt;/artifactId&gt;</div><div class=\"line\">            &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;</div><div class=\"line\">        &lt;/plugin&gt;</div><div class=\"line\">    &lt;/plugins&gt;</div><div class=\"line\">&lt;/build&gt;</div></pre></td></tr></table></figure></p>\n<p>依旧还是在pom.xml目录下，按下面的规则执行插件</p>\n<p><code>mvn groupId:artifactId:version:goal</code></p>\n<p>在刚写的sample项目里就是</p>\n<p><code>mvn sample.plugin:hello-maven-plugin:1.0.0-SNAPSHOT:sayhi</code></p>\n<p>可以看到屏幕上输出了<code>Hello,world.</code></p>\n<p>是不是执行命令太长，感觉这么写很烦，可以简写成<code>mvn hello:sayhi</code>。前提是你要遵循插件的<code>artifactId</code>指定为<code>xxxx-maven-plugin</code>或者是<code>maven-xxxx-plugin</code>。</p>\n<h3 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h3><p>本篇通过一个简单的demo来入门Maven插件，下次再写一些更实际的例子。</p>\n<p><a href=\"http://maven.apache.org/guides/plugin/guide-java-plugin-development.html\">参考资料</a></p>"},{"title":"Spring配置欢迎页引发的思考","date":"2017-03-14T03:34:47.000Z","_content":"# 引言\n今天下载了[一个demo项目](https://github.com/fankay/ssmVue)，跑起来可以默认打开index.jsp的欢迎页。但是把index.jsp换成index.html就会404。平时也没配置过欢迎页，就顺手研究了一下。于是就查漏补缺了以下知识点。\n![image](http://i1.piimg.com/567571/e07267f47dba6cc6.png)\n\n# 项目概述\n1. 项目中的web.xml\n```\n  <servlet>\n    <servlet-name>mvc</servlet-name>\n    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n    <load-on-startup>1</load-on-startup>\n  </servlet>\n  <servlet-mapping>\n    <servlet-name>mvc</servlet-name>\n    <url-pattern>/</url-pattern>\n  </servlet-mapping>\n```\n2. 项目的web.xml里没有配置`<welcome-file-list>`\n\n\n# 知识点\n### viewResolver\n\n开始我以为是这个bean的问题，因为我看到这个bean的配置里有个`.jsp`，后来才知道这个bean是在请求处理完以后，返回ModelAndView，把数据渲染到页面里用的。\n\n### 三种index.html可行的方法\n1. 使用标签`<mvc:default-servlet-handler/>`\n\n    在xxxx-servlet.xml里定义这个标签。这个标签的作用是，当返回404的时候，就使用默认的servlet去处理这个请求。所以当使用index.html的时候，先经过DispatcherServlet，发现没有对用的handler，于是返回404，然后被默认的servlet处理，成功显示index.html的内容。\n    \n    使用这个标签的时候，务必加上`<context:annotation-config />`，不然就会发现普通的请求过不了了。[原因可以参考这里](http://www.cnblogs.com/hujingwei/p/5349983.html)\n\n2. 使用标签`<mvc:resource mapping=\"xx\" location=\"\"/>`\n\n    在xxxx-servlet.xml里定义这个标签。这个标签的作用是，当访问的是静态资源的时候，并且被mapping匹配到的话，都会把位置定位到相对路径location下。\n\n3. 定义一个使用default的servlet-mapping\n    \n    ```\n    <servlet-mapping>\n\t    <servlet-name>default</servlet-name>\n\t    <url-pattern>*.html</url-pattern>\n    </servlet-mapping>\n    ```\n    在项目的web.xml里加上这段代码也可以实现。因为index.html直接就匹配了default的servlet了。\n\n### /和/*的区别\n    \n如果我把DispatcherServlet的匹配路径从`/`改成`/*`，就会发现连index.jsp也404了。这是为什么呢？\n\n`/*`会匹配所有请求，如果请求没被其他servlet匹配走，那就都会走这个servlet，这种写法不是很推荐。还有个比较神奇的问题就是，当写成`/*`的时候，就不会去默认访问`<welcome-file-list>`里的欢迎页了。只有在访问的时候手动输入欢迎页的请求地址才能打开。\n\n`/`呢，就是一个请求进来以后，所有的servlet都不匹配。就会通过`/`的servlet来实现。这种写法也不是很推荐的。\n\n这里就要说到`<url-pattern>`的匹配优先级问题了。\n\n### `<url-pattern>`的匹配优先级\n\n精确路径>最长路径>扩展名\n\n精确路径：类似`<url-pattern>/demo.html</url-pattern>`\n\n路径匹配：类似`<url-pattern>/xxx/xx/x/*</url-pattern>`\n\n扩展名匹配：类似`<url-pattern>*.jsp</url-pattern>`\n\n路径匹配和扩展名匹配是不能同时使用的。比如`<url-pattern>/*.jsp</url-pattern>`就是一种错误的用法。\n\n### 相同的`<url-pattern>`的问题\n\n在同一个web.xml内，是不允许使用一样的`<url-pattern>`，否则编译也不会通过。\n\n但是Tomcat的web.xml和项目里的web.xml如果定义了相同的`<url-pattern>`是可以的，如果发生这种情况，那么会匹配项目里的`<url-pattern>`。\n\n如果Tomcat的web.xml和项目的web.xml里都配置`<welcome-file-list>`了的话，那只有项目里的会生效，而不是把两个`<welcome-file-list>`合并起来。\n\n# 结论\n### 先说这个项目的index.jsp是怎么实现欢迎页的\n因为Tomcat的web.xml里配置了\n```\n<welcome-file-list>\n    <welcome-file>index.html</welcome-file>\n    <welcome-file>index.htm</welcome-file>\n    <welcome-file>index.jsp</welcome-file>\n</welcome-file-list>\n```\n当访问http://127.0.0.1:8080的时候，就会默认加上后缀，也就是会请求http://127.0.0.1:8080/index.html，如果404的话，就请求http://127.0.0.1:8080/index.htm，以此类推。  \n\n如果项目的web.xml里也配置`<welcome-file-list>`标签的话，Tomcat里的会被覆盖。\n\n当请求http://127.0.0.1:8080/index.jsp的时候，因为匹配了定义在Tomcat的web.xml里的处理jsp的Servlet，所以显示成功了。\n\n### 为什么把index.jsp换成index.html就不行了呢？\n因为http://127.0.0.1:8080/index.html匹配的是DispatcherServlet，而controller里找不到对应的handler，所以报错404了。\n\n# 结语\n\n可能点比较多，描述的比较乱，其实弄清楚`<url-pattern>`的匹配优先级就基本能理解为什么index.html默认是不行的了。然后知道Tomcat的web.xml里有个处理jsp的jsp-servlet，和一个名叫default的可以处理静态资源的servlet就行了。","source":"_posts/Spring/Spring配置欢迎页引发的思考.md","raw":"---\ntitle: Spring配置欢迎页引发的思考\ndate: 2017-03-14 11:34:47\ncategories: Spring\n---\n# 引言\n今天下载了[一个demo项目](https://github.com/fankay/ssmVue)，跑起来可以默认打开index.jsp的欢迎页。但是把index.jsp换成index.html就会404。平时也没配置过欢迎页，就顺手研究了一下。于是就查漏补缺了以下知识点。\n![image](http://i1.piimg.com/567571/e07267f47dba6cc6.png)\n\n# 项目概述\n1. 项目中的web.xml\n```\n  <servlet>\n    <servlet-name>mvc</servlet-name>\n    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n    <load-on-startup>1</load-on-startup>\n  </servlet>\n  <servlet-mapping>\n    <servlet-name>mvc</servlet-name>\n    <url-pattern>/</url-pattern>\n  </servlet-mapping>\n```\n2. 项目的web.xml里没有配置`<welcome-file-list>`\n\n\n# 知识点\n### viewResolver\n\n开始我以为是这个bean的问题，因为我看到这个bean的配置里有个`.jsp`，后来才知道这个bean是在请求处理完以后，返回ModelAndView，把数据渲染到页面里用的。\n\n### 三种index.html可行的方法\n1. 使用标签`<mvc:default-servlet-handler/>`\n\n    在xxxx-servlet.xml里定义这个标签。这个标签的作用是，当返回404的时候，就使用默认的servlet去处理这个请求。所以当使用index.html的时候，先经过DispatcherServlet，发现没有对用的handler，于是返回404，然后被默认的servlet处理，成功显示index.html的内容。\n    \n    使用这个标签的时候，务必加上`<context:annotation-config />`，不然就会发现普通的请求过不了了。[原因可以参考这里](http://www.cnblogs.com/hujingwei/p/5349983.html)\n\n2. 使用标签`<mvc:resource mapping=\"xx\" location=\"\"/>`\n\n    在xxxx-servlet.xml里定义这个标签。这个标签的作用是，当访问的是静态资源的时候，并且被mapping匹配到的话，都会把位置定位到相对路径location下。\n\n3. 定义一个使用default的servlet-mapping\n    \n    ```\n    <servlet-mapping>\n\t    <servlet-name>default</servlet-name>\n\t    <url-pattern>*.html</url-pattern>\n    </servlet-mapping>\n    ```\n    在项目的web.xml里加上这段代码也可以实现。因为index.html直接就匹配了default的servlet了。\n\n### /和/*的区别\n    \n如果我把DispatcherServlet的匹配路径从`/`改成`/*`，就会发现连index.jsp也404了。这是为什么呢？\n\n`/*`会匹配所有请求，如果请求没被其他servlet匹配走，那就都会走这个servlet，这种写法不是很推荐。还有个比较神奇的问题就是，当写成`/*`的时候，就不会去默认访问`<welcome-file-list>`里的欢迎页了。只有在访问的时候手动输入欢迎页的请求地址才能打开。\n\n`/`呢，就是一个请求进来以后，所有的servlet都不匹配。就会通过`/`的servlet来实现。这种写法也不是很推荐的。\n\n这里就要说到`<url-pattern>`的匹配优先级问题了。\n\n### `<url-pattern>`的匹配优先级\n\n精确路径>最长路径>扩展名\n\n精确路径：类似`<url-pattern>/demo.html</url-pattern>`\n\n路径匹配：类似`<url-pattern>/xxx/xx/x/*</url-pattern>`\n\n扩展名匹配：类似`<url-pattern>*.jsp</url-pattern>`\n\n路径匹配和扩展名匹配是不能同时使用的。比如`<url-pattern>/*.jsp</url-pattern>`就是一种错误的用法。\n\n### 相同的`<url-pattern>`的问题\n\n在同一个web.xml内，是不允许使用一样的`<url-pattern>`，否则编译也不会通过。\n\n但是Tomcat的web.xml和项目里的web.xml如果定义了相同的`<url-pattern>`是可以的，如果发生这种情况，那么会匹配项目里的`<url-pattern>`。\n\n如果Tomcat的web.xml和项目的web.xml里都配置`<welcome-file-list>`了的话，那只有项目里的会生效，而不是把两个`<welcome-file-list>`合并起来。\n\n# 结论\n### 先说这个项目的index.jsp是怎么实现欢迎页的\n因为Tomcat的web.xml里配置了\n```\n<welcome-file-list>\n    <welcome-file>index.html</welcome-file>\n    <welcome-file>index.htm</welcome-file>\n    <welcome-file>index.jsp</welcome-file>\n</welcome-file-list>\n```\n当访问http://127.0.0.1:8080的时候，就会默认加上后缀，也就是会请求http://127.0.0.1:8080/index.html，如果404的话，就请求http://127.0.0.1:8080/index.htm，以此类推。  \n\n如果项目的web.xml里也配置`<welcome-file-list>`标签的话，Tomcat里的会被覆盖。\n\n当请求http://127.0.0.1:8080/index.jsp的时候，因为匹配了定义在Tomcat的web.xml里的处理jsp的Servlet，所以显示成功了。\n\n### 为什么把index.jsp换成index.html就不行了呢？\n因为http://127.0.0.1:8080/index.html匹配的是DispatcherServlet，而controller里找不到对应的handler，所以报错404了。\n\n# 结语\n\n可能点比较多，描述的比较乱，其实弄清楚`<url-pattern>`的匹配优先级就基本能理解为什么index.html默认是不行的了。然后知道Tomcat的web.xml里有个处理jsp的jsp-servlet，和一个名叫default的可以处理静态资源的servlet就行了。","slug":"Spring/Spring配置欢迎页引发的思考","published":1,"updated":"2017-03-15T06:52:39.542Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1qae47p000cc812seqxnz99","content":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>今天下载了<a href=\"https://github.com/fankay/ssmVue\" target=\"_blank\" rel=\"external\">一个demo项目</a>，跑起来可以默认打开index.jsp的欢迎页。但是把index.jsp换成index.html就会404。平时也没配置过欢迎页，就顺手研究了一下。于是就查漏补缺了以下知识点。<br><img src=\"http://i1.piimg.com/567571/e07267f47dba6cc6.png\" alt=\"image\"></p>\n<h1 id=\"项目概述\"><a href=\"#项目概述\" class=\"headerlink\" title=\"项目概述\"></a>项目概述</h1><ol>\n<li><p>项目中的web.xml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;servlet&gt;</div><div class=\"line\">  &lt;servlet-name&gt;mvc&lt;/servlet-name&gt;</div><div class=\"line\">  &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;</div><div class=\"line\">  &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</div><div class=\"line\">&lt;/servlet&gt;</div><div class=\"line\">&lt;servlet-mapping&gt;</div><div class=\"line\">  &lt;servlet-name&gt;mvc&lt;/servlet-name&gt;</div><div class=\"line\">  &lt;url-pattern&gt;/&lt;/url-pattern&gt;</div><div class=\"line\">&lt;/servlet-mapping&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>项目的web.xml里没有配置<code>&lt;welcome-file-list&gt;</code></p>\n</li>\n</ol>\n<h1 id=\"知识点\"><a href=\"#知识点\" class=\"headerlink\" title=\"知识点\"></a>知识点</h1><h3 id=\"viewResolver\"><a href=\"#viewResolver\" class=\"headerlink\" title=\"viewResolver\"></a>viewResolver</h3><p>开始我以为是这个bean的问题，因为我看到这个bean的配置里有个<code>.jsp</code>，后来才知道这个bean是在请求处理完以后，返回ModelAndView，把数据渲染到页面里用的。</p>\n<h3 id=\"三种index-html可行的方法\"><a href=\"#三种index-html可行的方法\" class=\"headerlink\" title=\"三种index.html可行的方法\"></a>三种index.html可行的方法</h3><ol>\n<li><p>使用标签<code>&lt;mvc:default-servlet-handler/&gt;</code></p>\n<p> 在xxxx-servlet.xml里定义这个标签。这个标签的作用是，当返回404的时候，就使用默认的servlet去处理这个请求。所以当使用index.html的时候，先经过DispatcherServlet，发现没有对用的handler，于是返回404，然后被默认的servlet处理，成功显示index.html的内容。</p>\n<p> 使用这个标签的时候，务必加上<code>&lt;context:annotation-config /&gt;</code>，不然就会发现普通的请求过不了了。<a href=\"http://www.cnblogs.com/hujingwei/p/5349983.html\" target=\"_blank\" rel=\"external\">原因可以参考这里</a></p>\n</li>\n<li><p>使用标签<code>&lt;mvc:resource mapping=&quot;xx&quot; location=&quot;&quot;/&gt;</code></p>\n<p> 在xxxx-servlet.xml里定义这个标签。这个标签的作用是，当访问的是静态资源的时候，并且被mapping匹配到的话，都会把位置定位到相对路径location下。</p>\n</li>\n<li><p>定义一个使用default的servlet-mapping</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;servlet-mapping&gt;</div><div class=\"line\"> &lt;servlet-name&gt;default&lt;/servlet-name&gt;</div><div class=\"line\"> &lt;url-pattern&gt;*.html&lt;/url-pattern&gt;</div><div class=\"line\">&lt;/servlet-mapping&gt;</div></pre></td></tr></table></figure>\n<p> 在项目的web.xml里加上这段代码也可以实现。因为index.html直接就匹配了default的servlet了。</p>\n</li>\n</ol>\n<h3 id=\"和-的区别\"><a href=\"#和-的区别\" class=\"headerlink\" title=\"/和/*的区别\"></a>/和/*的区别</h3><p>如果我把DispatcherServlet的匹配路径从<code>/</code>改成<code>/*</code>，就会发现连index.jsp也404了。这是为什么呢？</p>\n<p><code>/*</code>会匹配所有请求，如果请求没被其他servlet匹配走，那就都会走这个servlet，这种写法不是很推荐。还有个比较神奇的问题就是，当写成<code>/*</code>的时候，就不会去默认访问<code>&lt;welcome-file-list&gt;</code>里的欢迎页了。只有在访问的时候手动输入欢迎页的请求地址才能打开。</p>\n<p><code>/</code>呢，就是一个请求进来以后，所有的servlet都不匹配。就会通过<code>/</code>的servlet来实现。这种写法也不是很推荐的。</p>\n<p>这里就要说到<code>&lt;url-pattern&gt;</code>的匹配优先级问题了。</p>\n<h3 id=\"lt-url-pattern-gt-的匹配优先级\"><a href=\"#lt-url-pattern-gt-的匹配优先级\" class=\"headerlink\" title=\"&lt;url-pattern&gt;的匹配优先级\"></a><code>&lt;url-pattern&gt;</code>的匹配优先级</h3><p>精确路径&gt;最长路径&gt;扩展名</p>\n<p>精确路径：类似<code>&lt;url-pattern&gt;/demo.html&lt;/url-pattern&gt;</code></p>\n<p>路径匹配：类似<code>&lt;url-pattern&gt;/xxx/xx/x/*&lt;/url-pattern&gt;</code></p>\n<p>扩展名匹配：类似<code>&lt;url-pattern&gt;*.jsp&lt;/url-pattern&gt;</code></p>\n<p>路径匹配和扩展名匹配是不能同时使用的。比如<code>&lt;url-pattern&gt;/*.jsp&lt;/url-pattern&gt;</code>就是一种错误的用法。</p>\n<h3 id=\"相同的-lt-url-pattern-gt-的问题\"><a href=\"#相同的-lt-url-pattern-gt-的问题\" class=\"headerlink\" title=\"相同的&lt;url-pattern&gt;的问题\"></a>相同的<code>&lt;url-pattern&gt;</code>的问题</h3><p>在同一个web.xml内，是不允许使用一样的<code>&lt;url-pattern&gt;</code>，否则编译也不会通过。</p>\n<p>但是Tomcat的web.xml和项目里的web.xml如果定义了相同的<code>&lt;url-pattern&gt;</code>是可以的，如果发生这种情况，那么会匹配项目里的<code>&lt;url-pattern&gt;</code>。</p>\n<p>如果Tomcat的web.xml和项目的web.xml里都配置<code>&lt;welcome-file-list&gt;</code>了的话，那只有项目里的会生效，而不是把两个<code>&lt;welcome-file-list&gt;</code>合并起来。</p>\n<h1 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h1><h3 id=\"先说这个项目的index-jsp是怎么实现欢迎页的\"><a href=\"#先说这个项目的index-jsp是怎么实现欢迎页的\" class=\"headerlink\" title=\"先说这个项目的index.jsp是怎么实现欢迎页的\"></a>先说这个项目的index.jsp是怎么实现欢迎页的</h3><p>因为Tomcat的web.xml里配置了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;welcome-file-list&gt;</div><div class=\"line\">    &lt;welcome-file&gt;index.html&lt;/welcome-file&gt;</div><div class=\"line\">    &lt;welcome-file&gt;index.htm&lt;/welcome-file&gt;</div><div class=\"line\">    &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;</div><div class=\"line\">&lt;/welcome-file-list&gt;</div></pre></td></tr></table></figure></p>\n<p>当访问<a href=\"http://127.0.0.1:8080的时候，就会默认加上后缀，也就是会请求http://127.0.0.1:8080/index.html，如果404的话，就请求http://127.0.0.1:8080/index.htm，以此类推。\" target=\"_blank\" rel=\"external\">http://127.0.0.1:8080的时候，就会默认加上后缀，也就是会请求http://127.0.0.1:8080/index.html，如果404的话，就请求http://127.0.0.1:8080/index.htm，以此类推。</a>  </p>\n<p>如果项目的web.xml里也配置<code>&lt;welcome-file-list&gt;</code>标签的话，Tomcat里的会被覆盖。</p>\n<p>当请求<a href=\"http://127.0.0.1:8080/index.jsp的时候，因为匹配了定义在Tomcat的web.xml里的处理jsp的Servlet，所以显示成功了。\" target=\"_blank\" rel=\"external\">http://127.0.0.1:8080/index.jsp的时候，因为匹配了定义在Tomcat的web.xml里的处理jsp的Servlet，所以显示成功了。</a></p>\n<h3 id=\"为什么把index-jsp换成index-html就不行了呢？\"><a href=\"#为什么把index-jsp换成index-html就不行了呢？\" class=\"headerlink\" title=\"为什么把index.jsp换成index.html就不行了呢？\"></a>为什么把index.jsp换成index.html就不行了呢？</h3><p>因为<a href=\"http://127.0.0.1:8080/index.html匹配的是DispatcherServlet，而controller里找不到对应的handler，所以报错404了。\" target=\"_blank\" rel=\"external\">http://127.0.0.1:8080/index.html匹配的是DispatcherServlet，而controller里找不到对应的handler，所以报错404了。</a></p>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>可能点比较多，描述的比较乱，其实弄清楚<code>&lt;url-pattern&gt;</code>的匹配优先级就基本能理解为什么index.html默认是不行的了。然后知道Tomcat的web.xml里有个处理jsp的jsp-servlet，和一个名叫default的可以处理静态资源的servlet就行了。</p>\n","excerpt":"","more":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>今天下载了<a href=\"https://github.com/fankay/ssmVue\">一个demo项目</a>，跑起来可以默认打开index.jsp的欢迎页。但是把index.jsp换成index.html就会404。平时也没配置过欢迎页，就顺手研究了一下。于是就查漏补缺了以下知识点。<br><img src=\"http://i1.piimg.com/567571/e07267f47dba6cc6.png\" alt=\"image\"></p>\n<h1 id=\"项目概述\"><a href=\"#项目概述\" class=\"headerlink\" title=\"项目概述\"></a>项目概述</h1><ol>\n<li><p>项目中的web.xml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;servlet&gt;</div><div class=\"line\">  &lt;servlet-name&gt;mvc&lt;/servlet-name&gt;</div><div class=\"line\">  &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;</div><div class=\"line\">  &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</div><div class=\"line\">&lt;/servlet&gt;</div><div class=\"line\">&lt;servlet-mapping&gt;</div><div class=\"line\">  &lt;servlet-name&gt;mvc&lt;/servlet-name&gt;</div><div class=\"line\">  &lt;url-pattern&gt;/&lt;/url-pattern&gt;</div><div class=\"line\">&lt;/servlet-mapping&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>项目的web.xml里没有配置<code>&lt;welcome-file-list&gt;</code></p>\n</li>\n</ol>\n<h1 id=\"知识点\"><a href=\"#知识点\" class=\"headerlink\" title=\"知识点\"></a>知识点</h1><h3 id=\"viewResolver\"><a href=\"#viewResolver\" class=\"headerlink\" title=\"viewResolver\"></a>viewResolver</h3><p>开始我以为是这个bean的问题，因为我看到这个bean的配置里有个<code>.jsp</code>，后来才知道这个bean是在请求处理完以后，返回ModelAndView，把数据渲染到页面里用的。</p>\n<h3 id=\"三种index-html可行的方法\"><a href=\"#三种index-html可行的方法\" class=\"headerlink\" title=\"三种index.html可行的方法\"></a>三种index.html可行的方法</h3><ol>\n<li><p>使用标签<code>&lt;mvc:default-servlet-handler/&gt;</code></p>\n<p> 在xxxx-servlet.xml里定义这个标签。这个标签的作用是，当返回404的时候，就使用默认的servlet去处理这个请求。所以当使用index.html的时候，先经过DispatcherServlet，发现没有对用的handler，于是返回404，然后被默认的servlet处理，成功显示index.html的内容。</p>\n<p> 使用这个标签的时候，务必加上<code>&lt;context:annotation-config /&gt;</code>，不然就会发现普通的请求过不了了。<a href=\"http://www.cnblogs.com/hujingwei/p/5349983.html\">原因可以参考这里</a></p>\n</li>\n<li><p>使用标签<code>&lt;mvc:resource mapping=&quot;xx&quot; location=&quot;&quot;/&gt;</code></p>\n<p> 在xxxx-servlet.xml里定义这个标签。这个标签的作用是，当访问的是静态资源的时候，并且被mapping匹配到的话，都会把位置定位到相对路径location下。</p>\n</li>\n<li><p>定义一个使用default的servlet-mapping</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;servlet-mapping&gt;</div><div class=\"line\"> &lt;servlet-name&gt;default&lt;/servlet-name&gt;</div><div class=\"line\"> &lt;url-pattern&gt;*.html&lt;/url-pattern&gt;</div><div class=\"line\">&lt;/servlet-mapping&gt;</div></pre></td></tr></table></figure>\n<p> 在项目的web.xml里加上这段代码也可以实现。因为index.html直接就匹配了default的servlet了。</p>\n</li>\n</ol>\n<h3 id=\"和-的区别\"><a href=\"#和-的区别\" class=\"headerlink\" title=\"/和/*的区别\"></a>/和/*的区别</h3><p>如果我把DispatcherServlet的匹配路径从<code>/</code>改成<code>/*</code>，就会发现连index.jsp也404了。这是为什么呢？</p>\n<p><code>/*</code>会匹配所有请求，如果请求没被其他servlet匹配走，那就都会走这个servlet，这种写法不是很推荐。还有个比较神奇的问题就是，当写成<code>/*</code>的时候，就不会去默认访问<code>&lt;welcome-file-list&gt;</code>里的欢迎页了。只有在访问的时候手动输入欢迎页的请求地址才能打开。</p>\n<p><code>/</code>呢，就是一个请求进来以后，所有的servlet都不匹配。就会通过<code>/</code>的servlet来实现。这种写法也不是很推荐的。</p>\n<p>这里就要说到<code>&lt;url-pattern&gt;</code>的匹配优先级问题了。</p>\n<h3 id=\"lt-url-pattern-gt-的匹配优先级\"><a href=\"#lt-url-pattern-gt-的匹配优先级\" class=\"headerlink\" title=\"&lt;url-pattern&gt;的匹配优先级\"></a><code>&lt;url-pattern&gt;</code>的匹配优先级</h3><p>精确路径&gt;最长路径&gt;扩展名</p>\n<p>精确路径：类似<code>&lt;url-pattern&gt;/demo.html&lt;/url-pattern&gt;</code></p>\n<p>路径匹配：类似<code>&lt;url-pattern&gt;/xxx/xx/x/*&lt;/url-pattern&gt;</code></p>\n<p>扩展名匹配：类似<code>&lt;url-pattern&gt;*.jsp&lt;/url-pattern&gt;</code></p>\n<p>路径匹配和扩展名匹配是不能同时使用的。比如<code>&lt;url-pattern&gt;/*.jsp&lt;/url-pattern&gt;</code>就是一种错误的用法。</p>\n<h3 id=\"相同的-lt-url-pattern-gt-的问题\"><a href=\"#相同的-lt-url-pattern-gt-的问题\" class=\"headerlink\" title=\"相同的&lt;url-pattern&gt;的问题\"></a>相同的<code>&lt;url-pattern&gt;</code>的问题</h3><p>在同一个web.xml内，是不允许使用一样的<code>&lt;url-pattern&gt;</code>，否则编译也不会通过。</p>\n<p>但是Tomcat的web.xml和项目里的web.xml如果定义了相同的<code>&lt;url-pattern&gt;</code>是可以的，如果发生这种情况，那么会匹配项目里的<code>&lt;url-pattern&gt;</code>。</p>\n<p>如果Tomcat的web.xml和项目的web.xml里都配置<code>&lt;welcome-file-list&gt;</code>了的话，那只有项目里的会生效，而不是把两个<code>&lt;welcome-file-list&gt;</code>合并起来。</p>\n<h1 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h1><h3 id=\"先说这个项目的index-jsp是怎么实现欢迎页的\"><a href=\"#先说这个项目的index-jsp是怎么实现欢迎页的\" class=\"headerlink\" title=\"先说这个项目的index.jsp是怎么实现欢迎页的\"></a>先说这个项目的index.jsp是怎么实现欢迎页的</h3><p>因为Tomcat的web.xml里配置了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;welcome-file-list&gt;</div><div class=\"line\">    &lt;welcome-file&gt;index.html&lt;/welcome-file&gt;</div><div class=\"line\">    &lt;welcome-file&gt;index.htm&lt;/welcome-file&gt;</div><div class=\"line\">    &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;</div><div class=\"line\">&lt;/welcome-file-list&gt;</div></pre></td></tr></table></figure></p>\n<p>当访问<a href=\"http://127.0.0.1:8080的时候，就会默认加上后缀，也就是会请求http://127.0.0.1:8080/index.html，如果404的话，就请求http://127.0.0.1:8080/index.htm，以此类推。\">http://127.0.0.1:8080的时候，就会默认加上后缀，也就是会请求http://127.0.0.1:8080/index.html，如果404的话，就请求http://127.0.0.1:8080/index.htm，以此类推。</a>  </p>\n<p>如果项目的web.xml里也配置<code>&lt;welcome-file-list&gt;</code>标签的话，Tomcat里的会被覆盖。</p>\n<p>当请求<a href=\"http://127.0.0.1:8080/index.jsp的时候，因为匹配了定义在Tomcat的web.xml里的处理jsp的Servlet，所以显示成功了。\">http://127.0.0.1:8080/index.jsp的时候，因为匹配了定义在Tomcat的web.xml里的处理jsp的Servlet，所以显示成功了。</a></p>\n<h3 id=\"为什么把index-jsp换成index-html就不行了呢？\"><a href=\"#为什么把index-jsp换成index-html就不行了呢？\" class=\"headerlink\" title=\"为什么把index.jsp换成index.html就不行了呢？\"></a>为什么把index.jsp换成index.html就不行了呢？</h3><p>因为<a href=\"http://127.0.0.1:8080/index.html匹配的是DispatcherServlet，而controller里找不到对应的handler，所以报错404了。\">http://127.0.0.1:8080/index.html匹配的是DispatcherServlet，而controller里找不到对应的handler，所以报错404了。</a></p>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>可能点比较多，描述的比较乱，其实弄清楚<code>&lt;url-pattern&gt;</code>的匹配优先级就基本能理解为什么index.html默认是不行的了。然后知道Tomcat的web.xml里有个处理jsp的jsp-servlet，和一个名叫default的可以处理静态资源的servlet就行了。</p>\n"},{"title":"AngularJs验证动态生成的表单","date":"2017-02-28T10:42:47.000Z","_content":"\n有这么一个需求，我的表单是ng-repeat生成的，但是要做表单验证。  \n而AngularJs的表单验证是和name绑定的。如下。\n```html\n<p>邮箱:<br>\n    <input type=\"email\" name=\"email\" ng-model=\"user.email\" required>\n    <span style=\"color:red\" ng-show=\"myForm.email.$dirty && myForm.email.$invalid\">\n        <span ng-show=\"myForm.email.$error.required\">邮箱是必须的。</span>\n        <span ng-show=\"myForm.email.$error.email\">非法的邮箱地址。</span>\n    </span>\n</p>\n```\n\n我把name改成`{ {user.email} }`，验证的地方改成`myForm.{ {user.email} }.$error.required`。报错。\n\n## 解决方法\ngoogle了一下，用`ng-form`标签\n```html\n<form name=\"outerForm\">\n<div ng-repeat=\"item in items\">\n   <ng-form name=\"innerForm\">\n      <input type=\"text\" name=\"qwe\" ng-model=\"item.foo\" />\n      <span ng-show=\"innerForm.qwe.$error.required\">required</span>\n   </ng-form>\n</div>\n<input type=\"submit\" ng-disabled=\"outerForm.$invalid\" />\n</form>\n```\n这里的name可以随便写了，只要和验证的地方对应就好了。","source":"_posts/JavaScript/AngularJs验证动态生成的表单.md","raw":"---\ntitle: AngularJs验证动态生成的表单\ndate: 2017-02-28 18:42:47\ncategories: JavaScript\n---\n\n有这么一个需求，我的表单是ng-repeat生成的，但是要做表单验证。  \n而AngularJs的表单验证是和name绑定的。如下。\n```html\n<p>邮箱:<br>\n    <input type=\"email\" name=\"email\" ng-model=\"user.email\" required>\n    <span style=\"color:red\" ng-show=\"myForm.email.$dirty && myForm.email.$invalid\">\n        <span ng-show=\"myForm.email.$error.required\">邮箱是必须的。</span>\n        <span ng-show=\"myForm.email.$error.email\">非法的邮箱地址。</span>\n    </span>\n</p>\n```\n\n我把name改成`{ {user.email} }`，验证的地方改成`myForm.{ {user.email} }.$error.required`。报错。\n\n## 解决方法\ngoogle了一下，用`ng-form`标签\n```html\n<form name=\"outerForm\">\n<div ng-repeat=\"item in items\">\n   <ng-form name=\"innerForm\">\n      <input type=\"text\" name=\"qwe\" ng-model=\"item.foo\" />\n      <span ng-show=\"innerForm.qwe.$error.required\">required</span>\n   </ng-form>\n</div>\n<input type=\"submit\" ng-disabled=\"outerForm.$invalid\" />\n</form>\n```\n这里的name可以随便写了，只要和验证的地方对应就好了。","slug":"JavaScript/AngularJs验证动态生成的表单","published":1,"updated":"2017-03-01T01:13:19.738Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1qae47r000ec812ev43dbwp","content":"<p>有这么一个需求，我的表单是ng-repeat生成的，但是要做表单验证。<br>而AngularJs的表单验证是和name绑定的。如下。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>邮箱:<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"email\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"email\"</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"user.email\"</span> <span class=\"attr\">required</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">\"color:red\"</span> <span class=\"attr\">ng-show</span>=<span class=\"string\">\"myForm.email.$dirty &amp;&amp; myForm.email.$invalid\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">ng-show</span>=<span class=\"string\">\"myForm.email.$error.required\"</span>&gt;</span>邮箱是必须的。<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">ng-show</span>=<span class=\"string\">\"myForm.email.$error.email\"</span>&gt;</span>非法的邮箱地址。<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>我把name改成<code>{ {user.email} }</code>，验证的地方改成<code>myForm.{ {user.email} }.$error.required</code>。报错。</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>google了一下，用<code>ng-form</code>标签<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">name</span>=<span class=\"string\">\"outerForm\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-repeat</span>=<span class=\"string\">\"item in items\"</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">ng-form</span> <span class=\"attr\">name</span>=<span class=\"string\">\"innerForm\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"qwe\"</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"item.foo\"</span> /&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">ng-show</span>=<span class=\"string\">\"innerForm.qwe.$error.required\"</span>&gt;</span>required<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">ng-form</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">ng-disabled</span>=<span class=\"string\">\"outerForm.$invalid\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>这里的name可以随便写了，只要和验证的地方对应就好了。</p>\n","excerpt":"","more":"<p>有这么一个需求，我的表单是ng-repeat生成的，但是要做表单验证。<br>而AngularJs的表单验证是和name绑定的。如下。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>邮箱:<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"email\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"email\"</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"user.email\"</span> <span class=\"attr\">required</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">\"color:red\"</span> <span class=\"attr\">ng-show</span>=<span class=\"string\">\"myForm.email.$dirty &amp;&amp; myForm.email.$invalid\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">ng-show</span>=<span class=\"string\">\"myForm.email.$error.required\"</span>&gt;</span>邮箱是必须的。<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">ng-show</span>=<span class=\"string\">\"myForm.email.$error.email\"</span>&gt;</span>非法的邮箱地址。<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>我把name改成<code>{ {user.email} }</code>，验证的地方改成<code>myForm.{ {user.email} }.$error.required</code>。报错。</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>google了一下，用<code>ng-form</code>标签<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">name</span>=<span class=\"string\">\"outerForm\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-repeat</span>=<span class=\"string\">\"item in items\"</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">ng-form</span> <span class=\"attr\">name</span>=<span class=\"string\">\"innerForm\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"qwe\"</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"item.foo\"</span> /&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">ng-show</span>=<span class=\"string\">\"innerForm.qwe.$error.required\"</span>&gt;</span>required<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">ng-form</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">ng-disabled</span>=<span class=\"string\">\"outerForm.$invalid\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>这里的name可以随便写了，只要和验证的地方对应就好了。</p>\n"},{"title":"浅谈AOP","date":"2017-03-03T03:34:47.000Z","_content":"AOP（Aspect-Oriented Programming，面向切面编程）是一种编程的思想。是对OOP的补充和完善。OOP擅长纵向的编程，对横向编程无力，因为会产生大量重复代码。而AOP的横向编程能力正好弥补了这一缺陷。\n\n# java实现AOP\n\n## 1. 过滤器\n也就是Filter，技术基于java的回调机制。设计的模式使用的责任链模式。\n## 2. 拦截器\n技术基于java的反射。设计的模式使用的代理模式。\n\n可以是动态代理，也可以是静态代理。\n\n因为使用了代理模式，所以可以在拦截前做一些事，在拦截后再做一些事。\n\n## 过滤器和拦截器的区别\n1. 过滤器基于回调，拦截器基于反射。\n2. 过滤器依赖servler容器，拦截器不依赖servler容器。\n3. 过滤器几乎可以对任何请求起作用，拦截器只能对action请求起作用。\n4. 拦截器可以访问action上下文、值栈里的对象，过滤器不能。\n5. 在action生命周期中，拦截器可以多次被调用，而过滤器只能在容器初始化时被调用一次。\n\n看了这几点可能有疑惑，看下书上是怎么写的吧\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-3-3/4150228-file_1488522027418_33ad.png)\n## 执行顺序\n一个action请求进来。\n\n过滤前-->拦截前-->action处理-->拦截后-->过滤后\n\n\n# Spring实现AOP\n\n## 1. aop\n不要被Spring的aop给迷惑了，aop是种编程思想，而Spring的aop只是这种思想的具体实现。使用的也是代理模式。可以选择通过JDKProxy或cglib来代理。","source":"_posts/Spring/浅谈AOP.md","raw":"---\ntitle: 浅谈AOP\ndate: 2017-03-03 11:34:47\ncategories: Spring\n---\nAOP（Aspect-Oriented Programming，面向切面编程）是一种编程的思想。是对OOP的补充和完善。OOP擅长纵向的编程，对横向编程无力，因为会产生大量重复代码。而AOP的横向编程能力正好弥补了这一缺陷。\n\n# java实现AOP\n\n## 1. 过滤器\n也就是Filter，技术基于java的回调机制。设计的模式使用的责任链模式。\n## 2. 拦截器\n技术基于java的反射。设计的模式使用的代理模式。\n\n可以是动态代理，也可以是静态代理。\n\n因为使用了代理模式，所以可以在拦截前做一些事，在拦截后再做一些事。\n\n## 过滤器和拦截器的区别\n1. 过滤器基于回调，拦截器基于反射。\n2. 过滤器依赖servler容器，拦截器不依赖servler容器。\n3. 过滤器几乎可以对任何请求起作用，拦截器只能对action请求起作用。\n4. 拦截器可以访问action上下文、值栈里的对象，过滤器不能。\n5. 在action生命周期中，拦截器可以多次被调用，而过滤器只能在容器初始化时被调用一次。\n\n看了这几点可能有疑惑，看下书上是怎么写的吧\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-3-3/4150228-file_1488522027418_33ad.png)\n## 执行顺序\n一个action请求进来。\n\n过滤前-->拦截前-->action处理-->拦截后-->过滤后\n\n\n# Spring实现AOP\n\n## 1. aop\n不要被Spring的aop给迷惑了，aop是种编程思想，而Spring的aop只是这种思想的具体实现。使用的也是代理模式。可以选择通过JDKProxy或cglib来代理。","slug":"Spring/浅谈AOP","published":1,"updated":"2017-03-03T06:21:39.052Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1qae47u000gc8129l1paciq","content":"<p>AOP（Aspect-Oriented Programming，面向切面编程）是一种编程的思想。是对OOP的补充和完善。OOP擅长纵向的编程，对横向编程无力，因为会产生大量重复代码。而AOP的横向编程能力正好弥补了这一缺陷。</p>\n<h1 id=\"java实现AOP\"><a href=\"#java实现AOP\" class=\"headerlink\" title=\"java实现AOP\"></a>java实现AOP</h1><h2 id=\"1-过滤器\"><a href=\"#1-过滤器\" class=\"headerlink\" title=\"1. 过滤器\"></a>1. 过滤器</h2><p>也就是Filter，技术基于java的回调机制。设计的模式使用的责任链模式。</p>\n<h2 id=\"2-拦截器\"><a href=\"#2-拦截器\" class=\"headerlink\" title=\"2. 拦截器\"></a>2. 拦截器</h2><p>技术基于java的反射。设计的模式使用的代理模式。</p>\n<p>可以是动态代理，也可以是静态代理。</p>\n<p>因为使用了代理模式，所以可以在拦截前做一些事，在拦截后再做一些事。</p>\n<h2 id=\"过滤器和拦截器的区别\"><a href=\"#过滤器和拦截器的区别\" class=\"headerlink\" title=\"过滤器和拦截器的区别\"></a>过滤器和拦截器的区别</h2><ol>\n<li>过滤器基于回调，拦截器基于反射。</li>\n<li>过滤器依赖servler容器，拦截器不依赖servler容器。</li>\n<li>过滤器几乎可以对任何请求起作用，拦截器只能对action请求起作用。</li>\n<li>拦截器可以访问action上下文、值栈里的对象，过滤器不能。</li>\n<li>在action生命周期中，拦截器可以多次被调用，而过滤器只能在容器初始化时被调用一次。</li>\n</ol>\n<p>看了这几点可能有疑惑，看下书上是怎么写的吧<br><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-3-3/4150228-file_1488522027418_33ad.png\" alt=\"image\"></p>\n<h2 id=\"执行顺序\"><a href=\"#执行顺序\" class=\"headerlink\" title=\"执行顺序\"></a>执行顺序</h2><p>一个action请求进来。</p>\n<p>过滤前–&gt;拦截前–&gt;action处理–&gt;拦截后–&gt;过滤后</p>\n<h1 id=\"Spring实现AOP\"><a href=\"#Spring实现AOP\" class=\"headerlink\" title=\"Spring实现AOP\"></a>Spring实现AOP</h1><h2 id=\"1-aop\"><a href=\"#1-aop\" class=\"headerlink\" title=\"1. aop\"></a>1. aop</h2><p>不要被Spring的aop给迷惑了，aop是种编程思想，而Spring的aop只是这种思想的具体实现。使用的也是代理模式。可以选择通过JDKProxy或cglib来代理。</p>\n","excerpt":"","more":"<p>AOP（Aspect-Oriented Programming，面向切面编程）是一种编程的思想。是对OOP的补充和完善。OOP擅长纵向的编程，对横向编程无力，因为会产生大量重复代码。而AOP的横向编程能力正好弥补了这一缺陷。</p>\n<h1 id=\"java实现AOP\"><a href=\"#java实现AOP\" class=\"headerlink\" title=\"java实现AOP\"></a>java实现AOP</h1><h2 id=\"1-过滤器\"><a href=\"#1-过滤器\" class=\"headerlink\" title=\"1. 过滤器\"></a>1. 过滤器</h2><p>也就是Filter，技术基于java的回调机制。设计的模式使用的责任链模式。</p>\n<h2 id=\"2-拦截器\"><a href=\"#2-拦截器\" class=\"headerlink\" title=\"2. 拦截器\"></a>2. 拦截器</h2><p>技术基于java的反射。设计的模式使用的代理模式。</p>\n<p>可以是动态代理，也可以是静态代理。</p>\n<p>因为使用了代理模式，所以可以在拦截前做一些事，在拦截后再做一些事。</p>\n<h2 id=\"过滤器和拦截器的区别\"><a href=\"#过滤器和拦截器的区别\" class=\"headerlink\" title=\"过滤器和拦截器的区别\"></a>过滤器和拦截器的区别</h2><ol>\n<li>过滤器基于回调，拦截器基于反射。</li>\n<li>过滤器依赖servler容器，拦截器不依赖servler容器。</li>\n<li>过滤器几乎可以对任何请求起作用，拦截器只能对action请求起作用。</li>\n<li>拦截器可以访问action上下文、值栈里的对象，过滤器不能。</li>\n<li>在action生命周期中，拦截器可以多次被调用，而过滤器只能在容器初始化时被调用一次。</li>\n</ol>\n<p>看了这几点可能有疑惑，看下书上是怎么写的吧<br><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-3-3/4150228-file_1488522027418_33ad.png\" alt=\"image\"></p>\n<h2 id=\"执行顺序\"><a href=\"#执行顺序\" class=\"headerlink\" title=\"执行顺序\"></a>执行顺序</h2><p>一个action请求进来。</p>\n<p>过滤前–&gt;拦截前–&gt;action处理–&gt;拦截后–&gt;过滤后</p>\n<h1 id=\"Spring实现AOP\"><a href=\"#Spring实现AOP\" class=\"headerlink\" title=\"Spring实现AOP\"></a>Spring实现AOP</h1><h2 id=\"1-aop\"><a href=\"#1-aop\" class=\"headerlink\" title=\"1. aop\"></a>1. aop</h2><p>不要被Spring的aop给迷惑了，aop是种编程思想，而Spring的aop只是这种思想的具体实现。使用的也是代理模式。可以选择通过JDKProxy或cglib来代理。</p>\n"},{"title":"浏览器后退不刷新页面的解决办法","date":"2017-04-20T03:34:47.000Z","_content":"在开发微信的H5页面的时候，发现ISO的微信内置浏览器后退不刷新了，然而业务实现需要刷新。\n\n<!-- more -->\n\nIOS上的微信内置浏览器为了优化用户体验，采用了后退不刷新的策略，也就是A页面打开B页面，B页面后退到A页面的时候，A页面不刷新（连JS都不执行）。\n\n可以理解成A页面打开B页面的时候，A页面被隐藏了，后退的时候只是把A页面显示出来了。\n\n这种情况禁缓存是没有效果的，可以通过监听`onpageshow`来刷新页面。\n\n代码如下，在A页面的JS中添加\n```\n//解决IOS微信webview后退不执行JS的问题\nwindow.onpageshow = function(event) {\n    if (event.persisted) {\n        window.location.reload();\n    }\n};\n```\n\n`event.persisted`为了查看页面是直接从服务器上载入还是从缓存中读取的。\n\n\n[参考onpageshow用法](http://www.runoob.com/jsref/event-onpageshow.html)\n\n[stackoverflow](http://stackoverflow.com/a/31568274)","source":"_posts/JavaScript/浏览器后退不刷新页面的解决办法.md","raw":"---\ntitle: 浏览器后退不刷新页面的解决办法\ndate: 2017-04-20 11:34:47\ncategories: JavaScript\n---\n在开发微信的H5页面的时候，发现ISO的微信内置浏览器后退不刷新了，然而业务实现需要刷新。\n\n<!-- more -->\n\nIOS上的微信内置浏览器为了优化用户体验，采用了后退不刷新的策略，也就是A页面打开B页面，B页面后退到A页面的时候，A页面不刷新（连JS都不执行）。\n\n可以理解成A页面打开B页面的时候，A页面被隐藏了，后退的时候只是把A页面显示出来了。\n\n这种情况禁缓存是没有效果的，可以通过监听`onpageshow`来刷新页面。\n\n代码如下，在A页面的JS中添加\n```\n//解决IOS微信webview后退不执行JS的问题\nwindow.onpageshow = function(event) {\n    if (event.persisted) {\n        window.location.reload();\n    }\n};\n```\n\n`event.persisted`为了查看页面是直接从服务器上载入还是从缓存中读取的。\n\n\n[参考onpageshow用法](http://www.runoob.com/jsref/event-onpageshow.html)\n\n[stackoverflow](http://stackoverflow.com/a/31568274)","slug":"JavaScript/浏览器后退不刷新页面的解决办法","published":1,"updated":"2017-04-20T05:16:55.542Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1qae47x000ic812hea7verb","content":"<p>在开发微信的H5页面的时候，发现ISO的微信内置浏览器后退不刷新了，然而业务实现需要刷新。</p>\n<a id=\"more\"></a>\n<p>IOS上的微信内置浏览器为了优化用户体验，采用了后退不刷新的策略，也就是A页面打开B页面，B页面后退到A页面的时候，A页面不刷新（连JS都不执行）。</p>\n<p>可以理解成A页面打开B页面的时候，A页面被隐藏了，后退的时候只是把A页面显示出来了。</p>\n<p>这种情况禁缓存是没有效果的，可以通过监听<code>onpageshow</code>来刷新页面。</p>\n<p>代码如下，在A页面的JS中添加<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">//解决IOS微信webview后退不执行JS的问题</div><div class=\"line\">window.onpageshow = function(event) &#123;</div><div class=\"line\">    if (event.persisted) &#123;</div><div class=\"line\">        window.location.reload();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p><code>event.persisted</code>为了查看页面是直接从服务器上载入还是从缓存中读取的。</p>\n<p><a href=\"http://www.runoob.com/jsref/event-onpageshow.html\" target=\"_blank\" rel=\"external\">参考onpageshow用法</a></p>\n<p><a href=\"http://stackoverflow.com/a/31568274\" target=\"_blank\" rel=\"external\">stackoverflow</a></p>\n","excerpt":"<p>在开发微信的H5页面的时候，发现ISO的微信内置浏览器后退不刷新了，然而业务实现需要刷新。</p>","more":"<p>IOS上的微信内置浏览器为了优化用户体验，采用了后退不刷新的策略，也就是A页面打开B页面，B页面后退到A页面的时候，A页面不刷新（连JS都不执行）。</p>\n<p>可以理解成A页面打开B页面的时候，A页面被隐藏了，后退的时候只是把A页面显示出来了。</p>\n<p>这种情况禁缓存是没有效果的，可以通过监听<code>onpageshow</code>来刷新页面。</p>\n<p>代码如下，在A页面的JS中添加<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">//解决IOS微信webview后退不执行JS的问题</div><div class=\"line\">window.onpageshow = function(event) &#123;</div><div class=\"line\">    if (event.persisted) &#123;</div><div class=\"line\">        window.location.reload();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p><code>event.persisted</code>为了查看页面是直接从服务器上载入还是从缓存中读取的。</p>\n<p><a href=\"http://www.runoob.com/jsref/event-onpageshow.html\">参考onpageshow用法</a></p>\n<p><a href=\"http://stackoverflow.com/a/31568274\">stackoverflow</a></p>"},{"title":"Navicat for MySQL直接编辑Blob字段","date":"2017-03-24T04:34:47.000Z","_content":"今天项目中用到了Blob来存储数据，结果被中文乱码问题给坑了。  \n\n<!-- more -->\n\n## 开发过程\n\n简化一下开发过程，如下。\n\n**1、建表并插入数据**\n\n先建了一张表，content字段使用Blob格式的。数据库都是UTF-8格式的。  \n如下图，通过直接在Navicat for MySQL的备注里写入内容来新增一条基础数据。\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-3-24/55141125-file_1490334430090_78dc.png)\n\n**2、生成POJO**\n\nJava代码里对应库表的model如下。\n```java\npublic class News {\n\n    private Integer id;\n\n    private byte[] content;\n\n    /**\n     * 省略get/set\n     */\n}\n```\n\n**3、查询数据库并打印**\n\n通过数据库连接，查询到这条数据。数据库连接里设置了UTF-8。  \n代码直接简化成伪代码了。\n```java\npublic static void main(String[] args) {\n    News news = new News();  //从数据库读取数据\n    System.out.println(new String(news.getContent()));\n}\n```\n最后成功地在我的Win10上打印出了正确的中文。\n\n## 出现乱码\n\n然后代码提交测试，基础数据从我本机导出到.sql文件，然后插入到测试数据库内（也都是UTF-8的）。  \n发现在Linux机器下，打印出的中文是乱码。\n\n做出了以下两点修改，解决了中文乱码的问题。\n\n**1、在byte数组转String的时候指定编码**\n\n将代码改成如下。\n```java\npublic static void main(String[] args) throws Exception{\n    News news = new News();  //从数据库读取数据\n    System.out.println(new String(news.getContent(), \"UTF-8\"));\n}\n```\n然后我的Win10也乱码了。线上也是乱码。问题并没有得到解决。\n\n**2、修改基础数据的维护方式**\n\n基础数据不直接在Navicat for MySQL编辑。  \n\n而是通过Java代码将String转成UTF-8编码格式的byte数组，然后插入到数据库中。\n\n伪代码如下\n```java\npublic static void main(String[] args) throws Exception{\n    News news = new News();  //新增一条记录\n    news.setContent(new String(\"中文\", \"UTF-8\");\n    mapper.insert(news);  //插入数据库\n}\n```\n通过Java代码插入基础数据后，在Navicat for MySQL中查看。  \n\n如下图所示，Blob显示的内容为乱码\n\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-3-24/50795568-file_1490336844500_39c0.png)\n\n基础数据重新维护后，中文乱码问题解决。  \n\n本地和测试服务器的中文都显示正常了。\n\n## 总结\n### 原因分析\n在Win10上的Navicat for MySQL通过`备注`查看Blob内容的时候，都是通过GBK格式的。\n\n也就是说，如果直接在Navicat for MySQL通过`备注`直接编辑Blob的内容，并写入中文时，中文会被转码成GBK格式的二进制。\n\n而我开始读取的时候读取的是GBK格式的二进制中文，  \n然后我使用了`new String(byte[] bytes)`方法，由于忘了指定编码，所以JVM也使用了系统默认的GBK编码。  \n所以开始的时候我的本地没有中文乱码问题的。而Linux系统默认编码不是GBK的，所以转码的时候出现了乱码。\n\n然后我使用了`new String(bytes, \"UTF-8\")`指定了用UTF-8来将字节码转换。  \n由于数据库保存的Blob是GBK格式的，转成了UTF-8就出现了乱码，所以我本地也就出现了乱码问题。\n\n最后我通过代码插入UTF-8的Blob数据到数据库，解决了乱码问题。\n\n### 经验\n1. 不要直接在可视化工具里编辑含有Blob字段的库表。因为工具是无法确定编码的，工具帮你把中文转成blob的时候就有可能会有乱码问题。\n2. Blob是无法指定编码的，因为里面存的是字节码，字符转字节码的过程要自己做，才能指定字符转字节的编码。不要在工具里做，这样才不会被坑。\n3. 编码一定要统一。要了解乱码的本质。","source":"_posts/MySQL/Navicat for MySQL直接编辑Blob字段.md","raw":"---\ntitle: Navicat for MySQL直接编辑Blob字段\ndate: 2017-03-24 12:34:47\ncategories: MySQL\n---\n今天项目中用到了Blob来存储数据，结果被中文乱码问题给坑了。  \n\n<!-- more -->\n\n## 开发过程\n\n简化一下开发过程，如下。\n\n**1、建表并插入数据**\n\n先建了一张表，content字段使用Blob格式的。数据库都是UTF-8格式的。  \n如下图，通过直接在Navicat for MySQL的备注里写入内容来新增一条基础数据。\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-3-24/55141125-file_1490334430090_78dc.png)\n\n**2、生成POJO**\n\nJava代码里对应库表的model如下。\n```java\npublic class News {\n\n    private Integer id;\n\n    private byte[] content;\n\n    /**\n     * 省略get/set\n     */\n}\n```\n\n**3、查询数据库并打印**\n\n通过数据库连接，查询到这条数据。数据库连接里设置了UTF-8。  \n代码直接简化成伪代码了。\n```java\npublic static void main(String[] args) {\n    News news = new News();  //从数据库读取数据\n    System.out.println(new String(news.getContent()));\n}\n```\n最后成功地在我的Win10上打印出了正确的中文。\n\n## 出现乱码\n\n然后代码提交测试，基础数据从我本机导出到.sql文件，然后插入到测试数据库内（也都是UTF-8的）。  \n发现在Linux机器下，打印出的中文是乱码。\n\n做出了以下两点修改，解决了中文乱码的问题。\n\n**1、在byte数组转String的时候指定编码**\n\n将代码改成如下。\n```java\npublic static void main(String[] args) throws Exception{\n    News news = new News();  //从数据库读取数据\n    System.out.println(new String(news.getContent(), \"UTF-8\"));\n}\n```\n然后我的Win10也乱码了。线上也是乱码。问题并没有得到解决。\n\n**2、修改基础数据的维护方式**\n\n基础数据不直接在Navicat for MySQL编辑。  \n\n而是通过Java代码将String转成UTF-8编码格式的byte数组，然后插入到数据库中。\n\n伪代码如下\n```java\npublic static void main(String[] args) throws Exception{\n    News news = new News();  //新增一条记录\n    news.setContent(new String(\"中文\", \"UTF-8\");\n    mapper.insert(news);  //插入数据库\n}\n```\n通过Java代码插入基础数据后，在Navicat for MySQL中查看。  \n\n如下图所示，Blob显示的内容为乱码\n\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-3-24/50795568-file_1490336844500_39c0.png)\n\n基础数据重新维护后，中文乱码问题解决。  \n\n本地和测试服务器的中文都显示正常了。\n\n## 总结\n### 原因分析\n在Win10上的Navicat for MySQL通过`备注`查看Blob内容的时候，都是通过GBK格式的。\n\n也就是说，如果直接在Navicat for MySQL通过`备注`直接编辑Blob的内容，并写入中文时，中文会被转码成GBK格式的二进制。\n\n而我开始读取的时候读取的是GBK格式的二进制中文，  \n然后我使用了`new String(byte[] bytes)`方法，由于忘了指定编码，所以JVM也使用了系统默认的GBK编码。  \n所以开始的时候我的本地没有中文乱码问题的。而Linux系统默认编码不是GBK的，所以转码的时候出现了乱码。\n\n然后我使用了`new String(bytes, \"UTF-8\")`指定了用UTF-8来将字节码转换。  \n由于数据库保存的Blob是GBK格式的，转成了UTF-8就出现了乱码，所以我本地也就出现了乱码问题。\n\n最后我通过代码插入UTF-8的Blob数据到数据库，解决了乱码问题。\n\n### 经验\n1. 不要直接在可视化工具里编辑含有Blob字段的库表。因为工具是无法确定编码的，工具帮你把中文转成blob的时候就有可能会有乱码问题。\n2. Blob是无法指定编码的，因为里面存的是字节码，字符转字节码的过程要自己做，才能指定字符转字节的编码。不要在工具里做，这样才不会被坑。\n3. 编码一定要统一。要了解乱码的本质。","slug":"MySQL/Navicat for MySQL直接编辑Blob字段","published":1,"updated":"2017-03-24T07:16:41.856Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1qae47z000jc8129i1nn8yv","content":"<p>今天项目中用到了Blob来存储数据，结果被中文乱码问题给坑了。  </p>\n<a id=\"more\"></a>\n<h2 id=\"开发过程\"><a href=\"#开发过程\" class=\"headerlink\" title=\"开发过程\"></a>开发过程</h2><p>简化一下开发过程，如下。</p>\n<p><strong>1、建表并插入数据</strong></p>\n<p>先建了一张表，content字段使用Blob格式的。数据库都是UTF-8格式的。<br>如下图，通过直接在Navicat for MySQL的备注里写入内容来新增一条基础数据。<br><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-3-24/55141125-file_1490334430090_78dc.png\" alt=\"image\"></p>\n<p><strong>2、生成POJO</strong></p>\n<p>Java代码里对应库表的model如下。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">News</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Integer id;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">byte</span>[] content;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 省略get/set</div><div class=\"line\">     */</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>3、查询数据库并打印</strong></p>\n<p>通过数据库连接，查询到这条数据。数据库连接里设置了UTF-8。<br>代码直接简化成伪代码了。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">    News news = <span class=\"keyword\">new</span> News();  <span class=\"comment\">//从数据库读取数据</span></div><div class=\"line\">    System.out.println(<span class=\"keyword\">new</span> String(news.getContent()));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>最后成功地在我的Win10上打印出了正确的中文。</p>\n<h2 id=\"出现乱码\"><a href=\"#出现乱码\" class=\"headerlink\" title=\"出现乱码\"></a>出现乱码</h2><p>然后代码提交测试，基础数据从我本机导出到.sql文件，然后插入到测试数据库内（也都是UTF-8的）。<br>发现在Linux机器下，打印出的中文是乱码。</p>\n<p>做出了以下两点修改，解决了中文乱码的问题。</p>\n<p><strong>1、在byte数组转String的时候指定编码</strong></p>\n<p>将代码改成如下。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</div><div class=\"line\">    News news = <span class=\"keyword\">new</span> News();  <span class=\"comment\">//从数据库读取数据</span></div><div class=\"line\">    System.out.println(<span class=\"keyword\">new</span> String(news.getContent(), <span class=\"string\">\"UTF-8\"</span>));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>然后我的Win10也乱码了。线上也是乱码。问题并没有得到解决。</p>\n<p><strong>2、修改基础数据的维护方式</strong></p>\n<p>基础数据不直接在Navicat for MySQL编辑。  </p>\n<p>而是通过Java代码将String转成UTF-8编码格式的byte数组，然后插入到数据库中。</p>\n<p>伪代码如下<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</div><div class=\"line\">    News news = <span class=\"keyword\">new</span> News();  <span class=\"comment\">//新增一条记录</span></div><div class=\"line\">    news.setContent(<span class=\"keyword\">new</span> String(<span class=\"string\">\"中文\"</span>, <span class=\"string\">\"UTF-8\"</span>);</div><div class=\"line\">    mapper.insert(news);  <span class=\"comment\">//插入数据库</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>通过Java代码插入基础数据后，在Navicat for MySQL中查看。  </p>\n<p>如下图所示，Blob显示的内容为乱码</p>\n<p><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-3-24/50795568-file_1490336844500_39c0.png\" alt=\"image\"></p>\n<p>基础数据重新维护后，中文乱码问题解决。  </p>\n<p>本地和测试服务器的中文都显示正常了。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><h3 id=\"原因分析\"><a href=\"#原因分析\" class=\"headerlink\" title=\"原因分析\"></a>原因分析</h3><p>在Win10上的Navicat for MySQL通过<code>备注</code>查看Blob内容的时候，都是通过GBK格式的。</p>\n<p>也就是说，如果直接在Navicat for MySQL通过<code>备注</code>直接编辑Blob的内容，并写入中文时，中文会被转码成GBK格式的二进制。</p>\n<p>而我开始读取的时候读取的是GBK格式的二进制中文，<br>然后我使用了<code>new String(byte[] bytes)</code>方法，由于忘了指定编码，所以JVM也使用了系统默认的GBK编码。<br>所以开始的时候我的本地没有中文乱码问题的。而Linux系统默认编码不是GBK的，所以转码的时候出现了乱码。</p>\n<p>然后我使用了<code>new String(bytes, &quot;UTF-8&quot;)</code>指定了用UTF-8来将字节码转换。<br>由于数据库保存的Blob是GBK格式的，转成了UTF-8就出现了乱码，所以我本地也就出现了乱码问题。</p>\n<p>最后我通过代码插入UTF-8的Blob数据到数据库，解决了乱码问题。</p>\n<h3 id=\"经验\"><a href=\"#经验\" class=\"headerlink\" title=\"经验\"></a>经验</h3><ol>\n<li>不要直接在可视化工具里编辑含有Blob字段的库表。因为工具是无法确定编码的，工具帮你把中文转成blob的时候就有可能会有乱码问题。</li>\n<li>Blob是无法指定编码的，因为里面存的是字节码，字符转字节码的过程要自己做，才能指定字符转字节的编码。不要在工具里做，这样才不会被坑。</li>\n<li>编码一定要统一。要了解乱码的本质。</li>\n</ol>\n","excerpt":"<p>今天项目中用到了Blob来存储数据，结果被中文乱码问题给坑了。  </p>","more":"<h2 id=\"开发过程\"><a href=\"#开发过程\" class=\"headerlink\" title=\"开发过程\"></a>开发过程</h2><p>简化一下开发过程，如下。</p>\n<p><strong>1、建表并插入数据</strong></p>\n<p>先建了一张表，content字段使用Blob格式的。数据库都是UTF-8格式的。<br>如下图，通过直接在Navicat for MySQL的备注里写入内容来新增一条基础数据。<br><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-3-24/55141125-file_1490334430090_78dc.png\" alt=\"image\"></p>\n<p><strong>2、生成POJO</strong></p>\n<p>Java代码里对应库表的model如下。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">News</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Integer id;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">byte</span>[] content;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 省略get/set</div><div class=\"line\">     */</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>3、查询数据库并打印</strong></p>\n<p>通过数据库连接，查询到这条数据。数据库连接里设置了UTF-8。<br>代码直接简化成伪代码了。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">    News news = <span class=\"keyword\">new</span> News();  <span class=\"comment\">//从数据库读取数据</span></div><div class=\"line\">    System.out.println(<span class=\"keyword\">new</span> String(news.getContent()));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>最后成功地在我的Win10上打印出了正确的中文。</p>\n<h2 id=\"出现乱码\"><a href=\"#出现乱码\" class=\"headerlink\" title=\"出现乱码\"></a>出现乱码</h2><p>然后代码提交测试，基础数据从我本机导出到.sql文件，然后插入到测试数据库内（也都是UTF-8的）。<br>发现在Linux机器下，打印出的中文是乱码。</p>\n<p>做出了以下两点修改，解决了中文乱码的问题。</p>\n<p><strong>1、在byte数组转String的时候指定编码</strong></p>\n<p>将代码改成如下。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</div><div class=\"line\">    News news = <span class=\"keyword\">new</span> News();  <span class=\"comment\">//从数据库读取数据</span></div><div class=\"line\">    System.out.println(<span class=\"keyword\">new</span> String(news.getContent(), <span class=\"string\">\"UTF-8\"</span>));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>然后我的Win10也乱码了。线上也是乱码。问题并没有得到解决。</p>\n<p><strong>2、修改基础数据的维护方式</strong></p>\n<p>基础数据不直接在Navicat for MySQL编辑。  </p>\n<p>而是通过Java代码将String转成UTF-8编码格式的byte数组，然后插入到数据库中。</p>\n<p>伪代码如下<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</div><div class=\"line\">    News news = <span class=\"keyword\">new</span> News();  <span class=\"comment\">//新增一条记录</span></div><div class=\"line\">    news.setContent(<span class=\"keyword\">new</span> String(<span class=\"string\">\"中文\"</span>, <span class=\"string\">\"UTF-8\"</span>);</div><div class=\"line\">    mapper.insert(news);  <span class=\"comment\">//插入数据库</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>通过Java代码插入基础数据后，在Navicat for MySQL中查看。  </p>\n<p>如下图所示，Blob显示的内容为乱码</p>\n<p><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-3-24/50795568-file_1490336844500_39c0.png\" alt=\"image\"></p>\n<p>基础数据重新维护后，中文乱码问题解决。  </p>\n<p>本地和测试服务器的中文都显示正常了。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><h3 id=\"原因分析\"><a href=\"#原因分析\" class=\"headerlink\" title=\"原因分析\"></a>原因分析</h3><p>在Win10上的Navicat for MySQL通过<code>备注</code>查看Blob内容的时候，都是通过GBK格式的。</p>\n<p>也就是说，如果直接在Navicat for MySQL通过<code>备注</code>直接编辑Blob的内容，并写入中文时，中文会被转码成GBK格式的二进制。</p>\n<p>而我开始读取的时候读取的是GBK格式的二进制中文，<br>然后我使用了<code>new String(byte[] bytes)</code>方法，由于忘了指定编码，所以JVM也使用了系统默认的GBK编码。<br>所以开始的时候我的本地没有中文乱码问题的。而Linux系统默认编码不是GBK的，所以转码的时候出现了乱码。</p>\n<p>然后我使用了<code>new String(bytes, &quot;UTF-8&quot;)</code>指定了用UTF-8来将字节码转换。<br>由于数据库保存的Blob是GBK格式的，转成了UTF-8就出现了乱码，所以我本地也就出现了乱码问题。</p>\n<p>最后我通过代码插入UTF-8的Blob数据到数据库，解决了乱码问题。</p>\n<h3 id=\"经验\"><a href=\"#经验\" class=\"headerlink\" title=\"经验\"></a>经验</h3><ol>\n<li>不要直接在可视化工具里编辑含有Blob字段的库表。因为工具是无法确定编码的，工具帮你把中文转成blob的时候就有可能会有乱码问题。</li>\n<li>Blob是无法指定编码的，因为里面存的是字节码，字符转字节码的过程要自己做，才能指定字符转字节的编码。不要在工具里做，这样才不会被坑。</li>\n<li>编码一定要统一。要了解乱码的本质。</li>\n</ol>"},{"title":"MySQL的四种隔离级别","date":"2017-04-13T06:34:47.000Z","_content":"\nSQL标准定义了4类隔离级别，这是非常重要的知识点，是每个程序猿都应该熟练掌握的。\n\n<!-- more -->\n\n# 理论基础\n\n### Read Uncommitted（读取未提交内容）\n\n在该隔离级别，所有事务都可以看到其他未提交事务的执行结果。本隔离级别很少用于实际应用，因为它的性能也不比其他级别好多少。读取未提交的数据，也被称之为脏读（Dirty Read）。\n\n### Read Committed（读取提交内容）\n\n这是大多数数据库系统的默认隔离级别（但不是MySQL默认的）。它满足了隔离的简单定义：一个事务只能看见已经提交事务所做的改变。这种隔离级别 也支持所谓的不可重复读（Nonrepeatable Read），因为同一事务的其他实例在该实例处理其间可能会有新的commit，所以同一select可能返回不同结果。\n\n### Repeatable Read（可重读）\n\n这是MySQL的默认事务隔离级别，它确保同一事务的多个实例在并发读取数据时，会看到同样的数据行。不过理论上，这会导致另一个棘手的问题：幻读 （Phantom Read）。简单的说，幻读指当用户读取某一范围的数据行时，另一个事务又在该范围内插入了新行，当用户再读取该范围的数据行时，会发现有新的“幻影” 行。InnoDB和Falcon存储引擎通过多版本并发控制（MVCC，Multiversion Concurrency Control）机制解决了该问题。\n\n### Serializable（可串行化）\n\n这是最高的隔离级别，它通过强制事务排序，使之不可能相互冲突，从而解决幻读问题。简言之，它是在每个读的数据行上加上共享锁。在这个级别，可能导致大量的超时现象和锁竞争。\n\n\n## 不同隔离级别产生的各种问题\n隔离级别 | 脏读 | 不可重复读 | 幻读\n---|--- | --- | ---\nread uncommitted | √ | √ | √\nread committed | × | √ | √\nrepeatable read | × | × | √或×\nserializable |  × | × | × \n为什么第三行的幻读是不确定的呢？因为这取决你数据库内选择的是何种存储引擎，比如InnoDB就通过多版本并发控制（MVCC，Multiversion Concurrency Control）机制解决了幻读了问题。\n\n\n\n## 脏读\n事务T1可以看到事务T2未提交的内容。\n\n**举例：**  \n病人A的性别是男性，事务T1开启事务想查看病人A的性别，这个时候事务T2，先行一步，手滑把病人A的性别改成了女性，没有提交数据库，此时事务T1读到的病人A的性别是女性。事务T2发现改错了，回滚了事务，但是事务T1已经读到了“脏”数据。\n\n## 不可重复读\n由于事务T2对数据的修改，导致事务T1连续查询两次数据，发现两次查询出的数据不一致。\n\n**举例：**  \n病人A的性别是男性，事务T1开启事务第一次查看病人A的性别是男性，这时事务T2把病人A的性别改为女性，并提交。事务T1第二次查看病人A的性别，发现变成了女性。\n\n## 幻读\n事务T1按一定条件读取数据，这个时候事务T2如果在该条件内删除或新增数据，会导致事务T1再次读取数据的时候，会发现数据变多/少了。\n\n**举例：**\n1. 如果事务T1在第一次读取的时候对数据进行了更新，那么事务T2新增的幻读的数据就被漏改了。就像幻觉一样。\n2. 如果事务T1在第一次读取的时候发现数据有5条，这时事务T2新增或删除了一条数据，事务T1再次查询的时候，发现记录不是5条了。就像幻觉一样。\n\n\n# 动手操作环节\n\n上面的概念不需要死记硬背，跟着下面的步骤试验一遍就能心里有数了。\n\n以MySQL数据库为例。\n\n## 准备库表与基础数据\n\n在`test`库下新增表`test`，表结构如下\n```\nCREATE TABLE `test` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `num` int(11) DEFAULT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n```\n插入三条基础数据\n```\nINSERT INTO test (num) VALUES(1);\nINSERT INTO test (num) VALUES(2);\nINSERT INTO test (num) VALUES(3);\n```\n\n进入MySQL命令行，不知道如何进入的[点击这里](../WINDOWS如何进入MySQL命令行)\n\n通过`use test;`进入具体的库\n\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-4-12/91904121-file_1491981549970_ef19.png)\n\n通过`show tables;`查看所有表\n\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-4-12/83849583-file_1491981624968_14ec8.png)\n\n下面开两个窗口，A窗口代表事务T1，B窗口代表事务T2，通过修改A窗口的事务隔离级别来试验。\n## 1. 将A的隔离级别设置为read uncommitted(读未提交)\n\n**A：设置隔离级别**\n\n`set session transaction isolation level read uncommitted;`\n\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-4-12/131570-file_1491981956792_3200.png)\n\n**A：查看隔离级别**\n\n`select @@tx_isolation;`\n\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-4-12/88154747-file_1491982098863_13c02.png)\n\n**B：查看隔离级别**\n\nA的隔离级别设置只对当前连接有效，查看B的隔离级别，可以发现，还是MySQL默认的隔离级别`REPEATABLE-READ`。\n\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-4-12/96102531-file_1491982208328_151be.png)\n\n这里B窗口就使用默认的隔离级别就可以了，不需要修改。\n\n**A：进入事务，并查询**\n\n`start transaction;`\n\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-4-12/28486851-file_1491982546947_1225b.png)\n\n**B：进入事务，并更新一条记录**\n\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-4-12/58489290-file_1491982763692_11f8a.png)  \n注意，此时B窗口还没有提交事务。\n\n**A：再次查询**\n\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-4-12/69209462-file_1491982875153_e7dd.png)  \n可以看到，A读到了B没有提交的事务。\n\n**B：回滚事务**\n\n通过`rollback;`来回滚事务。  \n\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-4-12/4245094-file_1491983073673_14dd2.png)\n\n**A：再次查询**\n\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-4-12/35919306-file_1491983128743_9686.png)\n\n\n如果B新增/删除记录，不提交的话。A也是能看到的。这里就不演示了。\n\n## 2. 将客户端A的事务隔离级别设置为read committed(读已提交)\n\n**A：设置隔离级别**\n\n`set session transaction isolation level read committed;`\n\n**A：开启事务，并查询**\n\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-4-12/28486851-file_1491982546947_1225b.png)\n\n**B：开启事务，并修改**\n\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-4-12/58489290-file_1491982763692_11f8a.png)\n\n**A：查询**\n\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-4-12/35919306-file_1491983128743_9686.png)  \n我们发现A没有读取到B没有提交的事务。\n\n**B：提交事务**\n\n`commit;`\n\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-4-12/31618607-file_1491986479178_aad2.png)\n\n**A：查询**\n\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-4-12/69209462-file_1491982875153_e7dd.png)\n\n可以看到脏读问题解决了，但是出现了不可重复读的问题。也就是A窗口第一次查询和第二次查询的结果不一样。\n\n## 3. 将A的隔离级别设置为repeatable read(可重复读)\n\n**A：设置隔离级别**\n\n`set session transaction isolation level repeatable read;`\n\n**A：开启事务并查询**\n\n![](http://ok7wlv1ee.bkt.clouddn.com/17-4-12/76572583-file_1491987406629_6333.png)\n\n**B：开启事务，更新记录但不提交**\n\n![](http://ok7wlv1ee.bkt.clouddn.com/17-4-13/21971864-file_1492045056348_6aba.png)\n\n**A：查询**\n\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-4-12/35919306-file_1491983128743_9686.png)\n\n**B：提交**\n\n![](http://ok7wlv1ee.bkt.clouddn.com/17-4-13/31142551-file_1492045141256_35c5.png)\n\n**A：查询**\n\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-4-12/35919306-file_1491983128743_9686.png)  \n即使B修改了记录并提交，但是A两次的查询结果都是一样的，说明可以重复查询了。\n\n**B：新增记录**\n\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-4-13/66448146-file_1492045547790_728.png)\n\n**A：查询**\n\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-4-12/35919306-file_1491983128743_9686.png)\n\n并没有新增的数据，幻读问题也没有出现，因为我的MySQL用的是InnoDB作为存储引擎。\n\n## 4. 将A的隔离级别设置为Serializable(可串行化)\n\n**A：设置隔离级别，开启事务并查询**\n\n`set session transaction isolation level serializable;`\n\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-4-13/98104812-file_1492045804404_17c5.png)\n\n**B：开启事务，新增记录**\n\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-4-13/66351991-file_1492045858068_a810.png)  \n发现卡住了，因为必须等A的事务执行完毕才行。\n\n**A：提交事务**\n\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-4-13/79104071-file_1492045922444_1a76.png)\n\n**B：插入记录成功。**\n\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-4-13/34114634-file_1492045961893_10a51.png)\n\n\n\n\n\n","source":"_posts/MySQL/MySQL的四种隔离级别.md","raw":"---\ntitle: MySQL的四种隔离级别\ndate: 2017-04-13 14:34:47\ncategories: MySQL\n---\n\nSQL标准定义了4类隔离级别，这是非常重要的知识点，是每个程序猿都应该熟练掌握的。\n\n<!-- more -->\n\n# 理论基础\n\n### Read Uncommitted（读取未提交内容）\n\n在该隔离级别，所有事务都可以看到其他未提交事务的执行结果。本隔离级别很少用于实际应用，因为它的性能也不比其他级别好多少。读取未提交的数据，也被称之为脏读（Dirty Read）。\n\n### Read Committed（读取提交内容）\n\n这是大多数数据库系统的默认隔离级别（但不是MySQL默认的）。它满足了隔离的简单定义：一个事务只能看见已经提交事务所做的改变。这种隔离级别 也支持所谓的不可重复读（Nonrepeatable Read），因为同一事务的其他实例在该实例处理其间可能会有新的commit，所以同一select可能返回不同结果。\n\n### Repeatable Read（可重读）\n\n这是MySQL的默认事务隔离级别，它确保同一事务的多个实例在并发读取数据时，会看到同样的数据行。不过理论上，这会导致另一个棘手的问题：幻读 （Phantom Read）。简单的说，幻读指当用户读取某一范围的数据行时，另一个事务又在该范围内插入了新行，当用户再读取该范围的数据行时，会发现有新的“幻影” 行。InnoDB和Falcon存储引擎通过多版本并发控制（MVCC，Multiversion Concurrency Control）机制解决了该问题。\n\n### Serializable（可串行化）\n\n这是最高的隔离级别，它通过强制事务排序，使之不可能相互冲突，从而解决幻读问题。简言之，它是在每个读的数据行上加上共享锁。在这个级别，可能导致大量的超时现象和锁竞争。\n\n\n## 不同隔离级别产生的各种问题\n隔离级别 | 脏读 | 不可重复读 | 幻读\n---|--- | --- | ---\nread uncommitted | √ | √ | √\nread committed | × | √ | √\nrepeatable read | × | × | √或×\nserializable |  × | × | × \n为什么第三行的幻读是不确定的呢？因为这取决你数据库内选择的是何种存储引擎，比如InnoDB就通过多版本并发控制（MVCC，Multiversion Concurrency Control）机制解决了幻读了问题。\n\n\n\n## 脏读\n事务T1可以看到事务T2未提交的内容。\n\n**举例：**  \n病人A的性别是男性，事务T1开启事务想查看病人A的性别，这个时候事务T2，先行一步，手滑把病人A的性别改成了女性，没有提交数据库，此时事务T1读到的病人A的性别是女性。事务T2发现改错了，回滚了事务，但是事务T1已经读到了“脏”数据。\n\n## 不可重复读\n由于事务T2对数据的修改，导致事务T1连续查询两次数据，发现两次查询出的数据不一致。\n\n**举例：**  \n病人A的性别是男性，事务T1开启事务第一次查看病人A的性别是男性，这时事务T2把病人A的性别改为女性，并提交。事务T1第二次查看病人A的性别，发现变成了女性。\n\n## 幻读\n事务T1按一定条件读取数据，这个时候事务T2如果在该条件内删除或新增数据，会导致事务T1再次读取数据的时候，会发现数据变多/少了。\n\n**举例：**\n1. 如果事务T1在第一次读取的时候对数据进行了更新，那么事务T2新增的幻读的数据就被漏改了。就像幻觉一样。\n2. 如果事务T1在第一次读取的时候发现数据有5条，这时事务T2新增或删除了一条数据，事务T1再次查询的时候，发现记录不是5条了。就像幻觉一样。\n\n\n# 动手操作环节\n\n上面的概念不需要死记硬背，跟着下面的步骤试验一遍就能心里有数了。\n\n以MySQL数据库为例。\n\n## 准备库表与基础数据\n\n在`test`库下新增表`test`，表结构如下\n```\nCREATE TABLE `test` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `num` int(11) DEFAULT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n```\n插入三条基础数据\n```\nINSERT INTO test (num) VALUES(1);\nINSERT INTO test (num) VALUES(2);\nINSERT INTO test (num) VALUES(3);\n```\n\n进入MySQL命令行，不知道如何进入的[点击这里](../WINDOWS如何进入MySQL命令行)\n\n通过`use test;`进入具体的库\n\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-4-12/91904121-file_1491981549970_ef19.png)\n\n通过`show tables;`查看所有表\n\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-4-12/83849583-file_1491981624968_14ec8.png)\n\n下面开两个窗口，A窗口代表事务T1，B窗口代表事务T2，通过修改A窗口的事务隔离级别来试验。\n## 1. 将A的隔离级别设置为read uncommitted(读未提交)\n\n**A：设置隔离级别**\n\n`set session transaction isolation level read uncommitted;`\n\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-4-12/131570-file_1491981956792_3200.png)\n\n**A：查看隔离级别**\n\n`select @@tx_isolation;`\n\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-4-12/88154747-file_1491982098863_13c02.png)\n\n**B：查看隔离级别**\n\nA的隔离级别设置只对当前连接有效，查看B的隔离级别，可以发现，还是MySQL默认的隔离级别`REPEATABLE-READ`。\n\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-4-12/96102531-file_1491982208328_151be.png)\n\n这里B窗口就使用默认的隔离级别就可以了，不需要修改。\n\n**A：进入事务，并查询**\n\n`start transaction;`\n\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-4-12/28486851-file_1491982546947_1225b.png)\n\n**B：进入事务，并更新一条记录**\n\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-4-12/58489290-file_1491982763692_11f8a.png)  \n注意，此时B窗口还没有提交事务。\n\n**A：再次查询**\n\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-4-12/69209462-file_1491982875153_e7dd.png)  \n可以看到，A读到了B没有提交的事务。\n\n**B：回滚事务**\n\n通过`rollback;`来回滚事务。  \n\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-4-12/4245094-file_1491983073673_14dd2.png)\n\n**A：再次查询**\n\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-4-12/35919306-file_1491983128743_9686.png)\n\n\n如果B新增/删除记录，不提交的话。A也是能看到的。这里就不演示了。\n\n## 2. 将客户端A的事务隔离级别设置为read committed(读已提交)\n\n**A：设置隔离级别**\n\n`set session transaction isolation level read committed;`\n\n**A：开启事务，并查询**\n\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-4-12/28486851-file_1491982546947_1225b.png)\n\n**B：开启事务，并修改**\n\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-4-12/58489290-file_1491982763692_11f8a.png)\n\n**A：查询**\n\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-4-12/35919306-file_1491983128743_9686.png)  \n我们发现A没有读取到B没有提交的事务。\n\n**B：提交事务**\n\n`commit;`\n\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-4-12/31618607-file_1491986479178_aad2.png)\n\n**A：查询**\n\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-4-12/69209462-file_1491982875153_e7dd.png)\n\n可以看到脏读问题解决了，但是出现了不可重复读的问题。也就是A窗口第一次查询和第二次查询的结果不一样。\n\n## 3. 将A的隔离级别设置为repeatable read(可重复读)\n\n**A：设置隔离级别**\n\n`set session transaction isolation level repeatable read;`\n\n**A：开启事务并查询**\n\n![](http://ok7wlv1ee.bkt.clouddn.com/17-4-12/76572583-file_1491987406629_6333.png)\n\n**B：开启事务，更新记录但不提交**\n\n![](http://ok7wlv1ee.bkt.clouddn.com/17-4-13/21971864-file_1492045056348_6aba.png)\n\n**A：查询**\n\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-4-12/35919306-file_1491983128743_9686.png)\n\n**B：提交**\n\n![](http://ok7wlv1ee.bkt.clouddn.com/17-4-13/31142551-file_1492045141256_35c5.png)\n\n**A：查询**\n\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-4-12/35919306-file_1491983128743_9686.png)  \n即使B修改了记录并提交，但是A两次的查询结果都是一样的，说明可以重复查询了。\n\n**B：新增记录**\n\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-4-13/66448146-file_1492045547790_728.png)\n\n**A：查询**\n\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-4-12/35919306-file_1491983128743_9686.png)\n\n并没有新增的数据，幻读问题也没有出现，因为我的MySQL用的是InnoDB作为存储引擎。\n\n## 4. 将A的隔离级别设置为Serializable(可串行化)\n\n**A：设置隔离级别，开启事务并查询**\n\n`set session transaction isolation level serializable;`\n\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-4-13/98104812-file_1492045804404_17c5.png)\n\n**B：开启事务，新增记录**\n\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-4-13/66351991-file_1492045858068_a810.png)  \n发现卡住了，因为必须等A的事务执行完毕才行。\n\n**A：提交事务**\n\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-4-13/79104071-file_1492045922444_1a76.png)\n\n**B：插入记录成功。**\n\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-4-13/34114634-file_1492045961893_10a51.png)\n\n\n\n\n\n","slug":"MySQL/MySQL的四种隔离级别","published":1,"updated":"2017-04-13T02:59:49.723Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1qae483000mc812oxuduzkk","content":"<p>SQL标准定义了4类隔离级别，这是非常重要的知识点，是每个程序猿都应该熟练掌握的。</p>\n<a id=\"more\"></a>\n<h1 id=\"理论基础\"><a href=\"#理论基础\" class=\"headerlink\" title=\"理论基础\"></a>理论基础</h1><h3 id=\"Read-Uncommitted（读取未提交内容）\"><a href=\"#Read-Uncommitted（读取未提交内容）\" class=\"headerlink\" title=\"Read Uncommitted（读取未提交内容）\"></a>Read Uncommitted（读取未提交内容）</h3><p>在该隔离级别，所有事务都可以看到其他未提交事务的执行结果。本隔离级别很少用于实际应用，因为它的性能也不比其他级别好多少。读取未提交的数据，也被称之为脏读（Dirty Read）。</p>\n<h3 id=\"Read-Committed（读取提交内容）\"><a href=\"#Read-Committed（读取提交内容）\" class=\"headerlink\" title=\"Read Committed（读取提交内容）\"></a>Read Committed（读取提交内容）</h3><p>这是大多数数据库系统的默认隔离级别（但不是MySQL默认的）。它满足了隔离的简单定义：一个事务只能看见已经提交事务所做的改变。这种隔离级别 也支持所谓的不可重复读（Nonrepeatable Read），因为同一事务的其他实例在该实例处理其间可能会有新的commit，所以同一select可能返回不同结果。</p>\n<h3 id=\"Repeatable-Read（可重读）\"><a href=\"#Repeatable-Read（可重读）\" class=\"headerlink\" title=\"Repeatable Read（可重读）\"></a>Repeatable Read（可重读）</h3><p>这是MySQL的默认事务隔离级别，它确保同一事务的多个实例在并发读取数据时，会看到同样的数据行。不过理论上，这会导致另一个棘手的问题：幻读 （Phantom Read）。简单的说，幻读指当用户读取某一范围的数据行时，另一个事务又在该范围内插入了新行，当用户再读取该范围的数据行时，会发现有新的“幻影” 行。InnoDB和Falcon存储引擎通过多版本并发控制（MVCC，Multiversion Concurrency Control）机制解决了该问题。</p>\n<h3 id=\"Serializable（可串行化）\"><a href=\"#Serializable（可串行化）\" class=\"headerlink\" title=\"Serializable（可串行化）\"></a>Serializable（可串行化）</h3><p>这是最高的隔离级别，它通过强制事务排序，使之不可能相互冲突，从而解决幻读问题。简言之，它是在每个读的数据行上加上共享锁。在这个级别，可能导致大量的超时现象和锁竞争。</p>\n<h2 id=\"不同隔离级别产生的各种问题\"><a href=\"#不同隔离级别产生的各种问题\" class=\"headerlink\" title=\"不同隔离级别产生的各种问题\"></a>不同隔离级别产生的各种问题</h2><table>\n<thead>\n<tr>\n<th>隔离级别</th>\n<th>脏读</th>\n<th>不可重复读</th>\n<th>幻读</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>read uncommitted</td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n</tr>\n<tr>\n<td>read committed</td>\n<td>×</td>\n<td>√</td>\n<td>√</td>\n</tr>\n<tr>\n<td>repeatable read</td>\n<td>×</td>\n<td>×</td>\n<td>√或×</td>\n</tr>\n<tr>\n<td>serializable</td>\n<td>×</td>\n<td>×</td>\n<td>× </td>\n</tr>\n</tbody>\n</table>\n<p>为什么第三行的幻读是不确定的呢？因为这取决你数据库内选择的是何种存储引擎，比如InnoDB就通过多版本并发控制（MVCC，Multiversion Concurrency Control）机制解决了幻读了问题。</p>\n<h2 id=\"脏读\"><a href=\"#脏读\" class=\"headerlink\" title=\"脏读\"></a>脏读</h2><p>事务T1可以看到事务T2未提交的内容。</p>\n<p><strong>举例：</strong><br>病人A的性别是男性，事务T1开启事务想查看病人A的性别，这个时候事务T2，先行一步，手滑把病人A的性别改成了女性，没有提交数据库，此时事务T1读到的病人A的性别是女性。事务T2发现改错了，回滚了事务，但是事务T1已经读到了“脏”数据。</p>\n<h2 id=\"不可重复读\"><a href=\"#不可重复读\" class=\"headerlink\" title=\"不可重复读\"></a>不可重复读</h2><p>由于事务T2对数据的修改，导致事务T1连续查询两次数据，发现两次查询出的数据不一致。</p>\n<p><strong>举例：</strong><br>病人A的性别是男性，事务T1开启事务第一次查看病人A的性别是男性，这时事务T2把病人A的性别改为女性，并提交。事务T1第二次查看病人A的性别，发现变成了女性。</p>\n<h2 id=\"幻读\"><a href=\"#幻读\" class=\"headerlink\" title=\"幻读\"></a>幻读</h2><p>事务T1按一定条件读取数据，这个时候事务T2如果在该条件内删除或新增数据，会导致事务T1再次读取数据的时候，会发现数据变多/少了。</p>\n<p><strong>举例：</strong></p>\n<ol>\n<li>如果事务T1在第一次读取的时候对数据进行了更新，那么事务T2新增的幻读的数据就被漏改了。就像幻觉一样。</li>\n<li>如果事务T1在第一次读取的时候发现数据有5条，这时事务T2新增或删除了一条数据，事务T1再次查询的时候，发现记录不是5条了。就像幻觉一样。</li>\n</ol>\n<h1 id=\"动手操作环节\"><a href=\"#动手操作环节\" class=\"headerlink\" title=\"动手操作环节\"></a>动手操作环节</h1><p>上面的概念不需要死记硬背，跟着下面的步骤试验一遍就能心里有数了。</p>\n<p>以MySQL数据库为例。</p>\n<h2 id=\"准备库表与基础数据\"><a href=\"#准备库表与基础数据\" class=\"headerlink\" title=\"准备库表与基础数据\"></a>准备库表与基础数据</h2><p>在<code>test</code>库下新增表<code>test</code>，表结构如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">CREATE TABLE `test` (</div><div class=\"line\">  `id` int(11) NOT NULL AUTO_INCREMENT,</div><div class=\"line\">  `num` int(11) DEFAULT NULL,</div><div class=\"line\">  PRIMARY KEY (`id`)</div><div class=\"line\">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</div></pre></td></tr></table></figure></p>\n<p>插入三条基础数据<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">INSERT INTO test (num) VALUES(1);</div><div class=\"line\">INSERT INTO test (num) VALUES(2);</div><div class=\"line\">INSERT INTO test (num) VALUES(3);</div></pre></td></tr></table></figure></p>\n<p>进入MySQL命令行，不知道如何进入的<a href=\"../WINDOWS如何进入MySQL命令行\">点击这里</a></p>\n<p>通过<code>use test;</code>进入具体的库</p>\n<p><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-4-12/91904121-file_1491981549970_ef19.png\" alt=\"image\"></p>\n<p>通过<code>show tables;</code>查看所有表</p>\n<p><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-4-12/83849583-file_1491981624968_14ec8.png\" alt=\"image\"></p>\n<p>下面开两个窗口，A窗口代表事务T1，B窗口代表事务T2，通过修改A窗口的事务隔离级别来试验。</p>\n<h2 id=\"1-将A的隔离级别设置为read-uncommitted-读未提交\"><a href=\"#1-将A的隔离级别设置为read-uncommitted-读未提交\" class=\"headerlink\" title=\"1. 将A的隔离级别设置为read uncommitted(读未提交)\"></a>1. 将A的隔离级别设置为read uncommitted(读未提交)</h2><p><strong>A：设置隔离级别</strong></p>\n<p><code>set session transaction isolation level read uncommitted;</code></p>\n<p><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-4-12/131570-file_1491981956792_3200.png\" alt=\"image\"></p>\n<p><strong>A：查看隔离级别</strong></p>\n<p><code>select @@tx_isolation;</code></p>\n<p><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-4-12/88154747-file_1491982098863_13c02.png\" alt=\"image\"></p>\n<p><strong>B：查看隔离级别</strong></p>\n<p>A的隔离级别设置只对当前连接有效，查看B的隔离级别，可以发现，还是MySQL默认的隔离级别<code>REPEATABLE-READ</code>。</p>\n<p><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-4-12/96102531-file_1491982208328_151be.png\" alt=\"image\"></p>\n<p>这里B窗口就使用默认的隔离级别就可以了，不需要修改。</p>\n<p><strong>A：进入事务，并查询</strong></p>\n<p><code>start transaction;</code></p>\n<p><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-4-12/28486851-file_1491982546947_1225b.png\" alt=\"image\"></p>\n<p><strong>B：进入事务，并更新一条记录</strong></p>\n<p><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-4-12/58489290-file_1491982763692_11f8a.png\" alt=\"image\"><br>注意，此时B窗口还没有提交事务。</p>\n<p><strong>A：再次查询</strong></p>\n<p><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-4-12/69209462-file_1491982875153_e7dd.png\" alt=\"image\"><br>可以看到，A读到了B没有提交的事务。</p>\n<p><strong>B：回滚事务</strong></p>\n<p>通过<code>rollback;</code>来回滚事务。  </p>\n<p><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-4-12/4245094-file_1491983073673_14dd2.png\" alt=\"image\"></p>\n<p><strong>A：再次查询</strong></p>\n<p><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-4-12/35919306-file_1491983128743_9686.png\" alt=\"image\"></p>\n<p>如果B新增/删除记录，不提交的话。A也是能看到的。这里就不演示了。</p>\n<h2 id=\"2-将客户端A的事务隔离级别设置为read-committed-读已提交\"><a href=\"#2-将客户端A的事务隔离级别设置为read-committed-读已提交\" class=\"headerlink\" title=\"2. 将客户端A的事务隔离级别设置为read committed(读已提交)\"></a>2. 将客户端A的事务隔离级别设置为read committed(读已提交)</h2><p><strong>A：设置隔离级别</strong></p>\n<p><code>set session transaction isolation level read committed;</code></p>\n<p><strong>A：开启事务，并查询</strong></p>\n<p><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-4-12/28486851-file_1491982546947_1225b.png\" alt=\"image\"></p>\n<p><strong>B：开启事务，并修改</strong></p>\n<p><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-4-12/58489290-file_1491982763692_11f8a.png\" alt=\"image\"></p>\n<p><strong>A：查询</strong></p>\n<p><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-4-12/35919306-file_1491983128743_9686.png\" alt=\"image\"><br>我们发现A没有读取到B没有提交的事务。</p>\n<p><strong>B：提交事务</strong></p>\n<p><code>commit;</code></p>\n<p><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-4-12/31618607-file_1491986479178_aad2.png\" alt=\"image\"></p>\n<p><strong>A：查询</strong></p>\n<p><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-4-12/69209462-file_1491982875153_e7dd.png\" alt=\"image\"></p>\n<p>可以看到脏读问题解决了，但是出现了不可重复读的问题。也就是A窗口第一次查询和第二次查询的结果不一样。</p>\n<h2 id=\"3-将A的隔离级别设置为repeatable-read-可重复读\"><a href=\"#3-将A的隔离级别设置为repeatable-read-可重复读\" class=\"headerlink\" title=\"3. 将A的隔离级别设置为repeatable read(可重复读)\"></a>3. 将A的隔离级别设置为repeatable read(可重复读)</h2><p><strong>A：设置隔离级别</strong></p>\n<p><code>set session transaction isolation level repeatable read;</code></p>\n<p><strong>A：开启事务并查询</strong></p>\n<p><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-4-12/76572583-file_1491987406629_6333.png\" alt=\"\"></p>\n<p><strong>B：开启事务，更新记录但不提交</strong></p>\n<p><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-4-13/21971864-file_1492045056348_6aba.png\" alt=\"\"></p>\n<p><strong>A：查询</strong></p>\n<p><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-4-12/35919306-file_1491983128743_9686.png\" alt=\"image\"></p>\n<p><strong>B：提交</strong></p>\n<p><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-4-13/31142551-file_1492045141256_35c5.png\" alt=\"\"></p>\n<p><strong>A：查询</strong></p>\n<p><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-4-12/35919306-file_1491983128743_9686.png\" alt=\"image\"><br>即使B修改了记录并提交，但是A两次的查询结果都是一样的，说明可以重复查询了。</p>\n<p><strong>B：新增记录</strong></p>\n<p><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-4-13/66448146-file_1492045547790_728.png\" alt=\"image\"></p>\n<p><strong>A：查询</strong></p>\n<p><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-4-12/35919306-file_1491983128743_9686.png\" alt=\"image\"></p>\n<p>并没有新增的数据，幻读问题也没有出现，因为我的MySQL用的是InnoDB作为存储引擎。</p>\n<h2 id=\"4-将A的隔离级别设置为Serializable-可串行化\"><a href=\"#4-将A的隔离级别设置为Serializable-可串行化\" class=\"headerlink\" title=\"4. 将A的隔离级别设置为Serializable(可串行化)\"></a>4. 将A的隔离级别设置为Serializable(可串行化)</h2><p><strong>A：设置隔离级别，开启事务并查询</strong></p>\n<p><code>set session transaction isolation level serializable;</code></p>\n<p><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-4-13/98104812-file_1492045804404_17c5.png\" alt=\"image\"></p>\n<p><strong>B：开启事务，新增记录</strong></p>\n<p><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-4-13/66351991-file_1492045858068_a810.png\" alt=\"image\"><br>发现卡住了，因为必须等A的事务执行完毕才行。</p>\n<p><strong>A：提交事务</strong></p>\n<p><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-4-13/79104071-file_1492045922444_1a76.png\" alt=\"image\"></p>\n<p><strong>B：插入记录成功。</strong></p>\n<p><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-4-13/34114634-file_1492045961893_10a51.png\" alt=\"image\"></p>\n","excerpt":"<p>SQL标准定义了4类隔离级别，这是非常重要的知识点，是每个程序猿都应该熟练掌握的。</p>","more":"<h1 id=\"理论基础\"><a href=\"#理论基础\" class=\"headerlink\" title=\"理论基础\"></a>理论基础</h1><h3 id=\"Read-Uncommitted（读取未提交内容）\"><a href=\"#Read-Uncommitted（读取未提交内容）\" class=\"headerlink\" title=\"Read Uncommitted（读取未提交内容）\"></a>Read Uncommitted（读取未提交内容）</h3><p>在该隔离级别，所有事务都可以看到其他未提交事务的执行结果。本隔离级别很少用于实际应用，因为它的性能也不比其他级别好多少。读取未提交的数据，也被称之为脏读（Dirty Read）。</p>\n<h3 id=\"Read-Committed（读取提交内容）\"><a href=\"#Read-Committed（读取提交内容）\" class=\"headerlink\" title=\"Read Committed（读取提交内容）\"></a>Read Committed（读取提交内容）</h3><p>这是大多数数据库系统的默认隔离级别（但不是MySQL默认的）。它满足了隔离的简单定义：一个事务只能看见已经提交事务所做的改变。这种隔离级别 也支持所谓的不可重复读（Nonrepeatable Read），因为同一事务的其他实例在该实例处理其间可能会有新的commit，所以同一select可能返回不同结果。</p>\n<h3 id=\"Repeatable-Read（可重读）\"><a href=\"#Repeatable-Read（可重读）\" class=\"headerlink\" title=\"Repeatable Read（可重读）\"></a>Repeatable Read（可重读）</h3><p>这是MySQL的默认事务隔离级别，它确保同一事务的多个实例在并发读取数据时，会看到同样的数据行。不过理论上，这会导致另一个棘手的问题：幻读 （Phantom Read）。简单的说，幻读指当用户读取某一范围的数据行时，另一个事务又在该范围内插入了新行，当用户再读取该范围的数据行时，会发现有新的“幻影” 行。InnoDB和Falcon存储引擎通过多版本并发控制（MVCC，Multiversion Concurrency Control）机制解决了该问题。</p>\n<h3 id=\"Serializable（可串行化）\"><a href=\"#Serializable（可串行化）\" class=\"headerlink\" title=\"Serializable（可串行化）\"></a>Serializable（可串行化）</h3><p>这是最高的隔离级别，它通过强制事务排序，使之不可能相互冲突，从而解决幻读问题。简言之，它是在每个读的数据行上加上共享锁。在这个级别，可能导致大量的超时现象和锁竞争。</p>\n<h2 id=\"不同隔离级别产生的各种问题\"><a href=\"#不同隔离级别产生的各种问题\" class=\"headerlink\" title=\"不同隔离级别产生的各种问题\"></a>不同隔离级别产生的各种问题</h2><table>\n<thead>\n<tr>\n<th>隔离级别</th>\n<th>脏读</th>\n<th>不可重复读</th>\n<th>幻读</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>read uncommitted</td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n</tr>\n<tr>\n<td>read committed</td>\n<td>×</td>\n<td>√</td>\n<td>√</td>\n</tr>\n<tr>\n<td>repeatable read</td>\n<td>×</td>\n<td>×</td>\n<td>√或×</td>\n</tr>\n<tr>\n<td>serializable</td>\n<td>×</td>\n<td>×</td>\n<td>× </td>\n</tr>\n</tbody>\n</table>\n<p>为什么第三行的幻读是不确定的呢？因为这取决你数据库内选择的是何种存储引擎，比如InnoDB就通过多版本并发控制（MVCC，Multiversion Concurrency Control）机制解决了幻读了问题。</p>\n<h2 id=\"脏读\"><a href=\"#脏读\" class=\"headerlink\" title=\"脏读\"></a>脏读</h2><p>事务T1可以看到事务T2未提交的内容。</p>\n<p><strong>举例：</strong><br>病人A的性别是男性，事务T1开启事务想查看病人A的性别，这个时候事务T2，先行一步，手滑把病人A的性别改成了女性，没有提交数据库，此时事务T1读到的病人A的性别是女性。事务T2发现改错了，回滚了事务，但是事务T1已经读到了“脏”数据。</p>\n<h2 id=\"不可重复读\"><a href=\"#不可重复读\" class=\"headerlink\" title=\"不可重复读\"></a>不可重复读</h2><p>由于事务T2对数据的修改，导致事务T1连续查询两次数据，发现两次查询出的数据不一致。</p>\n<p><strong>举例：</strong><br>病人A的性别是男性，事务T1开启事务第一次查看病人A的性别是男性，这时事务T2把病人A的性别改为女性，并提交。事务T1第二次查看病人A的性别，发现变成了女性。</p>\n<h2 id=\"幻读\"><a href=\"#幻读\" class=\"headerlink\" title=\"幻读\"></a>幻读</h2><p>事务T1按一定条件读取数据，这个时候事务T2如果在该条件内删除或新增数据，会导致事务T1再次读取数据的时候，会发现数据变多/少了。</p>\n<p><strong>举例：</strong></p>\n<ol>\n<li>如果事务T1在第一次读取的时候对数据进行了更新，那么事务T2新增的幻读的数据就被漏改了。就像幻觉一样。</li>\n<li>如果事务T1在第一次读取的时候发现数据有5条，这时事务T2新增或删除了一条数据，事务T1再次查询的时候，发现记录不是5条了。就像幻觉一样。</li>\n</ol>\n<h1 id=\"动手操作环节\"><a href=\"#动手操作环节\" class=\"headerlink\" title=\"动手操作环节\"></a>动手操作环节</h1><p>上面的概念不需要死记硬背，跟着下面的步骤试验一遍就能心里有数了。</p>\n<p>以MySQL数据库为例。</p>\n<h2 id=\"准备库表与基础数据\"><a href=\"#准备库表与基础数据\" class=\"headerlink\" title=\"准备库表与基础数据\"></a>准备库表与基础数据</h2><p>在<code>test</code>库下新增表<code>test</code>，表结构如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">CREATE TABLE `test` (</div><div class=\"line\">  `id` int(11) NOT NULL AUTO_INCREMENT,</div><div class=\"line\">  `num` int(11) DEFAULT NULL,</div><div class=\"line\">  PRIMARY KEY (`id`)</div><div class=\"line\">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</div></pre></td></tr></table></figure></p>\n<p>插入三条基础数据<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">INSERT INTO test (num) VALUES(1);</div><div class=\"line\">INSERT INTO test (num) VALUES(2);</div><div class=\"line\">INSERT INTO test (num) VALUES(3);</div></pre></td></tr></table></figure></p>\n<p>进入MySQL命令行，不知道如何进入的<a href=\"../WINDOWS如何进入MySQL命令行\">点击这里</a></p>\n<p>通过<code>use test;</code>进入具体的库</p>\n<p><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-4-12/91904121-file_1491981549970_ef19.png\" alt=\"image\"></p>\n<p>通过<code>show tables;</code>查看所有表</p>\n<p><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-4-12/83849583-file_1491981624968_14ec8.png\" alt=\"image\"></p>\n<p>下面开两个窗口，A窗口代表事务T1，B窗口代表事务T2，通过修改A窗口的事务隔离级别来试验。</p>\n<h2 id=\"1-将A的隔离级别设置为read-uncommitted-读未提交\"><a href=\"#1-将A的隔离级别设置为read-uncommitted-读未提交\" class=\"headerlink\" title=\"1. 将A的隔离级别设置为read uncommitted(读未提交)\"></a>1. 将A的隔离级别设置为read uncommitted(读未提交)</h2><p><strong>A：设置隔离级别</strong></p>\n<p><code>set session transaction isolation level read uncommitted;</code></p>\n<p><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-4-12/131570-file_1491981956792_3200.png\" alt=\"image\"></p>\n<p><strong>A：查看隔离级别</strong></p>\n<p><code>select @@tx_isolation;</code></p>\n<p><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-4-12/88154747-file_1491982098863_13c02.png\" alt=\"image\"></p>\n<p><strong>B：查看隔离级别</strong></p>\n<p>A的隔离级别设置只对当前连接有效，查看B的隔离级别，可以发现，还是MySQL默认的隔离级别<code>REPEATABLE-READ</code>。</p>\n<p><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-4-12/96102531-file_1491982208328_151be.png\" alt=\"image\"></p>\n<p>这里B窗口就使用默认的隔离级别就可以了，不需要修改。</p>\n<p><strong>A：进入事务，并查询</strong></p>\n<p><code>start transaction;</code></p>\n<p><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-4-12/28486851-file_1491982546947_1225b.png\" alt=\"image\"></p>\n<p><strong>B：进入事务，并更新一条记录</strong></p>\n<p><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-4-12/58489290-file_1491982763692_11f8a.png\" alt=\"image\"><br>注意，此时B窗口还没有提交事务。</p>\n<p><strong>A：再次查询</strong></p>\n<p><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-4-12/69209462-file_1491982875153_e7dd.png\" alt=\"image\"><br>可以看到，A读到了B没有提交的事务。</p>\n<p><strong>B：回滚事务</strong></p>\n<p>通过<code>rollback;</code>来回滚事务。  </p>\n<p><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-4-12/4245094-file_1491983073673_14dd2.png\" alt=\"image\"></p>\n<p><strong>A：再次查询</strong></p>\n<p><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-4-12/35919306-file_1491983128743_9686.png\" alt=\"image\"></p>\n<p>如果B新增/删除记录，不提交的话。A也是能看到的。这里就不演示了。</p>\n<h2 id=\"2-将客户端A的事务隔离级别设置为read-committed-读已提交\"><a href=\"#2-将客户端A的事务隔离级别设置为read-committed-读已提交\" class=\"headerlink\" title=\"2. 将客户端A的事务隔离级别设置为read committed(读已提交)\"></a>2. 将客户端A的事务隔离级别设置为read committed(读已提交)</h2><p><strong>A：设置隔离级别</strong></p>\n<p><code>set session transaction isolation level read committed;</code></p>\n<p><strong>A：开启事务，并查询</strong></p>\n<p><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-4-12/28486851-file_1491982546947_1225b.png\" alt=\"image\"></p>\n<p><strong>B：开启事务，并修改</strong></p>\n<p><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-4-12/58489290-file_1491982763692_11f8a.png\" alt=\"image\"></p>\n<p><strong>A：查询</strong></p>\n<p><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-4-12/35919306-file_1491983128743_9686.png\" alt=\"image\"><br>我们发现A没有读取到B没有提交的事务。</p>\n<p><strong>B：提交事务</strong></p>\n<p><code>commit;</code></p>\n<p><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-4-12/31618607-file_1491986479178_aad2.png\" alt=\"image\"></p>\n<p><strong>A：查询</strong></p>\n<p><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-4-12/69209462-file_1491982875153_e7dd.png\" alt=\"image\"></p>\n<p>可以看到脏读问题解决了，但是出现了不可重复读的问题。也就是A窗口第一次查询和第二次查询的结果不一样。</p>\n<h2 id=\"3-将A的隔离级别设置为repeatable-read-可重复读\"><a href=\"#3-将A的隔离级别设置为repeatable-read-可重复读\" class=\"headerlink\" title=\"3. 将A的隔离级别设置为repeatable read(可重复读)\"></a>3. 将A的隔离级别设置为repeatable read(可重复读)</h2><p><strong>A：设置隔离级别</strong></p>\n<p><code>set session transaction isolation level repeatable read;</code></p>\n<p><strong>A：开启事务并查询</strong></p>\n<p><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-4-12/76572583-file_1491987406629_6333.png\" alt=\"\"></p>\n<p><strong>B：开启事务，更新记录但不提交</strong></p>\n<p><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-4-13/21971864-file_1492045056348_6aba.png\" alt=\"\"></p>\n<p><strong>A：查询</strong></p>\n<p><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-4-12/35919306-file_1491983128743_9686.png\" alt=\"image\"></p>\n<p><strong>B：提交</strong></p>\n<p><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-4-13/31142551-file_1492045141256_35c5.png\" alt=\"\"></p>\n<p><strong>A：查询</strong></p>\n<p><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-4-12/35919306-file_1491983128743_9686.png\" alt=\"image\"><br>即使B修改了记录并提交，但是A两次的查询结果都是一样的，说明可以重复查询了。</p>\n<p><strong>B：新增记录</strong></p>\n<p><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-4-13/66448146-file_1492045547790_728.png\" alt=\"image\"></p>\n<p><strong>A：查询</strong></p>\n<p><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-4-12/35919306-file_1491983128743_9686.png\" alt=\"image\"></p>\n<p>并没有新增的数据，幻读问题也没有出现，因为我的MySQL用的是InnoDB作为存储引擎。</p>\n<h2 id=\"4-将A的隔离级别设置为Serializable-可串行化\"><a href=\"#4-将A的隔离级别设置为Serializable-可串行化\" class=\"headerlink\" title=\"4. 将A的隔离级别设置为Serializable(可串行化)\"></a>4. 将A的隔离级别设置为Serializable(可串行化)</h2><p><strong>A：设置隔离级别，开启事务并查询</strong></p>\n<p><code>set session transaction isolation level serializable;</code></p>\n<p><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-4-13/98104812-file_1492045804404_17c5.png\" alt=\"image\"></p>\n<p><strong>B：开启事务，新增记录</strong></p>\n<p><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-4-13/66351991-file_1492045858068_a810.png\" alt=\"image\"><br>发现卡住了，因为必须等A的事务执行完毕才行。</p>\n<p><strong>A：提交事务</strong></p>\n<p><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-4-13/79104071-file_1492045922444_1a76.png\" alt=\"image\"></p>\n<p><strong>B：插入记录成功。</strong></p>\n<p><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-4-13/34114634-file_1492045961893_10a51.png\" alt=\"image\"></p>"},{"title":"$.post返回状态码200，但却进入error","date":"2017-03-24T03:34:47.000Z","_content":"今天测试报了一个线上bug。\n\n表现为：当有用户的时候没有bug，但是没有用户的时候，页面报错。\n\n<!-- more -->\n## 排查\n用简单的代码演示一下\n\n**js代码**\n```\n$.post(\"/xxx/xx/x\", {\"name\":\"lxl\"}, function (e) {\n    console.log('success')\n}, \"json\").error(function () {\n    console.log('error')\n});\n```\n**java代码**\n```java\n@RequestMapping(method = RequestMethod.POST, value = \"/xxx/xx/x\")\npublic ResponseEntity<List<User>> PatientOrderListBySyuser(HttpServletRequest request,\n                                                                         HttpServletResponse response, ModelMap model) {\n    //获取所有用户\n    List<User> list = userService.getUsers();\n    return new ResponseEntity<List<User>>(list, HttpStatus.OK);\n}\n```\n## 过程\n\n**重现**  \n后台list有数据的时候，可以进入$.post的success  \n后台list没有数据的时候，进入的却是$.post的error  \n后台返回的状态码都是200\n\n**debug**   \n1. 开始怀疑跨域问题，把处理跨域的filter注释掉，问题没有解决。\n2. 怀疑是dataType的问题，尝试把js代码里的`dataType=json`去掉，问题解决。\n\n**原来如此**  \n原来没有这个bug的时候，如果没有用户，返回的是空数组，可以被解析成json。\n\n查看git提交记录，发现同事把没有用户的情况，改成返回null，然后不能被解析成json，所以进入error了。\n\n## 结论\n后台返回null的时候，即使状态码是200，也不能进入dataType为json的ajax请求的success。  \n\n因为null无法解析为json格式，所以会进入error。","source":"_posts/JavaScript/$.post返回状态码200，但却进入error.md","raw":"---\ntitle: $.post返回状态码200，但却进入error\ndate: 2017-03-24 11:34:47\ncategories: JavaScript\n---\n今天测试报了一个线上bug。\n\n表现为：当有用户的时候没有bug，但是没有用户的时候，页面报错。\n\n<!-- more -->\n## 排查\n用简单的代码演示一下\n\n**js代码**\n```\n$.post(\"/xxx/xx/x\", {\"name\":\"lxl\"}, function (e) {\n    console.log('success')\n}, \"json\").error(function () {\n    console.log('error')\n});\n```\n**java代码**\n```java\n@RequestMapping(method = RequestMethod.POST, value = \"/xxx/xx/x\")\npublic ResponseEntity<List<User>> PatientOrderListBySyuser(HttpServletRequest request,\n                                                                         HttpServletResponse response, ModelMap model) {\n    //获取所有用户\n    List<User> list = userService.getUsers();\n    return new ResponseEntity<List<User>>(list, HttpStatus.OK);\n}\n```\n## 过程\n\n**重现**  \n后台list有数据的时候，可以进入$.post的success  \n后台list没有数据的时候，进入的却是$.post的error  \n后台返回的状态码都是200\n\n**debug**   \n1. 开始怀疑跨域问题，把处理跨域的filter注释掉，问题没有解决。\n2. 怀疑是dataType的问题，尝试把js代码里的`dataType=json`去掉，问题解决。\n\n**原来如此**  \n原来没有这个bug的时候，如果没有用户，返回的是空数组，可以被解析成json。\n\n查看git提交记录，发现同事把没有用户的情况，改成返回null，然后不能被解析成json，所以进入error了。\n\n## 结论\n后台返回null的时候，即使状态码是200，也不能进入dataType为json的ajax请求的success。  \n\n因为null无法解析为json格式，所以会进入error。","slug":"JavaScript/$.post返回状态码200，但却进入error","published":1,"updated":"2017-03-24T05:58:41.976Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1qae488000nc812164g8f21","content":"<p>今天测试报了一个线上bug。</p>\n<p>表现为：当有用户的时候没有bug，但是没有用户的时候，页面报错。</p>\n<a id=\"more\"></a>\n<h2 id=\"排查\"><a href=\"#排查\" class=\"headerlink\" title=\"排查\"></a>排查</h2><p>用简单的代码演示一下</p>\n<p><strong>js代码</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.post(&quot;/xxx/xx/x&quot;, &#123;&quot;name&quot;:&quot;lxl&quot;&#125;, function (e) &#123;</div><div class=\"line\">    console.log(&apos;success&apos;)</div><div class=\"line\">&#125;, &quot;json&quot;).error(function () &#123;</div><div class=\"line\">    console.log(&apos;error&apos;)</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p><strong>java代码</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RequestMapping</span>(method = RequestMethod.POST, value = <span class=\"string\">\"/xxx/xx/x\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> ResponseEntity&lt;List&lt;User&gt;&gt; PatientOrderListBySyuser(HttpServletRequest request,</div><div class=\"line\">                                                                         HttpServletResponse response, ModelMap model) &#123;</div><div class=\"line\">    <span class=\"comment\">//获取所有用户</span></div><div class=\"line\">    List&lt;User&gt; list = userService.getUsers();</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ResponseEntity&lt;List&lt;User&gt;&gt;(list, HttpStatus.OK);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"过程\"><a href=\"#过程\" class=\"headerlink\" title=\"过程\"></a>过程</h2><p><strong>重现</strong><br>后台list有数据的时候，可以进入$.post的success<br>后台list没有数据的时候，进入的却是$.post的error<br>后台返回的状态码都是200</p>\n<p><strong>debug</strong>   </p>\n<ol>\n<li>开始怀疑跨域问题，把处理跨域的filter注释掉，问题没有解决。</li>\n<li>怀疑是dataType的问题，尝试把js代码里的<code>dataType=json</code>去掉，问题解决。</li>\n</ol>\n<p><strong>原来如此</strong><br>原来没有这个bug的时候，如果没有用户，返回的是空数组，可以被解析成json。</p>\n<p>查看git提交记录，发现同事把没有用户的情况，改成返回null，然后不能被解析成json，所以进入error了。</p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>后台返回null的时候，即使状态码是200，也不能进入dataType为json的ajax请求的success。  </p>\n<p>因为null无法解析为json格式，所以会进入error。</p>\n","excerpt":"<p>今天测试报了一个线上bug。</p>\n<p>表现为：当有用户的时候没有bug，但是没有用户的时候，页面报错。</p>","more":"<h2 id=\"排查\"><a href=\"#排查\" class=\"headerlink\" title=\"排查\"></a>排查</h2><p>用简单的代码演示一下</p>\n<p><strong>js代码</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.post(&quot;/xxx/xx/x&quot;, &#123;&quot;name&quot;:&quot;lxl&quot;&#125;, function (e) &#123;</div><div class=\"line\">    console.log(&apos;success&apos;)</div><div class=\"line\">&#125;, &quot;json&quot;).error(function () &#123;</div><div class=\"line\">    console.log(&apos;error&apos;)</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p><strong>java代码</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RequestMapping</span>(method = RequestMethod.POST, value = <span class=\"string\">\"/xxx/xx/x\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> ResponseEntity&lt;List&lt;User&gt;&gt; PatientOrderListBySyuser(HttpServletRequest request,</div><div class=\"line\">                                                                         HttpServletResponse response, ModelMap model) &#123;</div><div class=\"line\">    <span class=\"comment\">//获取所有用户</span></div><div class=\"line\">    List&lt;User&gt; list = userService.getUsers();</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ResponseEntity&lt;List&lt;User&gt;&gt;(list, HttpStatus.OK);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"过程\"><a href=\"#过程\" class=\"headerlink\" title=\"过程\"></a>过程</h2><p><strong>重现</strong><br>后台list有数据的时候，可以进入$.post的success<br>后台list没有数据的时候，进入的却是$.post的error<br>后台返回的状态码都是200</p>\n<p><strong>debug</strong>   </p>\n<ol>\n<li>开始怀疑跨域问题，把处理跨域的filter注释掉，问题没有解决。</li>\n<li>怀疑是dataType的问题，尝试把js代码里的<code>dataType=json</code>去掉，问题解决。</li>\n</ol>\n<p><strong>原来如此</strong><br>原来没有这个bug的时候，如果没有用户，返回的是空数组，可以被解析成json。</p>\n<p>查看git提交记录，发现同事把没有用户的情况，改成返回null，然后不能被解析成json，所以进入error了。</p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>后台返回null的时候，即使状态码是200，也不能进入dataType为json的ajax请求的success。  </p>\n<p>因为null无法解析为json格式，所以会进入error。</p>"},{"title":"WINDOWS如何进入MySQL命令行","date":"2017-04-12T06:34:47.000Z","_content":"平时查看数据库都用工具Navicat for MySQL。\n\n今天想通过命令行来实践一下MySQL的事务隔离性，发现竟然不知道怎么进入命令行，记录一下吧。\n\n<!-- more -->\n\n准备工作：\n\n安装MySQL，配置环境变量，启动MySQL。这些不多说。\n\n1. 通过WIN+R打开CMD窗口\n    - 不知道为什么，git提供的黑窗口进不了MySQL命令行。\n\n2. 输入`mysql -h127.0.0.1 -uroot -proot`即可\n    - `-h`后面是数据库连接的地址\n    - `-u`后面是数据库的用户名\n    - `-p`后面是数据库的密码\n\n3. 通过`show databases;`查看所有的库\n    - 命令都必须以`;`作为结尾\n\n4. 输入`exit`或通过快捷键`Ctrl+C`退出MySQL命令行 \n","source":"_posts/MySQL/WINDOWS如何进入MySQL命令行.md","raw":"---\ntitle: WINDOWS如何进入MySQL命令行\ndate: 2017-04-12 14:34:47\ncategories: MySQL\n---\n平时查看数据库都用工具Navicat for MySQL。\n\n今天想通过命令行来实践一下MySQL的事务隔离性，发现竟然不知道怎么进入命令行，记录一下吧。\n\n<!-- more -->\n\n准备工作：\n\n安装MySQL，配置环境变量，启动MySQL。这些不多说。\n\n1. 通过WIN+R打开CMD窗口\n    - 不知道为什么，git提供的黑窗口进不了MySQL命令行。\n\n2. 输入`mysql -h127.0.0.1 -uroot -proot`即可\n    - `-h`后面是数据库连接的地址\n    - `-u`后面是数据库的用户名\n    - `-p`后面是数据库的密码\n\n3. 通过`show databases;`查看所有的库\n    - 命令都必须以`;`作为结尾\n\n4. 输入`exit`或通过快捷键`Ctrl+C`退出MySQL命令行 \n","slug":"MySQL/WINDOWS如何进入MySQL命令行","published":1,"updated":"2017-04-12T06:41:35.706Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1qae48a000qc8123jyj2lxb","content":"<p>平时查看数据库都用工具Navicat for MySQL。</p>\n<p>今天想通过命令行来实践一下MySQL的事务隔离性，发现竟然不知道怎么进入命令行，记录一下吧。</p>\n<a id=\"more\"></a>\n<p>准备工作：</p>\n<p>安装MySQL，配置环境变量，启动MySQL。这些不多说。</p>\n<ol>\n<li><p>通过WIN+R打开CMD窗口</p>\n<ul>\n<li>不知道为什么，git提供的黑窗口进不了MySQL命令行。</li>\n</ul>\n</li>\n<li><p>输入<code>mysql -h127.0.0.1 -uroot -proot</code>即可</p>\n<ul>\n<li><code>-h</code>后面是数据库连接的地址</li>\n<li><code>-u</code>后面是数据库的用户名</li>\n<li><code>-p</code>后面是数据库的密码</li>\n</ul>\n</li>\n<li><p>通过<code>show databases;</code>查看所有的库</p>\n<ul>\n<li>命令都必须以<code>;</code>作为结尾</li>\n</ul>\n</li>\n<li><p>输入<code>exit</code>或通过快捷键<code>Ctrl+C</code>退出MySQL命令行 </p>\n</li>\n</ol>\n","excerpt":"<p>平时查看数据库都用工具Navicat for MySQL。</p>\n<p>今天想通过命令行来实践一下MySQL的事务隔离性，发现竟然不知道怎么进入命令行，记录一下吧。</p>","more":"<p>准备工作：</p>\n<p>安装MySQL，配置环境变量，启动MySQL。这些不多说。</p>\n<ol>\n<li><p>通过WIN+R打开CMD窗口</p>\n<ul>\n<li>不知道为什么，git提供的黑窗口进不了MySQL命令行。</li>\n</ul>\n</li>\n<li><p>输入<code>mysql -h127.0.0.1 -uroot -proot</code>即可</p>\n<ul>\n<li><code>-h</code>后面是数据库连接的地址</li>\n<li><code>-u</code>后面是数据库的用户名</li>\n<li><code>-p</code>后面是数据库的密码</li>\n</ul>\n</li>\n<li><p>通过<code>show databases;</code>查看所有的库</p>\n<ul>\n<li>命令都必须以<code>;</code>作为结尾</li>\n</ul>\n</li>\n<li><p>输入<code>exit</code>或通过快捷键<code>Ctrl+C</code>退出MySQL命令行 </p>\n</li>\n</ol>"},{"title":"Java设计模式--单例模式","date":"2017-03-03T10:42:47.000Z","_content":"\n## 单例模式介绍\n使用单例可以减少不必要的系统开销，比如Spring里配置的数据源，创建和销毁耗费大量的资源，所以就用单例来保证项目加载的时候只生成一个实例，大家公用该实例。Spring的bean默认都是Singleton的。\n\n单例模式有以下特点：\n1. 单例类只能有一个实例。\n2. 单例类必须自己创建自己的唯一实例。\n3. 单例类必须给所有其他对象提供这一实例。\n\n## 单例模式的写法\n我画了张图来总结一下我所知道的单例模式的写法。\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-3-1/94738122-file_1488378897476_bff8.png)\n\n具体代码演示\n\n### 懒汉式\n```java\npublic class SingletonDemo01 {\n\n    private static SingletonDemo01 instance = null;\n\n    private SingletonDemo01() {\n\n    }\n\n    public static SingletonDemo01 getInstance() {\n        if (instance == null) {\n            instance = new SingletonDemo01();\n        }\n        return instance;\n    }\n\n}\n```\n这个有线程安全问题：线程A判断完实例没有创建，刚刚准备创建对象的时候，时间片切换到第二个线程B，这个时候线程B也发现实例没有创建，然后两个线程就各创建了一个对象了。\n\n### 饿汉式\n```java\npublic class SingletonDemo02 {\n\n    private static SingletonDemo02 instance = new SingletonDemo02();\n\n    private SingletonDemo02() {\n        //设置私有构造外部就不能通过new来新建实例了。\n    }\n\n    public static SingletonDemo02 getInstance() {\n        return instance;\n    }\n\n}\n```\n**优点**：\n\n饿汉模式简单，也没有线程安全问题。\n\n了解过类加载机制的同学可能要问，如果线程A和线程B同时触发了类加载机制怎么办呢？会不会在线程切换间创建两个对象？没关系，在jvm里，类加载的时候会自动的加锁，并且有CAS保证了只有一个对象被创建。具体细节这里不展开。\n\n**缺点**：\n\n如果我的类里定义了其他静态方法或静态变量，我只是想用一下静态方法或变量，依据getstatic指令触发类的初始化，这个时候，instance变量会跟着一起初始化，也就创建了一个SingletonDemo02的对象，白白浪费了内存。\n\n### 单检锁\n```java\npublic class SingletonDemo03 {\n\n    private static SingletonDemo03 instance = null;\n\n    private SingletonDemo03() {\n\n    }\n\n    public synchronized static SingletonDemo03 getInstance() {\n        if (instance == null) {\n            instance = new SingletonDemo03();\n        }\n        return instance;\n    }\n\n}\n```\n**优点**:\n\n线程安全。\n\n在懒汉式上加上了synchronized关键字，也就解决了普通懒汉式线程不安全的问题。\n\n**缺点**：\n\n锁的粒度太粗，instance==null的判断并不需要加锁。\n\n### 双检锁\n```java\npublic class SingletonDemo04 {\n\n    private static volatile SingletonDemo04 instance = null;\n\n    private SingletonDemo04() {\n\n    }\n\n    public synchronized static SingletonDemo04 getInstance() {\n        if (instance == null) {\n            synchronized (SingletonDemo04.class) {\n                if (instance == null) {\n                    instance = new SingletonDemo04();\n                }\n            }\n        }\n        return instance;\n    }\n\n}\n```\njvm创建对象的时候大致干三件事：  \n1. 在堆上分配内存空间\n2. 执行类的构造方法初始化参数\n3. 把创建的对象指向分配的内存空间地址\n\n在编译优化里，这几步的执行顺序并不是一定的，可能是123，也可能是132。\n\n这里的volatile是为了防止132运行的时候，别的线程发现对象不为null，然后直接去操作对象里的某些参数。\n\n**优点**:\n\n线程安全，锁的粒度小\n\n**缺点**：\n\n多线程学的不扎实的可能很难理解。\n\n### 静态内部类\n```java\npublic class SingletonDemo05 {\n\n    private SingletonDemo05() {\n\n    }\n\n    private static final class SingletonManager {\n        private static SingletonDemo05 instance = new SingletonDemo05();\n    }\n\n    public static SingletonDemo05 getInstance() {\n        return SingletonManager.instance;\n    }\n\n}\n```\n**优点**:\n\n改进了饿汉式的缺点，可以发现，现在即使SingletonDemo05里有其他的静态方法，只要我不调用getInstance()方法，我就不会白白的创建一个对象了。\n\n### 枚举\n```\npublic enum SingletonDemo06 {\n\n    INSTANCE;\n    \n    private Resource instance;\n\n    SingletonDemo06() {\n        instance = new Resource();\n    }\n\n    public Resource getInstance() {\n        return instance;\n    }\n\n}\n\nclass Resource {\n}\n```\n**优点**：\n\n前面的几种方式都可以通过反射和反序列化破坏掉\n\n由于枚举类型的特性，保证了线程安全、反射安全和反序列化安全\n\n在《Effective Java》书中有一句话是：\n\n> 单元素的枚举类型已经成为实现Singleton的最佳方法。","source":"_posts/Java设计模式/Java设计模式--单例模式.md","raw":"---\ntitle: Java设计模式--单例模式\ndate: 2017-03-03 18:42:47\ncategories: Java设计模式\n---\n\n## 单例模式介绍\n使用单例可以减少不必要的系统开销，比如Spring里配置的数据源，创建和销毁耗费大量的资源，所以就用单例来保证项目加载的时候只生成一个实例，大家公用该实例。Spring的bean默认都是Singleton的。\n\n单例模式有以下特点：\n1. 单例类只能有一个实例。\n2. 单例类必须自己创建自己的唯一实例。\n3. 单例类必须给所有其他对象提供这一实例。\n\n## 单例模式的写法\n我画了张图来总结一下我所知道的单例模式的写法。\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-3-1/94738122-file_1488378897476_bff8.png)\n\n具体代码演示\n\n### 懒汉式\n```java\npublic class SingletonDemo01 {\n\n    private static SingletonDemo01 instance = null;\n\n    private SingletonDemo01() {\n\n    }\n\n    public static SingletonDemo01 getInstance() {\n        if (instance == null) {\n            instance = new SingletonDemo01();\n        }\n        return instance;\n    }\n\n}\n```\n这个有线程安全问题：线程A判断完实例没有创建，刚刚准备创建对象的时候，时间片切换到第二个线程B，这个时候线程B也发现实例没有创建，然后两个线程就各创建了一个对象了。\n\n### 饿汉式\n```java\npublic class SingletonDemo02 {\n\n    private static SingletonDemo02 instance = new SingletonDemo02();\n\n    private SingletonDemo02() {\n        //设置私有构造外部就不能通过new来新建实例了。\n    }\n\n    public static SingletonDemo02 getInstance() {\n        return instance;\n    }\n\n}\n```\n**优点**：\n\n饿汉模式简单，也没有线程安全问题。\n\n了解过类加载机制的同学可能要问，如果线程A和线程B同时触发了类加载机制怎么办呢？会不会在线程切换间创建两个对象？没关系，在jvm里，类加载的时候会自动的加锁，并且有CAS保证了只有一个对象被创建。具体细节这里不展开。\n\n**缺点**：\n\n如果我的类里定义了其他静态方法或静态变量，我只是想用一下静态方法或变量，依据getstatic指令触发类的初始化，这个时候，instance变量会跟着一起初始化，也就创建了一个SingletonDemo02的对象，白白浪费了内存。\n\n### 单检锁\n```java\npublic class SingletonDemo03 {\n\n    private static SingletonDemo03 instance = null;\n\n    private SingletonDemo03() {\n\n    }\n\n    public synchronized static SingletonDemo03 getInstance() {\n        if (instance == null) {\n            instance = new SingletonDemo03();\n        }\n        return instance;\n    }\n\n}\n```\n**优点**:\n\n线程安全。\n\n在懒汉式上加上了synchronized关键字，也就解决了普通懒汉式线程不安全的问题。\n\n**缺点**：\n\n锁的粒度太粗，instance==null的判断并不需要加锁。\n\n### 双检锁\n```java\npublic class SingletonDemo04 {\n\n    private static volatile SingletonDemo04 instance = null;\n\n    private SingletonDemo04() {\n\n    }\n\n    public synchronized static SingletonDemo04 getInstance() {\n        if (instance == null) {\n            synchronized (SingletonDemo04.class) {\n                if (instance == null) {\n                    instance = new SingletonDemo04();\n                }\n            }\n        }\n        return instance;\n    }\n\n}\n```\njvm创建对象的时候大致干三件事：  \n1. 在堆上分配内存空间\n2. 执行类的构造方法初始化参数\n3. 把创建的对象指向分配的内存空间地址\n\n在编译优化里，这几步的执行顺序并不是一定的，可能是123，也可能是132。\n\n这里的volatile是为了防止132运行的时候，别的线程发现对象不为null，然后直接去操作对象里的某些参数。\n\n**优点**:\n\n线程安全，锁的粒度小\n\n**缺点**：\n\n多线程学的不扎实的可能很难理解。\n\n### 静态内部类\n```java\npublic class SingletonDemo05 {\n\n    private SingletonDemo05() {\n\n    }\n\n    private static final class SingletonManager {\n        private static SingletonDemo05 instance = new SingletonDemo05();\n    }\n\n    public static SingletonDemo05 getInstance() {\n        return SingletonManager.instance;\n    }\n\n}\n```\n**优点**:\n\n改进了饿汉式的缺点，可以发现，现在即使SingletonDemo05里有其他的静态方法，只要我不调用getInstance()方法，我就不会白白的创建一个对象了。\n\n### 枚举\n```\npublic enum SingletonDemo06 {\n\n    INSTANCE;\n    \n    private Resource instance;\n\n    SingletonDemo06() {\n        instance = new Resource();\n    }\n\n    public Resource getInstance() {\n        return instance;\n    }\n\n}\n\nclass Resource {\n}\n```\n**优点**：\n\n前面的几种方式都可以通过反射和反序列化破坏掉\n\n由于枚举类型的特性，保证了线程安全、反射安全和反序列化安全\n\n在《Effective Java》书中有一句话是：\n\n> 单元素的枚举类型已经成为实现Singleton的最佳方法。","slug":"Java设计模式/Java设计模式--单例模式","published":1,"updated":"2017-03-03T02:13:06.618Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1qae48d000sc812y50k2bhu","content":"<h2 id=\"单例模式介绍\"><a href=\"#单例模式介绍\" class=\"headerlink\" title=\"单例模式介绍\"></a>单例模式介绍</h2><p>使用单例可以减少不必要的系统开销，比如Spring里配置的数据源，创建和销毁耗费大量的资源，所以就用单例来保证项目加载的时候只生成一个实例，大家公用该实例。Spring的bean默认都是Singleton的。</p>\n<p>单例模式有以下特点：</p>\n<ol>\n<li>单例类只能有一个实例。</li>\n<li>单例类必须自己创建自己的唯一实例。</li>\n<li>单例类必须给所有其他对象提供这一实例。</li>\n</ol>\n<h2 id=\"单例模式的写法\"><a href=\"#单例模式的写法\" class=\"headerlink\" title=\"单例模式的写法\"></a>单例模式的写法</h2><p>我画了张图来总结一下我所知道的单例模式的写法。<br><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-3-1/94738122-file_1488378897476_bff8.png\" alt=\"image\"></p>\n<p>具体代码演示</p>\n<h3 id=\"懒汉式\"><a href=\"#懒汉式\" class=\"headerlink\" title=\"懒汉式\"></a>懒汉式</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonDemo01</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SingletonDemo01 instance = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SingletonDemo01</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SingletonDemo01 <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            instance = <span class=\"keyword\">new</span> SingletonDemo01();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> instance;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这个有线程安全问题：线程A判断完实例没有创建，刚刚准备创建对象的时候，时间片切换到第二个线程B，这个时候线程B也发现实例没有创建，然后两个线程就各创建了一个对象了。</p>\n<h3 id=\"饿汉式\"><a href=\"#饿汉式\" class=\"headerlink\" title=\"饿汉式\"></a>饿汉式</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonDemo02</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SingletonDemo02 instance = <span class=\"keyword\">new</span> SingletonDemo02();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SingletonDemo02</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//设置私有构造外部就不能通过new来新建实例了。</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SingletonDemo02 <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> instance;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>优点</strong>：</p>\n<p>饿汉模式简单，也没有线程安全问题。</p>\n<p>了解过类加载机制的同学可能要问，如果线程A和线程B同时触发了类加载机制怎么办呢？会不会在线程切换间创建两个对象？没关系，在jvm里，类加载的时候会自动的加锁，并且有CAS保证了只有一个对象被创建。具体细节这里不展开。</p>\n<p><strong>缺点</strong>：</p>\n<p>如果我的类里定义了其他静态方法或静态变量，我只是想用一下静态方法或变量，依据getstatic指令触发类的初始化，这个时候，instance变量会跟着一起初始化，也就创建了一个SingletonDemo02的对象，白白浪费了内存。</p>\n<h3 id=\"单检锁\"><a href=\"#单检锁\" class=\"headerlink\" title=\"单检锁\"></a>单检锁</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonDemo03</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SingletonDemo03 instance = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SingletonDemo03</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">static</span> SingletonDemo03 <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            instance = <span class=\"keyword\">new</span> SingletonDemo03();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> instance;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>优点</strong>:</p>\n<p>线程安全。</p>\n<p>在懒汉式上加上了synchronized关键字，也就解决了普通懒汉式线程不安全的问题。</p>\n<p><strong>缺点</strong>：</p>\n<p>锁的粒度太粗，instance==null的判断并不需要加锁。</p>\n<h3 id=\"双检锁\"><a href=\"#双检锁\" class=\"headerlink\" title=\"双检锁\"></a>双检锁</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonDemo04</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> SingletonDemo04 instance = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SingletonDemo04</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">static</span> SingletonDemo04 <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">synchronized</span> (SingletonDemo04.class) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    instance = <span class=\"keyword\">new</span> SingletonDemo04();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> instance;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>jvm创建对象的时候大致干三件事：  </p>\n<ol>\n<li>在堆上分配内存空间</li>\n<li>执行类的构造方法初始化参数</li>\n<li>把创建的对象指向分配的内存空间地址</li>\n</ol>\n<p>在编译优化里，这几步的执行顺序并不是一定的，可能是123，也可能是132。</p>\n<p>这里的volatile是为了防止132运行的时候，别的线程发现对象不为null，然后直接去操作对象里的某些参数。</p>\n<p><strong>优点</strong>:</p>\n<p>线程安全，锁的粒度小</p>\n<p><strong>缺点</strong>：</p>\n<p>多线程学的不扎实的可能很难理解。</p>\n<h3 id=\"静态内部类\"><a href=\"#静态内部类\" class=\"headerlink\" title=\"静态内部类\"></a>静态内部类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonDemo05</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SingletonDemo05</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonManager</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SingletonDemo05 instance = <span class=\"keyword\">new</span> SingletonDemo05();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SingletonDemo05 <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> SingletonManager.instance;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>优点</strong>:</p>\n<p>改进了饿汉式的缺点，可以发现，现在即使SingletonDemo05里有其他的静态方法，只要我不调用getInstance()方法，我就不会白白的创建一个对象了。</p>\n<h3 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">public enum SingletonDemo06 &#123;</div><div class=\"line\"></div><div class=\"line\">    INSTANCE;</div><div class=\"line\">    </div><div class=\"line\">    private Resource instance;</div><div class=\"line\"></div><div class=\"line\">    SingletonDemo06() &#123;</div><div class=\"line\">        instance = new Resource();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public Resource getInstance() &#123;</div><div class=\"line\">        return instance;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class Resource &#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>优点</strong>：</p>\n<p>前面的几种方式都可以通过反射和反序列化破坏掉</p>\n<p>由于枚举类型的特性，保证了线程安全、反射安全和反序列化安全</p>\n<p>在《Effective Java》书中有一句话是：</p>\n<blockquote>\n<p>单元素的枚举类型已经成为实现Singleton的最佳方法。</p>\n</blockquote>\n","excerpt":"","more":"<h2 id=\"单例模式介绍\"><a href=\"#单例模式介绍\" class=\"headerlink\" title=\"单例模式介绍\"></a>单例模式介绍</h2><p>使用单例可以减少不必要的系统开销，比如Spring里配置的数据源，创建和销毁耗费大量的资源，所以就用单例来保证项目加载的时候只生成一个实例，大家公用该实例。Spring的bean默认都是Singleton的。</p>\n<p>单例模式有以下特点：</p>\n<ol>\n<li>单例类只能有一个实例。</li>\n<li>单例类必须自己创建自己的唯一实例。</li>\n<li>单例类必须给所有其他对象提供这一实例。</li>\n</ol>\n<h2 id=\"单例模式的写法\"><a href=\"#单例模式的写法\" class=\"headerlink\" title=\"单例模式的写法\"></a>单例模式的写法</h2><p>我画了张图来总结一下我所知道的单例模式的写法。<br><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-3-1/94738122-file_1488378897476_bff8.png\" alt=\"image\"></p>\n<p>具体代码演示</p>\n<h3 id=\"懒汉式\"><a href=\"#懒汉式\" class=\"headerlink\" title=\"懒汉式\"></a>懒汉式</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonDemo01</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SingletonDemo01 instance = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SingletonDemo01</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SingletonDemo01 <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            instance = <span class=\"keyword\">new</span> SingletonDemo01();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> instance;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这个有线程安全问题：线程A判断完实例没有创建，刚刚准备创建对象的时候，时间片切换到第二个线程B，这个时候线程B也发现实例没有创建，然后两个线程就各创建了一个对象了。</p>\n<h3 id=\"饿汉式\"><a href=\"#饿汉式\" class=\"headerlink\" title=\"饿汉式\"></a>饿汉式</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonDemo02</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SingletonDemo02 instance = <span class=\"keyword\">new</span> SingletonDemo02();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SingletonDemo02</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//设置私有构造外部就不能通过new来新建实例了。</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SingletonDemo02 <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> instance;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>优点</strong>：</p>\n<p>饿汉模式简单，也没有线程安全问题。</p>\n<p>了解过类加载机制的同学可能要问，如果线程A和线程B同时触发了类加载机制怎么办呢？会不会在线程切换间创建两个对象？没关系，在jvm里，类加载的时候会自动的加锁，并且有CAS保证了只有一个对象被创建。具体细节这里不展开。</p>\n<p><strong>缺点</strong>：</p>\n<p>如果我的类里定义了其他静态方法或静态变量，我只是想用一下静态方法或变量，依据getstatic指令触发类的初始化，这个时候，instance变量会跟着一起初始化，也就创建了一个SingletonDemo02的对象，白白浪费了内存。</p>\n<h3 id=\"单检锁\"><a href=\"#单检锁\" class=\"headerlink\" title=\"单检锁\"></a>单检锁</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonDemo03</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SingletonDemo03 instance = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SingletonDemo03</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">static</span> SingletonDemo03 <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            instance = <span class=\"keyword\">new</span> SingletonDemo03();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> instance;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>优点</strong>:</p>\n<p>线程安全。</p>\n<p>在懒汉式上加上了synchronized关键字，也就解决了普通懒汉式线程不安全的问题。</p>\n<p><strong>缺点</strong>：</p>\n<p>锁的粒度太粗，instance==null的判断并不需要加锁。</p>\n<h3 id=\"双检锁\"><a href=\"#双检锁\" class=\"headerlink\" title=\"双检锁\"></a>双检锁</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonDemo04</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> SingletonDemo04 instance = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SingletonDemo04</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">static</span> SingletonDemo04 <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">synchronized</span> (SingletonDemo04.class) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    instance = <span class=\"keyword\">new</span> SingletonDemo04();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> instance;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>jvm创建对象的时候大致干三件事：  </p>\n<ol>\n<li>在堆上分配内存空间</li>\n<li>执行类的构造方法初始化参数</li>\n<li>把创建的对象指向分配的内存空间地址</li>\n</ol>\n<p>在编译优化里，这几步的执行顺序并不是一定的，可能是123，也可能是132。</p>\n<p>这里的volatile是为了防止132运行的时候，别的线程发现对象不为null，然后直接去操作对象里的某些参数。</p>\n<p><strong>优点</strong>:</p>\n<p>线程安全，锁的粒度小</p>\n<p><strong>缺点</strong>：</p>\n<p>多线程学的不扎实的可能很难理解。</p>\n<h3 id=\"静态内部类\"><a href=\"#静态内部类\" class=\"headerlink\" title=\"静态内部类\"></a>静态内部类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonDemo05</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SingletonDemo05</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonManager</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SingletonDemo05 instance = <span class=\"keyword\">new</span> SingletonDemo05();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SingletonDemo05 <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> SingletonManager.instance;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>优点</strong>:</p>\n<p>改进了饿汉式的缺点，可以发现，现在即使SingletonDemo05里有其他的静态方法，只要我不调用getInstance()方法，我就不会白白的创建一个对象了。</p>\n<h3 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">public enum SingletonDemo06 &#123;</div><div class=\"line\"></div><div class=\"line\">    INSTANCE;</div><div class=\"line\">    </div><div class=\"line\">    private Resource instance;</div><div class=\"line\"></div><div class=\"line\">    SingletonDemo06() &#123;</div><div class=\"line\">        instance = new Resource();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public Resource getInstance() &#123;</div><div class=\"line\">        return instance;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class Resource &#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>优点</strong>：</p>\n<p>前面的几种方式都可以通过反射和反序列化破坏掉</p>\n<p>由于枚举类型的特性，保证了线程安全、反射安全和反序列化安全</p>\n<p>在《Effective Java》书中有一句话是：</p>\n<blockquote>\n<p>单元素的枚举类型已经成为实现Singleton的最佳方法。</p>\n</blockquote>\n"},{"title":"git clone的时候显示Filename too long的解决办法","date":"2017-03-03T14:34:47.000Z","_content":"\n在Git bash中，运行下列命令即可： \n```\ngit config --global core.longpaths true\n```\n\n如果只想对本次clone有效，只要在上述命令中去掉```--global```即可。","source":"_posts/git/git clone的时候显示Filename too long的解决办法.md","raw":"---\ntitle: git clone的时候显示Filename too long的解决办法\ndate: 2017-03-03 22:34:47\ncategories: git\n---\n\n在Git bash中，运行下列命令即可： \n```\ngit config --global core.longpaths true\n```\n\n如果只想对本次clone有效，只要在上述命令中去掉```--global```即可。","slug":"git/git clone的时候显示Filename too long的解决办法","published":1,"updated":"2017-03-06T01:10:40.914Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1qae48f000vc812q1o73xev","content":"<p>在Git bash中，运行下列命令即可：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --global core.longpaths true</div></pre></td></tr></table></figure></p>\n<p>如果只想对本次clone有效，只要在上述命令中去掉<code>--global</code>即可。</p>\n","excerpt":"","more":"<p>在Git bash中，运行下列命令即可：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --global core.longpaths true</div></pre></td></tr></table></figure></p>\n<p>如果只想对本次clone有效，只要在上述命令中去掉<code>--global</code>即可。</p>\n"},{"title":"通过js实现导入导出txt格式","date":"2017-02-28T06:42:47.000Z","_content":"\n项目中有一个需求是要导出页面上的配置，然后又不想走后台来实现。google之~\n\n# 导出\n使用FileSaver.min.js\n\n[FileSaver.min.js的github地址](https://github.com/eligrey/FileSaver.js)\n\n示例（项目用的是AngularJs）:\n```js\nPatientVisitModel.prototype.downloadConfig = function () {\n\n    var saveText = {};\n    saveText.currentType = this.currentType;\n    saveText.currentConfig = this.uiConfigs;\n\n    var blob = new Blob([JSON.stringify(saveText)], {type: \"text/plain;charset=utf-8\"});\n    saveAs(blob, \"hello world.txt\");\n\n};\n```\n\n# 导入\n使用HTML5.JS的FileReader对象\n```js\nPatientVisitModel.prototype.uploadConfig = function (myFile) {\n\n    var self = this;\n\n    var file = myFile.files[0];\n    var reader = new FileReader();\n    //将文件以文本形式读入页面\n    reader.readAsText(file);\n    reader.onload = function()\n    {\n        var resultText = JSON.parse(this.result);\n        self.uiConfigs = resultText.currentConfig;\n        self.currentType = resultText.currentType;\n    };\n};\n```\n\nhtml页面上的写法\n```html\n<input type=\"file\" id=\"file-input\" onchange=\"angular.element(this).scope().patientVisitModel.uploadConfig(this)\" >\n```","source":"_posts/JavaScript/通过js实现导入导出txt格式.md","raw":"---\ntitle: 通过js实现导入导出txt格式\ndate: 2017-02-28 14:42:47\ncategories: JavaScript\n---\n\n项目中有一个需求是要导出页面上的配置，然后又不想走后台来实现。google之~\n\n# 导出\n使用FileSaver.min.js\n\n[FileSaver.min.js的github地址](https://github.com/eligrey/FileSaver.js)\n\n示例（项目用的是AngularJs）:\n```js\nPatientVisitModel.prototype.downloadConfig = function () {\n\n    var saveText = {};\n    saveText.currentType = this.currentType;\n    saveText.currentConfig = this.uiConfigs;\n\n    var blob = new Blob([JSON.stringify(saveText)], {type: \"text/plain;charset=utf-8\"});\n    saveAs(blob, \"hello world.txt\");\n\n};\n```\n\n# 导入\n使用HTML5.JS的FileReader对象\n```js\nPatientVisitModel.prototype.uploadConfig = function (myFile) {\n\n    var self = this;\n\n    var file = myFile.files[0];\n    var reader = new FileReader();\n    //将文件以文本形式读入页面\n    reader.readAsText(file);\n    reader.onload = function()\n    {\n        var resultText = JSON.parse(this.result);\n        self.uiConfigs = resultText.currentConfig;\n        self.currentType = resultText.currentType;\n    };\n};\n```\n\nhtml页面上的写法\n```html\n<input type=\"file\" id=\"file-input\" onchange=\"angular.element(this).scope().patientVisitModel.uploadConfig(this)\" >\n```","slug":"JavaScript/通过js实现导入导出txt格式","published":1,"updated":"2017-02-28T06:43:09.378Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1qae48h000xc812ioz198pd","content":"<p>项目中有一个需求是要导出页面上的配置，然后又不想走后台来实现。google之~</p>\n<h1 id=\"导出\"><a href=\"#导出\" class=\"headerlink\" title=\"导出\"></a>导出</h1><p>使用FileSaver.min.js</p>\n<p><a href=\"https://github.com/eligrey/FileSaver.js\" target=\"_blank\" rel=\"external\">FileSaver.min.js的github地址</a></p>\n<p>示例（项目用的是AngularJs）:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">PatientVisitModel.prototype.downloadConfig = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> saveText = &#123;&#125;;</div><div class=\"line\">    saveText.currentType = <span class=\"keyword\">this</span>.currentType;</div><div class=\"line\">    saveText.currentConfig = <span class=\"keyword\">this</span>.uiConfigs;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> blob = <span class=\"keyword\">new</span> Blob([<span class=\"built_in\">JSON</span>.stringify(saveText)], &#123;<span class=\"attr\">type</span>: <span class=\"string\">\"text/plain;charset=utf-8\"</span>&#125;);</div><div class=\"line\">    saveAs(blob, <span class=\"string\">\"hello world.txt\"</span>);</div><div class=\"line\"></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<h1 id=\"导入\"><a href=\"#导入\" class=\"headerlink\" title=\"导入\"></a>导入</h1><p>使用HTML5.JS的FileReader对象<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">PatientVisitModel.prototype.uploadConfig = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">myFile</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> file = myFile.files[<span class=\"number\">0</span>];</div><div class=\"line\">    <span class=\"keyword\">var</span> reader = <span class=\"keyword\">new</span> FileReader();</div><div class=\"line\">    <span class=\"comment\">//将文件以文本形式读入页面</span></div><div class=\"line\">    reader.readAsText(file);</div><div class=\"line\">    reader.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> resultText = <span class=\"built_in\">JSON</span>.parse(<span class=\"keyword\">this</span>.result);</div><div class=\"line\">        self.uiConfigs = resultText.currentConfig;</div><div class=\"line\">        self.currentType = resultText.currentType;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>html页面上的写法<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"file-input\"</span> <span class=\"attr\">onchange</span>=<span class=\"string\">\"angular.element(this).scope().patientVisitModel.uploadConfig(this)\"</span> &gt;</span></div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p>项目中有一个需求是要导出页面上的配置，然后又不想走后台来实现。google之~</p>\n<h1 id=\"导出\"><a href=\"#导出\" class=\"headerlink\" title=\"导出\"></a>导出</h1><p>使用FileSaver.min.js</p>\n<p><a href=\"https://github.com/eligrey/FileSaver.js\">FileSaver.min.js的github地址</a></p>\n<p>示例（项目用的是AngularJs）:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">PatientVisitModel.prototype.downloadConfig = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> saveText = &#123;&#125;;</div><div class=\"line\">    saveText.currentType = <span class=\"keyword\">this</span>.currentType;</div><div class=\"line\">    saveText.currentConfig = <span class=\"keyword\">this</span>.uiConfigs;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> blob = <span class=\"keyword\">new</span> Blob([<span class=\"built_in\">JSON</span>.stringify(saveText)], &#123;<span class=\"attr\">type</span>: <span class=\"string\">\"text/plain;charset=utf-8\"</span>&#125;);</div><div class=\"line\">    saveAs(blob, <span class=\"string\">\"hello world.txt\"</span>);</div><div class=\"line\"></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<h1 id=\"导入\"><a href=\"#导入\" class=\"headerlink\" title=\"导入\"></a>导入</h1><p>使用HTML5.JS的FileReader对象<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">PatientVisitModel.prototype.uploadConfig = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">myFile</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> file = myFile.files[<span class=\"number\">0</span>];</div><div class=\"line\">    <span class=\"keyword\">var</span> reader = <span class=\"keyword\">new</span> FileReader();</div><div class=\"line\">    <span class=\"comment\">//将文件以文本形式读入页面</span></div><div class=\"line\">    reader.readAsText(file);</div><div class=\"line\">    reader.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> resultText = <span class=\"built_in\">JSON</span>.parse(<span class=\"keyword\">this</span>.result);</div><div class=\"line\">        self.uiConfigs = resultText.currentConfig;</div><div class=\"line\">        self.currentType = resultText.currentType;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>html页面上的写法<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"file-input\"</span> <span class=\"attr\">onchange</span>=<span class=\"string\">\"angular.element(this).scope().patientVisitModel.uploadConfig(this)\"</span> &gt;</span></div></pre></td></tr></table></figure></p>\n"},{"title":"查看zookeeper节点的几种方式","date":"2017-03-28T03:34:47.000Z","_content":"\n在使用dubbo的时候，有时候会报一个`Please check registry access list (whitelist/blacklist)`的异常。一般报这个错误就是说你在调用的这个服务找不到provider了。\n\n这个时候如果想查看一个zookeeper上注册的节点有没有这个服务的话。有以下几种方式。\n\n<!-- more -->\n\n## 1. 直接通过命令行查看\n在Linux环境下，cd进入zookeeper的bin目录下，执行下面的命令\n\n`./zkCli.sh -server 192.168.0.12:2181`\n\n成功后就会进入zookeeper的命令行了。如下图。\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-3-28/5352397-file_1490678243046_11d10.png)\n\n输入`help`可以查看有哪些命令\n\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-3-28/40299390-file_1490678454707_8da5.png)\n\n这里我们选用`ls`命令来查看节点。比如`ls /dubbo/xx.xxx.xxxx/providers`。这条命令会列出该路径下的所有节点。\n\n如果要删除节点的话，就使用`delete`命令，比如`delete /dubbo/xxx.xxx.xxxx/providers`。用`delete`删除节点的时候，如果有子节点，必须先删除子节点，才能删除该节点。当然你也可以使用`rmr`来递归删除，不过挺危险的。\n\n**这种方式打印出来的节点是没有格式化过，全部挤在一起，完全看不了。而且节点是被encode过的，更加不美观。**\n\n## 2. 用Java程序遍历\n```java\nimport org.apache.zookeeper.WatchedEvent;\nimport org.apache.zookeeper.Watcher;\nimport org.apache.zookeeper.ZooKeeper;\n\nimport java.net.URLDecoder;\nimport java.util.List;\n\npublic class Zoo {\n\n    private static final String connectString = \"192.168.0.12:2181\";\n\n    private static final int sessionTimeout = 2000;\n\n    public static void main(String[] args) throws Exception {\n\n        String path = \"/dubbo/xx.xxx.xxxx/providers\";\n\n        ZooKeeper zk = new ZooKeeper(connectString, sessionTimeout, new Watcher() {\n            // 监控所有被触发的事件\n            public void process(WatchedEvent event) {\n                System.out.println(\"已经触发了\" + event.getType() + \"事件！\");\n            }\n        });\n\n        //获取路径下的节点\n        List<String> children = zk.getChildren(path, false);\n        for (String pathCd : children) {\n            System.out.println(URLDecoder.decode(pathCd, \"UTF-8\"));  //记得转码\n        }\n\n    }\n}\n```\n\n**这种方式查看还行，但也挺麻烦。不过可以用这个来遍历删除节点。**\n\n## 3. 使用dubbokeeper\n使用开源项目[dubbokeeper](https://github.com/dubboclub/dubbokeeper)，有可视化界面。","source":"_posts/dubbo/查看zookeeper节点的几种方式.md","raw":"---\ntitle: 查看zookeeper节点的几种方式\ndate: 2017-03-28 11:34:47\ncategories: dubbo\n---\n\n在使用dubbo的时候，有时候会报一个`Please check registry access list (whitelist/blacklist)`的异常。一般报这个错误就是说你在调用的这个服务找不到provider了。\n\n这个时候如果想查看一个zookeeper上注册的节点有没有这个服务的话。有以下几种方式。\n\n<!-- more -->\n\n## 1. 直接通过命令行查看\n在Linux环境下，cd进入zookeeper的bin目录下，执行下面的命令\n\n`./zkCli.sh -server 192.168.0.12:2181`\n\n成功后就会进入zookeeper的命令行了。如下图。\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-3-28/5352397-file_1490678243046_11d10.png)\n\n输入`help`可以查看有哪些命令\n\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-3-28/40299390-file_1490678454707_8da5.png)\n\n这里我们选用`ls`命令来查看节点。比如`ls /dubbo/xx.xxx.xxxx/providers`。这条命令会列出该路径下的所有节点。\n\n如果要删除节点的话，就使用`delete`命令，比如`delete /dubbo/xxx.xxx.xxxx/providers`。用`delete`删除节点的时候，如果有子节点，必须先删除子节点，才能删除该节点。当然你也可以使用`rmr`来递归删除，不过挺危险的。\n\n**这种方式打印出来的节点是没有格式化过，全部挤在一起，完全看不了。而且节点是被encode过的，更加不美观。**\n\n## 2. 用Java程序遍历\n```java\nimport org.apache.zookeeper.WatchedEvent;\nimport org.apache.zookeeper.Watcher;\nimport org.apache.zookeeper.ZooKeeper;\n\nimport java.net.URLDecoder;\nimport java.util.List;\n\npublic class Zoo {\n\n    private static final String connectString = \"192.168.0.12:2181\";\n\n    private static final int sessionTimeout = 2000;\n\n    public static void main(String[] args) throws Exception {\n\n        String path = \"/dubbo/xx.xxx.xxxx/providers\";\n\n        ZooKeeper zk = new ZooKeeper(connectString, sessionTimeout, new Watcher() {\n            // 监控所有被触发的事件\n            public void process(WatchedEvent event) {\n                System.out.println(\"已经触发了\" + event.getType() + \"事件！\");\n            }\n        });\n\n        //获取路径下的节点\n        List<String> children = zk.getChildren(path, false);\n        for (String pathCd : children) {\n            System.out.println(URLDecoder.decode(pathCd, \"UTF-8\"));  //记得转码\n        }\n\n    }\n}\n```\n\n**这种方式查看还行，但也挺麻烦。不过可以用这个来遍历删除节点。**\n\n## 3. 使用dubbokeeper\n使用开源项目[dubbokeeper](https://github.com/dubboclub/dubbokeeper)，有可视化界面。","slug":"dubbo/查看zookeeper节点的几种方式","published":1,"updated":"2017-03-28T05:56:03.663Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1qae48k0010c8123avzyxks","content":"<p>在使用dubbo的时候，有时候会报一个<code>Please check registry access list (whitelist/blacklist)</code>的异常。一般报这个错误就是说你在调用的这个服务找不到provider了。</p>\n<p>这个时候如果想查看一个zookeeper上注册的节点有没有这个服务的话。有以下几种方式。</p>\n<a id=\"more\"></a>\n<h2 id=\"1-直接通过命令行查看\"><a href=\"#1-直接通过命令行查看\" class=\"headerlink\" title=\"1. 直接通过命令行查看\"></a>1. 直接通过命令行查看</h2><p>在Linux环境下，cd进入zookeeper的bin目录下，执行下面的命令</p>\n<p><code>./zkCli.sh -server 192.168.0.12:2181</code></p>\n<p>成功后就会进入zookeeper的命令行了。如下图。<br><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-3-28/5352397-file_1490678243046_11d10.png\" alt=\"image\"></p>\n<p>输入<code>help</code>可以查看有哪些命令</p>\n<p><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-3-28/40299390-file_1490678454707_8da5.png\" alt=\"image\"></p>\n<p>这里我们选用<code>ls</code>命令来查看节点。比如<code>ls /dubbo/xx.xxx.xxxx/providers</code>。这条命令会列出该路径下的所有节点。</p>\n<p>如果要删除节点的话，就使用<code>delete</code>命令，比如<code>delete /dubbo/xxx.xxx.xxxx/providers</code>。用<code>delete</code>删除节点的时候，如果有子节点，必须先删除子节点，才能删除该节点。当然你也可以使用<code>rmr</code>来递归删除，不过挺危险的。</p>\n<p><strong>这种方式打印出来的节点是没有格式化过，全部挤在一起，完全看不了。而且节点是被encode过的，更加不美观。</strong></p>\n<h2 id=\"2-用Java程序遍历\"><a href=\"#2-用Java程序遍历\" class=\"headerlink\" title=\"2. 用Java程序遍历\"></a>2. 用Java程序遍历</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> org.apache.zookeeper.WatchedEvent;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.zookeeper.Watcher;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.zookeeper.ZooKeeper;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.net.URLDecoder;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Zoo</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String connectString = <span class=\"string\">\"192.168.0.12:2181\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> sessionTimeout = <span class=\"number\">2000</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        String path = <span class=\"string\">\"/dubbo/xx.xxx.xxxx/providers\"</span>;</div><div class=\"line\"></div><div class=\"line\">        ZooKeeper zk = <span class=\"keyword\">new</span> ZooKeeper(connectString, sessionTimeout, <span class=\"keyword\">new</span> Watcher() &#123;</div><div class=\"line\">            <span class=\"comment\">// 监控所有被触发的事件</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">process</span><span class=\"params\">(WatchedEvent event)</span> </span>&#123;</div><div class=\"line\">                System.out.println(<span class=\"string\">\"已经触发了\"</span> + event.getType() + <span class=\"string\">\"事件！\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//获取路径下的节点</span></div><div class=\"line\">        List&lt;String&gt; children = zk.getChildren(path, <span class=\"keyword\">false</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span> (String pathCd : children) &#123;</div><div class=\"line\">            System.out.println(URLDecoder.decode(pathCd, <span class=\"string\">\"UTF-8\"</span>));  <span class=\"comment\">//记得转码</span></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>这种方式查看还行，但也挺麻烦。不过可以用这个来遍历删除节点。</strong></p>\n<h2 id=\"3-使用dubbokeeper\"><a href=\"#3-使用dubbokeeper\" class=\"headerlink\" title=\"3. 使用dubbokeeper\"></a>3. 使用dubbokeeper</h2><p>使用开源项目<a href=\"https://github.com/dubboclub/dubbokeeper\" target=\"_blank\" rel=\"external\">dubbokeeper</a>，有可视化界面。</p>\n","excerpt":"<p>在使用dubbo的时候，有时候会报一个<code>Please check registry access list (whitelist/blacklist)</code>的异常。一般报这个错误就是说你在调用的这个服务找不到provider了。</p>\n<p>这个时候如果想查看一个zookeeper上注册的节点有没有这个服务的话。有以下几种方式。</p>","more":"<h2 id=\"1-直接通过命令行查看\"><a href=\"#1-直接通过命令行查看\" class=\"headerlink\" title=\"1. 直接通过命令行查看\"></a>1. 直接通过命令行查看</h2><p>在Linux环境下，cd进入zookeeper的bin目录下，执行下面的命令</p>\n<p><code>./zkCli.sh -server 192.168.0.12:2181</code></p>\n<p>成功后就会进入zookeeper的命令行了。如下图。<br><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-3-28/5352397-file_1490678243046_11d10.png\" alt=\"image\"></p>\n<p>输入<code>help</code>可以查看有哪些命令</p>\n<p><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-3-28/40299390-file_1490678454707_8da5.png\" alt=\"image\"></p>\n<p>这里我们选用<code>ls</code>命令来查看节点。比如<code>ls /dubbo/xx.xxx.xxxx/providers</code>。这条命令会列出该路径下的所有节点。</p>\n<p>如果要删除节点的话，就使用<code>delete</code>命令，比如<code>delete /dubbo/xxx.xxx.xxxx/providers</code>。用<code>delete</code>删除节点的时候，如果有子节点，必须先删除子节点，才能删除该节点。当然你也可以使用<code>rmr</code>来递归删除，不过挺危险的。</p>\n<p><strong>这种方式打印出来的节点是没有格式化过，全部挤在一起，完全看不了。而且节点是被encode过的，更加不美观。</strong></p>\n<h2 id=\"2-用Java程序遍历\"><a href=\"#2-用Java程序遍历\" class=\"headerlink\" title=\"2. 用Java程序遍历\"></a>2. 用Java程序遍历</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> org.apache.zookeeper.WatchedEvent;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.zookeeper.Watcher;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.zookeeper.ZooKeeper;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.net.URLDecoder;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Zoo</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String connectString = <span class=\"string\">\"192.168.0.12:2181\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> sessionTimeout = <span class=\"number\">2000</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        String path = <span class=\"string\">\"/dubbo/xx.xxx.xxxx/providers\"</span>;</div><div class=\"line\"></div><div class=\"line\">        ZooKeeper zk = <span class=\"keyword\">new</span> ZooKeeper(connectString, sessionTimeout, <span class=\"keyword\">new</span> Watcher() &#123;</div><div class=\"line\">            <span class=\"comment\">// 监控所有被触发的事件</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">process</span><span class=\"params\">(WatchedEvent event)</span> </span>&#123;</div><div class=\"line\">                System.out.println(<span class=\"string\">\"已经触发了\"</span> + event.getType() + <span class=\"string\">\"事件！\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//获取路径下的节点</span></div><div class=\"line\">        List&lt;String&gt; children = zk.getChildren(path, <span class=\"keyword\">false</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span> (String pathCd : children) &#123;</div><div class=\"line\">            System.out.println(URLDecoder.decode(pathCd, <span class=\"string\">\"UTF-8\"</span>));  <span class=\"comment\">//记得转码</span></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>这种方式查看还行，但也挺麻烦。不过可以用这个来遍历删除节点。</strong></p>\n<h2 id=\"3-使用dubbokeeper\"><a href=\"#3-使用dubbokeeper\" class=\"headerlink\" title=\"3. 使用dubbokeeper\"></a>3. 使用dubbokeeper</h2><p>使用开源项目<a href=\"https://github.com/dubboclub/dubbokeeper\">dubbokeeper</a>，有可视化界面。</p>"},{"title":"git如何忽略不想提交的文件","date":"2017-03-17T03:34:47.000Z","_content":"## 1. 在根目录下新建一个文件.gitignore\n    \n这里应该会提示`请键入文件名`，可找人要一份。或按以下操作解决\n\n    1. 在项目根目录下面创建`gitignore.txt`文件\n\n    2. 把你需要排除的文件名保存到`gitignore.txt`文件\n\n    3. 在项目根目录下面按住Shift键并右键然后选择`在此处打开命令窗口`\n\n    4. 执行命令`ren gitignore.txt .gitignore`\n    \n## 2. 拷入以下内容\n\n\n```\n#################\n## Eclipse\n#################\n\n*.pydevproject\n.project\n.metadata\nbin/\ntmp/\n*.tmp\n*.bak\n*.swp\n*~.nib\nlocal.properties\n.classpath\n.settings/\n.loadpath\n\n# External tool builders\n.externalToolBuilders/\n\n# Locally stored \"Eclipse launch configurations\"\n*.launch\n\n# CDT-specific\n.cproject\n\n# PDT-specific\n.buildpath\n\n\n#################\n## Visual Studio\n#################\n\n## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n# User-specific files\n*.suo\n*.user\n*.sln.docstates\n\n# Build results\n\n[Dd]ebug/\n[Rr]elease/\nx64/\nbuild/\n[Bb]in/\n[Oo]bj/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n*_i.c\n*_p.c\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.log\n*.scc\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opensdf\n*.sdf\n*.cachefile\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# NCrunch\n*.ncrunch*\n.*crunch*.local.xml\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.Publish.xml\n*.pubxml\n*.publishproj\n\n# NuGet Packages Directory\n## TODO: If you have NuGet Package Restore enabled, uncomment the next line\n#packages/\n\n# Windows Azure Build Output\ncsx\n*.build.csdef\n\n# Windows Store app package directory\nAppPackages/\n\n# Others\nsql/\n*.Cache\nClientBin/\n[Ss]tyle[Cc]op.*\n~$*\n*~\n*.dbmdl\n*.[Pp]ublish.xml\n*.pfx\n*.publishsettings\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file to a newer\n# Visual Studio version. Backup files are not needed, because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\nApp_Data/*.mdf\nApp_Data/*.ldf\n\n#############\n## Windows detritus\n#############\n\n# Windows image file caches\nThumbs.db\nehthumbs.db\n\n# Folder config file\nDesktop.ini\n\n# Recycle Bin used on file shares\n$RECYCLE.BIN/\n\n# Mac crap\n.DS_Store\n\n\n#############\n## Python\n#############\n\n*.py[cod]\n\n# Packages\n*.egg\n*.egg-info\ndist/\nbuild/\neggs/\nparts/\nvar/\nsdist/\ndevelop-eggs/\n.installed.cfg\n\n# Installer logs\npip-log.txt\n\n# Unit test / coverage reports\n.coverage\n.tox\n\n#Translations\n*.mo\n\n#Mr Developer\n.mr.developer.cfg\n\n#################\n## idea\n#################\n\n*.iml\n.idea/\n\n#################\n## maven\n#################\n\ntarget/\n*.war\n\n#################\n## dev\n#################\nweb/pt_zsyy-model/.checkstyle\ndev/\nweb/pt_zsyy/.springWebflow\nweb_sql/database.properties\n```\n\n\n ## 3. 提交.gitignore\n\n\n\n# 题外话\n- ## 使用.gitkeep  \nGit会忽略空的文件夹。如果你想版本控制包括空文件夹，根据惯例会在空文件夹下放置.gitkeep文件。其实对文件名没有特定的要求。一旦一个空文件夹下有文件后，这个文件夹就会在版本控制范围内。\n","source":"_posts/git/git如何忽略不想提交的文件.md","raw":"---\ntitle: git如何忽略不想提交的文件\ndate: 2017-03-17 11:34:47\ncategories: git\n---\n## 1. 在根目录下新建一个文件.gitignore\n    \n这里应该会提示`请键入文件名`，可找人要一份。或按以下操作解决\n\n    1. 在项目根目录下面创建`gitignore.txt`文件\n\n    2. 把你需要排除的文件名保存到`gitignore.txt`文件\n\n    3. 在项目根目录下面按住Shift键并右键然后选择`在此处打开命令窗口`\n\n    4. 执行命令`ren gitignore.txt .gitignore`\n    \n## 2. 拷入以下内容\n\n\n```\n#################\n## Eclipse\n#################\n\n*.pydevproject\n.project\n.metadata\nbin/\ntmp/\n*.tmp\n*.bak\n*.swp\n*~.nib\nlocal.properties\n.classpath\n.settings/\n.loadpath\n\n# External tool builders\n.externalToolBuilders/\n\n# Locally stored \"Eclipse launch configurations\"\n*.launch\n\n# CDT-specific\n.cproject\n\n# PDT-specific\n.buildpath\n\n\n#################\n## Visual Studio\n#################\n\n## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n# User-specific files\n*.suo\n*.user\n*.sln.docstates\n\n# Build results\n\n[Dd]ebug/\n[Rr]elease/\nx64/\nbuild/\n[Bb]in/\n[Oo]bj/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n*_i.c\n*_p.c\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.log\n*.scc\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opensdf\n*.sdf\n*.cachefile\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# NCrunch\n*.ncrunch*\n.*crunch*.local.xml\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.Publish.xml\n*.pubxml\n*.publishproj\n\n# NuGet Packages Directory\n## TODO: If you have NuGet Package Restore enabled, uncomment the next line\n#packages/\n\n# Windows Azure Build Output\ncsx\n*.build.csdef\n\n# Windows Store app package directory\nAppPackages/\n\n# Others\nsql/\n*.Cache\nClientBin/\n[Ss]tyle[Cc]op.*\n~$*\n*~\n*.dbmdl\n*.[Pp]ublish.xml\n*.pfx\n*.publishsettings\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file to a newer\n# Visual Studio version. Backup files are not needed, because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\nApp_Data/*.mdf\nApp_Data/*.ldf\n\n#############\n## Windows detritus\n#############\n\n# Windows image file caches\nThumbs.db\nehthumbs.db\n\n# Folder config file\nDesktop.ini\n\n# Recycle Bin used on file shares\n$RECYCLE.BIN/\n\n# Mac crap\n.DS_Store\n\n\n#############\n## Python\n#############\n\n*.py[cod]\n\n# Packages\n*.egg\n*.egg-info\ndist/\nbuild/\neggs/\nparts/\nvar/\nsdist/\ndevelop-eggs/\n.installed.cfg\n\n# Installer logs\npip-log.txt\n\n# Unit test / coverage reports\n.coverage\n.tox\n\n#Translations\n*.mo\n\n#Mr Developer\n.mr.developer.cfg\n\n#################\n## idea\n#################\n\n*.iml\n.idea/\n\n#################\n## maven\n#################\n\ntarget/\n*.war\n\n#################\n## dev\n#################\nweb/pt_zsyy-model/.checkstyle\ndev/\nweb/pt_zsyy/.springWebflow\nweb_sql/database.properties\n```\n\n\n ## 3. 提交.gitignore\n\n\n\n# 题外话\n- ## 使用.gitkeep  \nGit会忽略空的文件夹。如果你想版本控制包括空文件夹，根据惯例会在空文件夹下放置.gitkeep文件。其实对文件名没有特定的要求。一旦一个空文件夹下有文件后，这个文件夹就会在版本控制范围内。\n","slug":"git/git如何忽略不想提交的文件","published":1,"updated":"2017-03-17T07:23:38.344Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1qae48p0012c812j8xq989o","content":"<h2 id=\"1-在根目录下新建一个文件-gitignore\"><a href=\"#1-在根目录下新建一个文件-gitignore\" class=\"headerlink\" title=\"1. 在根目录下新建一个文件.gitignore\"></a>1. 在根目录下新建一个文件.gitignore</h2><p>这里应该会提示<code>请键入文件名</code>，可找人要一份。或按以下操作解决</p>\n<pre><code>1. 在项目根目录下面创建`gitignore.txt`文件\n\n2. 把你需要排除的文件名保存到`gitignore.txt`文件\n\n3. 在项目根目录下面按住Shift键并右键然后选择`在此处打开命令窗口`\n\n4. 执行命令`ren gitignore.txt .gitignore`\n</code></pre><h2 id=\"2-拷入以下内容\"><a href=\"#2-拷入以下内容\" class=\"headerlink\" title=\"2. 拷入以下内容\"></a>2. 拷入以下内容</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div></pre></td><td class=\"code\"><pre><div class=\"line\">#################</div><div class=\"line\">## Eclipse</div><div class=\"line\">#################</div><div class=\"line\"></div><div class=\"line\">*.pydevproject</div><div class=\"line\">.project</div><div class=\"line\">.metadata</div><div class=\"line\">bin/</div><div class=\"line\">tmp/</div><div class=\"line\">*.tmp</div><div class=\"line\">*.bak</div><div class=\"line\">*.swp</div><div class=\"line\">*~.nib</div><div class=\"line\">local.properties</div><div class=\"line\">.classpath</div><div class=\"line\">.settings/</div><div class=\"line\">.loadpath</div><div class=\"line\"></div><div class=\"line\"># External tool builders</div><div class=\"line\">.externalToolBuilders/</div><div class=\"line\"></div><div class=\"line\"># Locally stored &quot;Eclipse launch configurations&quot;</div><div class=\"line\">*.launch</div><div class=\"line\"></div><div class=\"line\"># CDT-specific</div><div class=\"line\">.cproject</div><div class=\"line\"></div><div class=\"line\"># PDT-specific</div><div class=\"line\">.buildpath</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">#################</div><div class=\"line\">## Visual Studio</div><div class=\"line\">#################</div><div class=\"line\"></div><div class=\"line\">## Ignore Visual Studio temporary files, build results, and</div><div class=\"line\">## files generated by popular Visual Studio add-ons.</div><div class=\"line\"></div><div class=\"line\"># User-specific files</div><div class=\"line\">*.suo</div><div class=\"line\">*.user</div><div class=\"line\">*.sln.docstates</div><div class=\"line\"></div><div class=\"line\"># Build results</div><div class=\"line\"></div><div class=\"line\">[Dd]ebug/</div><div class=\"line\">[Rr]elease/</div><div class=\"line\">x64/</div><div class=\"line\">build/</div><div class=\"line\">[Bb]in/</div><div class=\"line\">[Oo]bj/</div><div class=\"line\"></div><div class=\"line\"># MSTest test Results</div><div class=\"line\">[Tt]est[Rr]esult*/</div><div class=\"line\">[Bb]uild[Ll]og.*</div><div class=\"line\"></div><div class=\"line\">*_i.c</div><div class=\"line\">*_p.c</div><div class=\"line\">*.ilk</div><div class=\"line\">*.meta</div><div class=\"line\">*.obj</div><div class=\"line\">*.pch</div><div class=\"line\">*.pdb</div><div class=\"line\">*.pgc</div><div class=\"line\">*.pgd</div><div class=\"line\">*.rsp</div><div class=\"line\">*.sbr</div><div class=\"line\">*.tlb</div><div class=\"line\">*.tli</div><div class=\"line\">*.tlh</div><div class=\"line\">*.tmp</div><div class=\"line\">*.tmp_proj</div><div class=\"line\">*.log</div><div class=\"line\">*.vspscc</div><div class=\"line\">*.vssscc</div><div class=\"line\">.builds</div><div class=\"line\">*.pidb</div><div class=\"line\">*.log</div><div class=\"line\">*.scc</div><div class=\"line\"></div><div class=\"line\"># Visual C++ cache files</div><div class=\"line\">ipch/</div><div class=\"line\">*.aps</div><div class=\"line\">*.ncb</div><div class=\"line\">*.opensdf</div><div class=\"line\">*.sdf</div><div class=\"line\">*.cachefile</div><div class=\"line\"></div><div class=\"line\"># Visual Studio profiler</div><div class=\"line\">*.psess</div><div class=\"line\">*.vsp</div><div class=\"line\">*.vspx</div><div class=\"line\"></div><div class=\"line\"># Guidance Automation Toolkit</div><div class=\"line\">*.gpState</div><div class=\"line\"></div><div class=\"line\"># ReSharper is a .NET coding add-in</div><div class=\"line\">_ReSharper*/</div><div class=\"line\">*.[Rr]e[Ss]harper</div><div class=\"line\"></div><div class=\"line\"># TeamCity is a build add-in</div><div class=\"line\">_TeamCity*</div><div class=\"line\"></div><div class=\"line\"># DotCover is a Code Coverage Tool</div><div class=\"line\">*.dotCover</div><div class=\"line\"></div><div class=\"line\"># NCrunch</div><div class=\"line\">*.ncrunch*</div><div class=\"line\">.*crunch*.local.xml</div><div class=\"line\"></div><div class=\"line\"># Installshield output folder</div><div class=\"line\">[Ee]xpress/</div><div class=\"line\"></div><div class=\"line\"># DocProject is a documentation generator add-in</div><div class=\"line\">DocProject/buildhelp/</div><div class=\"line\">DocProject/Help/*.HxT</div><div class=\"line\">DocProject/Help/*.HxC</div><div class=\"line\">DocProject/Help/*.hhc</div><div class=\"line\">DocProject/Help/*.hhk</div><div class=\"line\">DocProject/Help/*.hhp</div><div class=\"line\">DocProject/Help/Html2</div><div class=\"line\">DocProject/Help/html</div><div class=\"line\"></div><div class=\"line\"># Click-Once directory</div><div class=\"line\">publish/</div><div class=\"line\"></div><div class=\"line\"># Publish Web Output</div><div class=\"line\">*.Publish.xml</div><div class=\"line\">*.pubxml</div><div class=\"line\">*.publishproj</div><div class=\"line\"></div><div class=\"line\"># NuGet Packages Directory</div><div class=\"line\">## TODO: If you have NuGet Package Restore enabled, uncomment the next line</div><div class=\"line\">#packages/</div><div class=\"line\"></div><div class=\"line\"># Windows Azure Build Output</div><div class=\"line\">csx</div><div class=\"line\">*.build.csdef</div><div class=\"line\"></div><div class=\"line\"># Windows Store app package directory</div><div class=\"line\">AppPackages/</div><div class=\"line\"></div><div class=\"line\"># Others</div><div class=\"line\">sql/</div><div class=\"line\">*.Cache</div><div class=\"line\">ClientBin/</div><div class=\"line\">[Ss]tyle[Cc]op.*</div><div class=\"line\">~$*</div><div class=\"line\">*~</div><div class=\"line\">*.dbmdl</div><div class=\"line\">*.[Pp]ublish.xml</div><div class=\"line\">*.pfx</div><div class=\"line\">*.publishsettings</div><div class=\"line\"></div><div class=\"line\"># RIA/Silverlight projects</div><div class=\"line\">Generated_Code/</div><div class=\"line\"></div><div class=\"line\"># Backup &amp; report files from converting an old project file to a newer</div><div class=\"line\"># Visual Studio version. Backup files are not needed, because we have git ;-)</div><div class=\"line\">_UpgradeReport_Files/</div><div class=\"line\">Backup*/</div><div class=\"line\">UpgradeLog*.XML</div><div class=\"line\">UpgradeLog*.htm</div><div class=\"line\"></div><div class=\"line\"># SQL Server files</div><div class=\"line\">App_Data/*.mdf</div><div class=\"line\">App_Data/*.ldf</div><div class=\"line\"></div><div class=\"line\">#############</div><div class=\"line\">## Windows detritus</div><div class=\"line\">#############</div><div class=\"line\"></div><div class=\"line\"># Windows image file caches</div><div class=\"line\">Thumbs.db</div><div class=\"line\">ehthumbs.db</div><div class=\"line\"></div><div class=\"line\"># Folder config file</div><div class=\"line\">Desktop.ini</div><div class=\"line\"></div><div class=\"line\"># Recycle Bin used on file shares</div><div class=\"line\">$RECYCLE.BIN/</div><div class=\"line\"></div><div class=\"line\"># Mac crap</div><div class=\"line\">.DS_Store</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">#############</div><div class=\"line\">## Python</div><div class=\"line\">#############</div><div class=\"line\"></div><div class=\"line\">*.py[cod]</div><div class=\"line\"></div><div class=\"line\"># Packages</div><div class=\"line\">*.egg</div><div class=\"line\">*.egg-info</div><div class=\"line\">dist/</div><div class=\"line\">build/</div><div class=\"line\">eggs/</div><div class=\"line\">parts/</div><div class=\"line\">var/</div><div class=\"line\">sdist/</div><div class=\"line\">develop-eggs/</div><div class=\"line\">.installed.cfg</div><div class=\"line\"></div><div class=\"line\"># Installer logs</div><div class=\"line\">pip-log.txt</div><div class=\"line\"></div><div class=\"line\"># Unit test / coverage reports</div><div class=\"line\">.coverage</div><div class=\"line\">.tox</div><div class=\"line\"></div><div class=\"line\">#Translations</div><div class=\"line\">*.mo</div><div class=\"line\"></div><div class=\"line\">#Mr Developer</div><div class=\"line\">.mr.developer.cfg</div><div class=\"line\"></div><div class=\"line\">#################</div><div class=\"line\">## idea</div><div class=\"line\">#################</div><div class=\"line\"></div><div class=\"line\">*.iml</div><div class=\"line\">.idea/</div><div class=\"line\"></div><div class=\"line\">#################</div><div class=\"line\">## maven</div><div class=\"line\">#################</div><div class=\"line\"></div><div class=\"line\">target/</div><div class=\"line\">*.war</div><div class=\"line\"></div><div class=\"line\">#################</div><div class=\"line\">## dev</div><div class=\"line\">#################</div><div class=\"line\">web/pt_zsyy-model/.checkstyle</div><div class=\"line\">dev/</div><div class=\"line\">web/pt_zsyy/.springWebflow</div><div class=\"line\">web_sql/database.properties</div></pre></td></tr></table></figure>\n<h2 id=\"3-提交-gitignore\"><a href=\"#3-提交-gitignore\" class=\"headerlink\" title=\"3. 提交.gitignore\"></a>3. 提交.gitignore</h2><h1 id=\"题外话\"><a href=\"#题外话\" class=\"headerlink\" title=\"题外话\"></a>题外话</h1><ul>\n<li><h2 id=\"使用-gitkeep\"><a href=\"#使用-gitkeep\" class=\"headerlink\" title=\"使用.gitkeep\"></a>使用.gitkeep</h2>Git会忽略空的文件夹。如果你想版本控制包括空文件夹，根据惯例会在空文件夹下放置.gitkeep文件。其实对文件名没有特定的要求。一旦一个空文件夹下有文件后，这个文件夹就会在版本控制范围内。</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"1-在根目录下新建一个文件-gitignore\"><a href=\"#1-在根目录下新建一个文件-gitignore\" class=\"headerlink\" title=\"1. 在根目录下新建一个文件.gitignore\"></a>1. 在根目录下新建一个文件.gitignore</h2><p>这里应该会提示<code>请键入文件名</code>，可找人要一份。或按以下操作解决</p>\n<pre><code>1. 在项目根目录下面创建`gitignore.txt`文件\n\n2. 把你需要排除的文件名保存到`gitignore.txt`文件\n\n3. 在项目根目录下面按住Shift键并右键然后选择`在此处打开命令窗口`\n\n4. 执行命令`ren gitignore.txt .gitignore`\n</code></pre><h2 id=\"2-拷入以下内容\"><a href=\"#2-拷入以下内容\" class=\"headerlink\" title=\"2. 拷入以下内容\"></a>2. 拷入以下内容</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div></pre></td><td class=\"code\"><pre><div class=\"line\">#################</div><div class=\"line\">## Eclipse</div><div class=\"line\">#################</div><div class=\"line\"></div><div class=\"line\">*.pydevproject</div><div class=\"line\">.project</div><div class=\"line\">.metadata</div><div class=\"line\">bin/</div><div class=\"line\">tmp/</div><div class=\"line\">*.tmp</div><div class=\"line\">*.bak</div><div class=\"line\">*.swp</div><div class=\"line\">*~.nib</div><div class=\"line\">local.properties</div><div class=\"line\">.classpath</div><div class=\"line\">.settings/</div><div class=\"line\">.loadpath</div><div class=\"line\"></div><div class=\"line\"># External tool builders</div><div class=\"line\">.externalToolBuilders/</div><div class=\"line\"></div><div class=\"line\"># Locally stored &quot;Eclipse launch configurations&quot;</div><div class=\"line\">*.launch</div><div class=\"line\"></div><div class=\"line\"># CDT-specific</div><div class=\"line\">.cproject</div><div class=\"line\"></div><div class=\"line\"># PDT-specific</div><div class=\"line\">.buildpath</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">#################</div><div class=\"line\">## Visual Studio</div><div class=\"line\">#################</div><div class=\"line\"></div><div class=\"line\">## Ignore Visual Studio temporary files, build results, and</div><div class=\"line\">## files generated by popular Visual Studio add-ons.</div><div class=\"line\"></div><div class=\"line\"># User-specific files</div><div class=\"line\">*.suo</div><div class=\"line\">*.user</div><div class=\"line\">*.sln.docstates</div><div class=\"line\"></div><div class=\"line\"># Build results</div><div class=\"line\"></div><div class=\"line\">[Dd]ebug/</div><div class=\"line\">[Rr]elease/</div><div class=\"line\">x64/</div><div class=\"line\">build/</div><div class=\"line\">[Bb]in/</div><div class=\"line\">[Oo]bj/</div><div class=\"line\"></div><div class=\"line\"># MSTest test Results</div><div class=\"line\">[Tt]est[Rr]esult*/</div><div class=\"line\">[Bb]uild[Ll]og.*</div><div class=\"line\"></div><div class=\"line\">*_i.c</div><div class=\"line\">*_p.c</div><div class=\"line\">*.ilk</div><div class=\"line\">*.meta</div><div class=\"line\">*.obj</div><div class=\"line\">*.pch</div><div class=\"line\">*.pdb</div><div class=\"line\">*.pgc</div><div class=\"line\">*.pgd</div><div class=\"line\">*.rsp</div><div class=\"line\">*.sbr</div><div class=\"line\">*.tlb</div><div class=\"line\">*.tli</div><div class=\"line\">*.tlh</div><div class=\"line\">*.tmp</div><div class=\"line\">*.tmp_proj</div><div class=\"line\">*.log</div><div class=\"line\">*.vspscc</div><div class=\"line\">*.vssscc</div><div class=\"line\">.builds</div><div class=\"line\">*.pidb</div><div class=\"line\">*.log</div><div class=\"line\">*.scc</div><div class=\"line\"></div><div class=\"line\"># Visual C++ cache files</div><div class=\"line\">ipch/</div><div class=\"line\">*.aps</div><div class=\"line\">*.ncb</div><div class=\"line\">*.opensdf</div><div class=\"line\">*.sdf</div><div class=\"line\">*.cachefile</div><div class=\"line\"></div><div class=\"line\"># Visual Studio profiler</div><div class=\"line\">*.psess</div><div class=\"line\">*.vsp</div><div class=\"line\">*.vspx</div><div class=\"line\"></div><div class=\"line\"># Guidance Automation Toolkit</div><div class=\"line\">*.gpState</div><div class=\"line\"></div><div class=\"line\"># ReSharper is a .NET coding add-in</div><div class=\"line\">_ReSharper*/</div><div class=\"line\">*.[Rr]e[Ss]harper</div><div class=\"line\"></div><div class=\"line\"># TeamCity is a build add-in</div><div class=\"line\">_TeamCity*</div><div class=\"line\"></div><div class=\"line\"># DotCover is a Code Coverage Tool</div><div class=\"line\">*.dotCover</div><div class=\"line\"></div><div class=\"line\"># NCrunch</div><div class=\"line\">*.ncrunch*</div><div class=\"line\">.*crunch*.local.xml</div><div class=\"line\"></div><div class=\"line\"># Installshield output folder</div><div class=\"line\">[Ee]xpress/</div><div class=\"line\"></div><div class=\"line\"># DocProject is a documentation generator add-in</div><div class=\"line\">DocProject/buildhelp/</div><div class=\"line\">DocProject/Help/*.HxT</div><div class=\"line\">DocProject/Help/*.HxC</div><div class=\"line\">DocProject/Help/*.hhc</div><div class=\"line\">DocProject/Help/*.hhk</div><div class=\"line\">DocProject/Help/*.hhp</div><div class=\"line\">DocProject/Help/Html2</div><div class=\"line\">DocProject/Help/html</div><div class=\"line\"></div><div class=\"line\"># Click-Once directory</div><div class=\"line\">publish/</div><div class=\"line\"></div><div class=\"line\"># Publish Web Output</div><div class=\"line\">*.Publish.xml</div><div class=\"line\">*.pubxml</div><div class=\"line\">*.publishproj</div><div class=\"line\"></div><div class=\"line\"># NuGet Packages Directory</div><div class=\"line\">## TODO: If you have NuGet Package Restore enabled, uncomment the next line</div><div class=\"line\">#packages/</div><div class=\"line\"></div><div class=\"line\"># Windows Azure Build Output</div><div class=\"line\">csx</div><div class=\"line\">*.build.csdef</div><div class=\"line\"></div><div class=\"line\"># Windows Store app package directory</div><div class=\"line\">AppPackages/</div><div class=\"line\"></div><div class=\"line\"># Others</div><div class=\"line\">sql/</div><div class=\"line\">*.Cache</div><div class=\"line\">ClientBin/</div><div class=\"line\">[Ss]tyle[Cc]op.*</div><div class=\"line\">~$*</div><div class=\"line\">*~</div><div class=\"line\">*.dbmdl</div><div class=\"line\">*.[Pp]ublish.xml</div><div class=\"line\">*.pfx</div><div class=\"line\">*.publishsettings</div><div class=\"line\"></div><div class=\"line\"># RIA/Silverlight projects</div><div class=\"line\">Generated_Code/</div><div class=\"line\"></div><div class=\"line\"># Backup &amp; report files from converting an old project file to a newer</div><div class=\"line\"># Visual Studio version. Backup files are not needed, because we have git ;-)</div><div class=\"line\">_UpgradeReport_Files/</div><div class=\"line\">Backup*/</div><div class=\"line\">UpgradeLog*.XML</div><div class=\"line\">UpgradeLog*.htm</div><div class=\"line\"></div><div class=\"line\"># SQL Server files</div><div class=\"line\">App_Data/*.mdf</div><div class=\"line\">App_Data/*.ldf</div><div class=\"line\"></div><div class=\"line\">#############</div><div class=\"line\">## Windows detritus</div><div class=\"line\">#############</div><div class=\"line\"></div><div class=\"line\"># Windows image file caches</div><div class=\"line\">Thumbs.db</div><div class=\"line\">ehthumbs.db</div><div class=\"line\"></div><div class=\"line\"># Folder config file</div><div class=\"line\">Desktop.ini</div><div class=\"line\"></div><div class=\"line\"># Recycle Bin used on file shares</div><div class=\"line\">$RECYCLE.BIN/</div><div class=\"line\"></div><div class=\"line\"># Mac crap</div><div class=\"line\">.DS_Store</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">#############</div><div class=\"line\">## Python</div><div class=\"line\">#############</div><div class=\"line\"></div><div class=\"line\">*.py[cod]</div><div class=\"line\"></div><div class=\"line\"># Packages</div><div class=\"line\">*.egg</div><div class=\"line\">*.egg-info</div><div class=\"line\">dist/</div><div class=\"line\">build/</div><div class=\"line\">eggs/</div><div class=\"line\">parts/</div><div class=\"line\">var/</div><div class=\"line\">sdist/</div><div class=\"line\">develop-eggs/</div><div class=\"line\">.installed.cfg</div><div class=\"line\"></div><div class=\"line\"># Installer logs</div><div class=\"line\">pip-log.txt</div><div class=\"line\"></div><div class=\"line\"># Unit test / coverage reports</div><div class=\"line\">.coverage</div><div class=\"line\">.tox</div><div class=\"line\"></div><div class=\"line\">#Translations</div><div class=\"line\">*.mo</div><div class=\"line\"></div><div class=\"line\">#Mr Developer</div><div class=\"line\">.mr.developer.cfg</div><div class=\"line\"></div><div class=\"line\">#################</div><div class=\"line\">## idea</div><div class=\"line\">#################</div><div class=\"line\"></div><div class=\"line\">*.iml</div><div class=\"line\">.idea/</div><div class=\"line\"></div><div class=\"line\">#################</div><div class=\"line\">## maven</div><div class=\"line\">#################</div><div class=\"line\"></div><div class=\"line\">target/</div><div class=\"line\">*.war</div><div class=\"line\"></div><div class=\"line\">#################</div><div class=\"line\">## dev</div><div class=\"line\">#################</div><div class=\"line\">web/pt_zsyy-model/.checkstyle</div><div class=\"line\">dev/</div><div class=\"line\">web/pt_zsyy/.springWebflow</div><div class=\"line\">web_sql/database.properties</div></pre></td></tr></table></figure>\n<h2 id=\"3-提交-gitignore\"><a href=\"#3-提交-gitignore\" class=\"headerlink\" title=\"3. 提交.gitignore\"></a>3. 提交.gitignore</h2><h1 id=\"题外话\"><a href=\"#题外话\" class=\"headerlink\" title=\"题外话\"></a>题外话</h1><ul>\n<li><h2 id=\"使用-gitkeep\"><a href=\"#使用-gitkeep\" class=\"headerlink\" title=\"使用.gitkeep\"></a>使用.gitkeep</h2>Git会忽略空的文件夹。如果你想版本控制包括空文件夹，根据惯例会在空文件夹下放置.gitkeep文件。其实对文件名没有特定的要求。一旦一个空文件夹下有文件后，这个文件夹就会在版本控制范围内。</li>\n</ul>\n"},{"title":"git在push的时候显示the remote end hung up的解决办法 long的解决办法","date":"2017-03-03T16:00:01.000Z","_content":"今天在家华数网push的时候，一会提示\n\n> fatal: Could not read from remote repository\n\n一会提示\n\n> The remote end hung up unexpectedly\n\n就是push不成功。开始还以为是家里电脑没配好github的公钥。\n\n但是可以pull成功的，排除这种可能。\n\n后来尝试只修改一点点文件，发现可以push成功。\n\n## 解决方法\n最后发现是华数网太坑了。。网速贼慢导致的push失败。。因为博客生成的静态文件太多，网速又慢，相当于git提交超时了。。略微设置一下就解决了这个问题了。\n\n在git bash里运行这两句命令即可。\n```\ngit config --global http.lowSpeedLimit 0\n\ngit config --global http.lowSpeedTime 999999\n```\n单位都是秒。","source":"_posts/git/git在push的时候显示the remote end hung up的解决办法.md","raw":"---\ntitle: git在push的时候显示the remote end hung up的解决办法 long的解决办法\ndate: 2017-03-04 00:00:01\ncategories: git\n---\n今天在家华数网push的时候，一会提示\n\n> fatal: Could not read from remote repository\n\n一会提示\n\n> The remote end hung up unexpectedly\n\n就是push不成功。开始还以为是家里电脑没配好github的公钥。\n\n但是可以pull成功的，排除这种可能。\n\n后来尝试只修改一点点文件，发现可以push成功。\n\n## 解决方法\n最后发现是华数网太坑了。。网速贼慢导致的push失败。。因为博客生成的静态文件太多，网速又慢，相当于git提交超时了。。略微设置一下就解决了这个问题了。\n\n在git bash里运行这两句命令即可。\n```\ngit config --global http.lowSpeedLimit 0\n\ngit config --global http.lowSpeedTime 999999\n```\n单位都是秒。","slug":"git/git在push的时候显示the remote end hung up的解决办法","published":1,"updated":"2017-03-06T01:08:42.295Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1qae48s0014c812rs2s2q6u","content":"<p>今天在家华数网push的时候，一会提示</p>\n<blockquote>\n<p>fatal: Could not read from remote repository</p>\n</blockquote>\n<p>一会提示</p>\n<blockquote>\n<p>The remote end hung up unexpectedly</p>\n</blockquote>\n<p>就是push不成功。开始还以为是家里电脑没配好github的公钥。</p>\n<p>但是可以pull成功的，排除这种可能。</p>\n<p>后来尝试只修改一点点文件，发现可以push成功。</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>最后发现是华数网太坑了。。网速贼慢导致的push失败。。因为博客生成的静态文件太多，网速又慢，相当于git提交超时了。。略微设置一下就解决了这个问题了。</p>\n<p>在git bash里运行这两句命令即可。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --global http.lowSpeedLimit 0</div><div class=\"line\"></div><div class=\"line\">git config --global http.lowSpeedTime 999999</div></pre></td></tr></table></figure></p>\n<p>单位都是秒。</p>\n","excerpt":"","more":"<p>今天在家华数网push的时候，一会提示</p>\n<blockquote>\n<p>fatal: Could not read from remote repository</p>\n</blockquote>\n<p>一会提示</p>\n<blockquote>\n<p>The remote end hung up unexpectedly</p>\n</blockquote>\n<p>就是push不成功。开始还以为是家里电脑没配好github的公钥。</p>\n<p>但是可以pull成功的，排除这种可能。</p>\n<p>后来尝试只修改一点点文件，发现可以push成功。</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>最后发现是华数网太坑了。。网速贼慢导致的push失败。。因为博客生成的静态文件太多，网速又慢，相当于git提交超时了。。略微设置一下就解决了这个问题了。</p>\n<p>在git bash里运行这两句命令即可。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --global http.lowSpeedLimit 0</div><div class=\"line\"></div><div class=\"line\">git config --global http.lowSpeedTime 999999</div></pre></td></tr></table></figure></p>\n<p>单位都是秒。</p>\n"},{"title":"重定向和转发的区别","date":"2017-03-07T03:34:47.000Z","_content":"\n说起重定向和转发，可能好多人的第一印象就是重定向的浏览器地址会变，而转发的不会变。下面说说为什么会这样。\n\n## 重定向\nTomcat7用的是servlet-api的3.0版本，文档如下\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-3-7/17711967-file_1488865978409_11899.png)\n\n查看源码可以知道，重定向的时候，服务端会向客户端发送一个302的状态码（用这个可以劫持URL），还有一个重定向的地址，然后客户端会请求这个重定向的地址。所以造成了浏览器的地址变化。\n\n而在重定向完的代码中，有个finally代码块，会清空request里的值。所以重定向是不能用上一次的request里的数据的。\n## 转发\n\n![](http://ok7wlv1ee.bkt.clouddn.com/17-3-7/73140436-file_1488866447608_13886.png)\n```\nrequest.getRequestDispatcher(\"/xx/xxx/xxx.jsp\").forward(request,response);\n```\n转发是直接在服务器完成的，所以转发以后是可以使用上一次的request里的数据的。当然在转发完成以后生成响应的时候也会清空request，但是已经使用好并返回客户端了，清空也无所谓了。\n\n## 区别\n1. 重定向是在客户端完成的，转发是在服务端完成的。\n2. 重定向会丢失request里的parameter和attribute，转发不会。\n3. 重定向相当于客户端请求了两次，而转发只请求了一次。","source":"_posts/Tomcat/重定向和转发的区别.md","raw":"---\ntitle: 重定向和转发的区别\ndate: 2017-03-07 11:34:47\ncategories: Tomcat\n---\n\n说起重定向和转发，可能好多人的第一印象就是重定向的浏览器地址会变，而转发的不会变。下面说说为什么会这样。\n\n## 重定向\nTomcat7用的是servlet-api的3.0版本，文档如下\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-3-7/17711967-file_1488865978409_11899.png)\n\n查看源码可以知道，重定向的时候，服务端会向客户端发送一个302的状态码（用这个可以劫持URL），还有一个重定向的地址，然后客户端会请求这个重定向的地址。所以造成了浏览器的地址变化。\n\n而在重定向完的代码中，有个finally代码块，会清空request里的值。所以重定向是不能用上一次的request里的数据的。\n## 转发\n\n![](http://ok7wlv1ee.bkt.clouddn.com/17-3-7/73140436-file_1488866447608_13886.png)\n```\nrequest.getRequestDispatcher(\"/xx/xxx/xxx.jsp\").forward(request,response);\n```\n转发是直接在服务器完成的，所以转发以后是可以使用上一次的request里的数据的。当然在转发完成以后生成响应的时候也会清空request，但是已经使用好并返回客户端了，清空也无所谓了。\n\n## 区别\n1. 重定向是在客户端完成的，转发是在服务端完成的。\n2. 重定向会丢失request里的parameter和attribute，转发不会。\n3. 重定向相当于客户端请求了两次，而转发只请求了一次。","slug":"Tomcat/重定向和转发的区别","published":1,"updated":"2017-03-07T07:03:31.908Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1qae48z0016c812uohytszb","content":"<p>说起重定向和转发，可能好多人的第一印象就是重定向的浏览器地址会变，而转发的不会变。下面说说为什么会这样。</p>\n<h2 id=\"重定向\"><a href=\"#重定向\" class=\"headerlink\" title=\"重定向\"></a>重定向</h2><p>Tomcat7用的是servlet-api的3.0版本，文档如下<br><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-3-7/17711967-file_1488865978409_11899.png\" alt=\"image\"></p>\n<p>查看源码可以知道，重定向的时候，服务端会向客户端发送一个302的状态码（用这个可以劫持URL），还有一个重定向的地址，然后客户端会请求这个重定向的地址。所以造成了浏览器的地址变化。</p>\n<p>而在重定向完的代码中，有个finally代码块，会清空request里的值。所以重定向是不能用上一次的request里的数据的。</p>\n<h2 id=\"转发\"><a href=\"#转发\" class=\"headerlink\" title=\"转发\"></a>转发</h2><p><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-3-7/73140436-file_1488866447608_13886.png\" alt=\"\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">request.getRequestDispatcher(&quot;/xx/xxx/xxx.jsp&quot;).forward(request,response);</div></pre></td></tr></table></figure></p>\n<p>转发是直接在服务器完成的，所以转发以后是可以使用上一次的request里的数据的。当然在转发完成以后生成响应的时候也会清空request，但是已经使用好并返回客户端了，清空也无所谓了。</p>\n<h2 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h2><ol>\n<li>重定向是在客户端完成的，转发是在服务端完成的。</li>\n<li>重定向会丢失request里的parameter和attribute，转发不会。</li>\n<li>重定向相当于客户端请求了两次，而转发只请求了一次。</li>\n</ol>\n","excerpt":"","more":"<p>说起重定向和转发，可能好多人的第一印象就是重定向的浏览器地址会变，而转发的不会变。下面说说为什么会这样。</p>\n<h2 id=\"重定向\"><a href=\"#重定向\" class=\"headerlink\" title=\"重定向\"></a>重定向</h2><p>Tomcat7用的是servlet-api的3.0版本，文档如下<br><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-3-7/17711967-file_1488865978409_11899.png\" alt=\"image\"></p>\n<p>查看源码可以知道，重定向的时候，服务端会向客户端发送一个302的状态码（用这个可以劫持URL），还有一个重定向的地址，然后客户端会请求这个重定向的地址。所以造成了浏览器的地址变化。</p>\n<p>而在重定向完的代码中，有个finally代码块，会清空request里的值。所以重定向是不能用上一次的request里的数据的。</p>\n<h2 id=\"转发\"><a href=\"#转发\" class=\"headerlink\" title=\"转发\"></a>转发</h2><p><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-3-7/73140436-file_1488866447608_13886.png\" alt=\"\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">request.getRequestDispatcher(&quot;/xx/xxx/xxx.jsp&quot;).forward(request,response);</div></pre></td></tr></table></figure></p>\n<p>转发是直接在服务器完成的，所以转发以后是可以使用上一次的request里的数据的。当然在转发完成以后生成响应的时候也会清空request，但是已经使用好并返回客户端了，清空也无所谓了。</p>\n<h2 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h2><ol>\n<li>重定向是在客户端完成的，转发是在服务端完成的。</li>\n<li>重定向会丢失request里的parameter和attribute，转发不会。</li>\n<li>重定向相当于客户端请求了两次，而转发只请求了一次。</li>\n</ol>\n"},{"title":"java数组复制的四种方式","date":"2017-02-28T10:42:47.000Z","_content":"\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-2-9/19026684-file_1486612180846_1715d.png)\n\n我测试出来的效率如图。\n\n但是clone方法和Arrays.copyOf谁快不好说，貌似和数据量也有关系。\n\n反正System.arrayCopy肯定是最快的，因为是native的方法。ArrayList里用的也是这个方法。\n\nArrays.copyOf底层用的其实也是System.arrayCopy\n\n**测试代码如下**\n\n```java\npublic class ArrayCopyTest {\n    private static String[] src\n            = {\"Aaaaaaaaaa\", \"Vvvvvvv\", \"Bbbb\", \"Cccc\", \"Dddd\", \"Eddeee\", \"FFFFFFffffffff\",\n            \"Aaaaaaaaaa\", \"Vvvvvvv\", \"Bbbb\", \"Cccc\", \"Dddd\", \"Eddeee\", \"FFFFFFffffffff\",\n            \"Aaaaaaaaaa\", \"Vvvvvvv\", \"Bbbb\", \"Cccc\", \"Dddd\", \"Eddeee\", \"FFFFFFffffffff\",\n            \"Aaaaaaaaaa\", \"Vvvvvvv\", \"Bbbb\", \"Cccc\", \"Dddd\", \"Eddeee\", \"FFFFFFffffffff\",\n            \"Aaaaaaaaaa\", \"Vvvvvvv\", \"Bbbb\", \"Cccc\", \"Dddd\", \"Eddeee\", \"FFFFFFffffffff\",\n            \"Aaaaaaaaaa\", \"Vvvvvvv\", \"Bbbb\", \"Cccc\", \"Dddd\", \"Eddeee\", \"FFFFFFffffffff\",\n            \"Aaaaaaaaaa\", \"Vvvvvvv\", \"Bbbb\", \"Cccc\", \"Dddd\", \"Eddeee\", \"FFFFFFffffffff\",\n            \"Aaaaaaaaaa\", \"Vvvvvvv\", \"Bbbb\", \"Cccc\", \"Dddd\", \"Eddeee\", \"FFFFFFffffffff\",\n            \"Aaaaaaaaaa\", \"Vvvvvvv\", \"Bbbb\", \"Cccc\", \"Dddd\", \"Eddeee\", \"FFFFFFffffffff\",\n            \"Aaaaaaaaaa\", \"Vvvvvvv\", \"Bbbb\", \"Cccc\", \"Dddd\", \"Eddeee\", \"FFFFFFffffffff\"};\n\n    private static String[] dst;\n\n    public static void main(String[] args) {\n        int num = 5000000;\n        System.out.println(forCopy(num));\n        System.out.println(cloneCopy(num));\n        System.out.println(systemJNICopy(num));\n        System.out.println(ArraysToolCopy(num));\n    }\n\n    private static long forCopy(int num) {\n        long start = System.currentTimeMillis();\n        while (num-- > 0) {\n            int size = src.length;\n            dst = new String[size];\n            for (int i = 0; i < size; i++) {\n                dst[i] = src[i];\n            }\n        }\n        long end = System.currentTimeMillis();\n        return end - start;\n    }\n\n    private static long cloneCopy(int num) {\n        long start = System.currentTimeMillis();\n        while (num-- > 0) {\n            dst = src.clone();\n        }\n        long end = System.currentTimeMillis();\n        return end - start;\n    }\n\n    private static long systemJNICopy(int num) {\n        long start = System.currentTimeMillis();\n        while (num-- > 0) {\n            System.arraycopy(src, 0, dst, 0, src.length);\n        }\n        long end = System.currentTimeMillis();\n        return end - start;\n    }\n\n    private static long ArraysToolCopy(int num) {\n        long start = System.currentTimeMillis();\n        while (num-- > 0) {\n            dst = Arrays.copyOf(src, src.length);\n        }\n        long end = System.currentTimeMillis();\n        return end - start;\n    }\n}\n```","source":"_posts/java基础/java数组复制的四种方式.md","raw":"---\ntitle: java数组复制的四种方式\ndate: 2017-02-28 18:42:47\ncategories: Java基础\n---\n\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-2-9/19026684-file_1486612180846_1715d.png)\n\n我测试出来的效率如图。\n\n但是clone方法和Arrays.copyOf谁快不好说，貌似和数据量也有关系。\n\n反正System.arrayCopy肯定是最快的，因为是native的方法。ArrayList里用的也是这个方法。\n\nArrays.copyOf底层用的其实也是System.arrayCopy\n\n**测试代码如下**\n\n```java\npublic class ArrayCopyTest {\n    private static String[] src\n            = {\"Aaaaaaaaaa\", \"Vvvvvvv\", \"Bbbb\", \"Cccc\", \"Dddd\", \"Eddeee\", \"FFFFFFffffffff\",\n            \"Aaaaaaaaaa\", \"Vvvvvvv\", \"Bbbb\", \"Cccc\", \"Dddd\", \"Eddeee\", \"FFFFFFffffffff\",\n            \"Aaaaaaaaaa\", \"Vvvvvvv\", \"Bbbb\", \"Cccc\", \"Dddd\", \"Eddeee\", \"FFFFFFffffffff\",\n            \"Aaaaaaaaaa\", \"Vvvvvvv\", \"Bbbb\", \"Cccc\", \"Dddd\", \"Eddeee\", \"FFFFFFffffffff\",\n            \"Aaaaaaaaaa\", \"Vvvvvvv\", \"Bbbb\", \"Cccc\", \"Dddd\", \"Eddeee\", \"FFFFFFffffffff\",\n            \"Aaaaaaaaaa\", \"Vvvvvvv\", \"Bbbb\", \"Cccc\", \"Dddd\", \"Eddeee\", \"FFFFFFffffffff\",\n            \"Aaaaaaaaaa\", \"Vvvvvvv\", \"Bbbb\", \"Cccc\", \"Dddd\", \"Eddeee\", \"FFFFFFffffffff\",\n            \"Aaaaaaaaaa\", \"Vvvvvvv\", \"Bbbb\", \"Cccc\", \"Dddd\", \"Eddeee\", \"FFFFFFffffffff\",\n            \"Aaaaaaaaaa\", \"Vvvvvvv\", \"Bbbb\", \"Cccc\", \"Dddd\", \"Eddeee\", \"FFFFFFffffffff\",\n            \"Aaaaaaaaaa\", \"Vvvvvvv\", \"Bbbb\", \"Cccc\", \"Dddd\", \"Eddeee\", \"FFFFFFffffffff\"};\n\n    private static String[] dst;\n\n    public static void main(String[] args) {\n        int num = 5000000;\n        System.out.println(forCopy(num));\n        System.out.println(cloneCopy(num));\n        System.out.println(systemJNICopy(num));\n        System.out.println(ArraysToolCopy(num));\n    }\n\n    private static long forCopy(int num) {\n        long start = System.currentTimeMillis();\n        while (num-- > 0) {\n            int size = src.length;\n            dst = new String[size];\n            for (int i = 0; i < size; i++) {\n                dst[i] = src[i];\n            }\n        }\n        long end = System.currentTimeMillis();\n        return end - start;\n    }\n\n    private static long cloneCopy(int num) {\n        long start = System.currentTimeMillis();\n        while (num-- > 0) {\n            dst = src.clone();\n        }\n        long end = System.currentTimeMillis();\n        return end - start;\n    }\n\n    private static long systemJNICopy(int num) {\n        long start = System.currentTimeMillis();\n        while (num-- > 0) {\n            System.arraycopy(src, 0, dst, 0, src.length);\n        }\n        long end = System.currentTimeMillis();\n        return end - start;\n    }\n\n    private static long ArraysToolCopy(int num) {\n        long start = System.currentTimeMillis();\n        while (num-- > 0) {\n            dst = Arrays.copyOf(src, src.length);\n        }\n        long end = System.currentTimeMillis();\n        return end - start;\n    }\n}\n```","slug":"java基础/java数组复制的四种方式","published":1,"updated":"2017-03-01T06:22:51.399Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1qae4940018c812j8f55xou","content":"<p><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-2-9/19026684-file_1486612180846_1715d.png\" alt=\"image\"></p>\n<p>我测试出来的效率如图。</p>\n<p>但是clone方法和Arrays.copyOf谁快不好说，貌似和数据量也有关系。</p>\n<p>反正System.arrayCopy肯定是最快的，因为是native的方法。ArrayList里用的也是这个方法。</p>\n<p>Arrays.copyOf底层用的其实也是System.arrayCopy</p>\n<p><strong>测试代码如下</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayCopyTest</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String[] src</div><div class=\"line\">            = &#123;<span class=\"string\">\"Aaaaaaaaaa\"</span>, <span class=\"string\">\"Vvvvvvv\"</span>, <span class=\"string\">\"Bbbb\"</span>, <span class=\"string\">\"Cccc\"</span>, <span class=\"string\">\"Dddd\"</span>, <span class=\"string\">\"Eddeee\"</span>, <span class=\"string\">\"FFFFFFffffffff\"</span>,</div><div class=\"line\">            <span class=\"string\">\"Aaaaaaaaaa\"</span>, <span class=\"string\">\"Vvvvvvv\"</span>, <span class=\"string\">\"Bbbb\"</span>, <span class=\"string\">\"Cccc\"</span>, <span class=\"string\">\"Dddd\"</span>, <span class=\"string\">\"Eddeee\"</span>, <span class=\"string\">\"FFFFFFffffffff\"</span>,</div><div class=\"line\">            <span class=\"string\">\"Aaaaaaaaaa\"</span>, <span class=\"string\">\"Vvvvvvv\"</span>, <span class=\"string\">\"Bbbb\"</span>, <span class=\"string\">\"Cccc\"</span>, <span class=\"string\">\"Dddd\"</span>, <span class=\"string\">\"Eddeee\"</span>, <span class=\"string\">\"FFFFFFffffffff\"</span>,</div><div class=\"line\">            <span class=\"string\">\"Aaaaaaaaaa\"</span>, <span class=\"string\">\"Vvvvvvv\"</span>, <span class=\"string\">\"Bbbb\"</span>, <span class=\"string\">\"Cccc\"</span>, <span class=\"string\">\"Dddd\"</span>, <span class=\"string\">\"Eddeee\"</span>, <span class=\"string\">\"FFFFFFffffffff\"</span>,</div><div class=\"line\">            <span class=\"string\">\"Aaaaaaaaaa\"</span>, <span class=\"string\">\"Vvvvvvv\"</span>, <span class=\"string\">\"Bbbb\"</span>, <span class=\"string\">\"Cccc\"</span>, <span class=\"string\">\"Dddd\"</span>, <span class=\"string\">\"Eddeee\"</span>, <span class=\"string\">\"FFFFFFffffffff\"</span>,</div><div class=\"line\">            <span class=\"string\">\"Aaaaaaaaaa\"</span>, <span class=\"string\">\"Vvvvvvv\"</span>, <span class=\"string\">\"Bbbb\"</span>, <span class=\"string\">\"Cccc\"</span>, <span class=\"string\">\"Dddd\"</span>, <span class=\"string\">\"Eddeee\"</span>, <span class=\"string\">\"FFFFFFffffffff\"</span>,</div><div class=\"line\">            <span class=\"string\">\"Aaaaaaaaaa\"</span>, <span class=\"string\">\"Vvvvvvv\"</span>, <span class=\"string\">\"Bbbb\"</span>, <span class=\"string\">\"Cccc\"</span>, <span class=\"string\">\"Dddd\"</span>, <span class=\"string\">\"Eddeee\"</span>, <span class=\"string\">\"FFFFFFffffffff\"</span>,</div><div class=\"line\">            <span class=\"string\">\"Aaaaaaaaaa\"</span>, <span class=\"string\">\"Vvvvvvv\"</span>, <span class=\"string\">\"Bbbb\"</span>, <span class=\"string\">\"Cccc\"</span>, <span class=\"string\">\"Dddd\"</span>, <span class=\"string\">\"Eddeee\"</span>, <span class=\"string\">\"FFFFFFffffffff\"</span>,</div><div class=\"line\">            <span class=\"string\">\"Aaaaaaaaaa\"</span>, <span class=\"string\">\"Vvvvvvv\"</span>, <span class=\"string\">\"Bbbb\"</span>, <span class=\"string\">\"Cccc\"</span>, <span class=\"string\">\"Dddd\"</span>, <span class=\"string\">\"Eddeee\"</span>, <span class=\"string\">\"FFFFFFffffffff\"</span>,</div><div class=\"line\">            <span class=\"string\">\"Aaaaaaaaaa\"</span>, <span class=\"string\">\"Vvvvvvv\"</span>, <span class=\"string\">\"Bbbb\"</span>, <span class=\"string\">\"Cccc\"</span>, <span class=\"string\">\"Dddd\"</span>, <span class=\"string\">\"Eddeee\"</span>, <span class=\"string\">\"FFFFFFffffffff\"</span>&#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String[] dst;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> num = <span class=\"number\">5000000</span>;</div><div class=\"line\">        System.out.println(forCopy(num));</div><div class=\"line\">        System.out.println(cloneCopy(num));</div><div class=\"line\">        System.out.println(systemJNICopy(num));</div><div class=\"line\">        System.out.println(ArraysToolCopy(num));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">forCopy</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">long</span> start = System.currentTimeMillis();</div><div class=\"line\">        <span class=\"keyword\">while</span> (num-- &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> size = src.length;</div><div class=\"line\">            dst = <span class=\"keyword\">new</span> String[size];</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</div><div class=\"line\">                dst[i] = src[i];</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">long</span> end = System.currentTimeMillis();</div><div class=\"line\">        <span class=\"keyword\">return</span> end - start;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">cloneCopy</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">long</span> start = System.currentTimeMillis();</div><div class=\"line\">        <span class=\"keyword\">while</span> (num-- &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            dst = src.clone();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">long</span> end = System.currentTimeMillis();</div><div class=\"line\">        <span class=\"keyword\">return</span> end - start;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">systemJNICopy</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">long</span> start = System.currentTimeMillis();</div><div class=\"line\">        <span class=\"keyword\">while</span> (num-- &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            System.arraycopy(src, <span class=\"number\">0</span>, dst, <span class=\"number\">0</span>, src.length);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">long</span> end = System.currentTimeMillis();</div><div class=\"line\">        <span class=\"keyword\">return</span> end - start;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">ArraysToolCopy</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">long</span> start = System.currentTimeMillis();</div><div class=\"line\">        <span class=\"keyword\">while</span> (num-- &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            dst = Arrays.copyOf(src, src.length);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">long</span> end = System.currentTimeMillis();</div><div class=\"line\">        <span class=\"keyword\">return</span> end - start;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"","more":"<p><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-2-9/19026684-file_1486612180846_1715d.png\" alt=\"image\"></p>\n<p>我测试出来的效率如图。</p>\n<p>但是clone方法和Arrays.copyOf谁快不好说，貌似和数据量也有关系。</p>\n<p>反正System.arrayCopy肯定是最快的，因为是native的方法。ArrayList里用的也是这个方法。</p>\n<p>Arrays.copyOf底层用的其实也是System.arrayCopy</p>\n<p><strong>测试代码如下</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayCopyTest</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String[] src</div><div class=\"line\">            = &#123;<span class=\"string\">\"Aaaaaaaaaa\"</span>, <span class=\"string\">\"Vvvvvvv\"</span>, <span class=\"string\">\"Bbbb\"</span>, <span class=\"string\">\"Cccc\"</span>, <span class=\"string\">\"Dddd\"</span>, <span class=\"string\">\"Eddeee\"</span>, <span class=\"string\">\"FFFFFFffffffff\"</span>,</div><div class=\"line\">            <span class=\"string\">\"Aaaaaaaaaa\"</span>, <span class=\"string\">\"Vvvvvvv\"</span>, <span class=\"string\">\"Bbbb\"</span>, <span class=\"string\">\"Cccc\"</span>, <span class=\"string\">\"Dddd\"</span>, <span class=\"string\">\"Eddeee\"</span>, <span class=\"string\">\"FFFFFFffffffff\"</span>,</div><div class=\"line\">            <span class=\"string\">\"Aaaaaaaaaa\"</span>, <span class=\"string\">\"Vvvvvvv\"</span>, <span class=\"string\">\"Bbbb\"</span>, <span class=\"string\">\"Cccc\"</span>, <span class=\"string\">\"Dddd\"</span>, <span class=\"string\">\"Eddeee\"</span>, <span class=\"string\">\"FFFFFFffffffff\"</span>,</div><div class=\"line\">            <span class=\"string\">\"Aaaaaaaaaa\"</span>, <span class=\"string\">\"Vvvvvvv\"</span>, <span class=\"string\">\"Bbbb\"</span>, <span class=\"string\">\"Cccc\"</span>, <span class=\"string\">\"Dddd\"</span>, <span class=\"string\">\"Eddeee\"</span>, <span class=\"string\">\"FFFFFFffffffff\"</span>,</div><div class=\"line\">            <span class=\"string\">\"Aaaaaaaaaa\"</span>, <span class=\"string\">\"Vvvvvvv\"</span>, <span class=\"string\">\"Bbbb\"</span>, <span class=\"string\">\"Cccc\"</span>, <span class=\"string\">\"Dddd\"</span>, <span class=\"string\">\"Eddeee\"</span>, <span class=\"string\">\"FFFFFFffffffff\"</span>,</div><div class=\"line\">            <span class=\"string\">\"Aaaaaaaaaa\"</span>, <span class=\"string\">\"Vvvvvvv\"</span>, <span class=\"string\">\"Bbbb\"</span>, <span class=\"string\">\"Cccc\"</span>, <span class=\"string\">\"Dddd\"</span>, <span class=\"string\">\"Eddeee\"</span>, <span class=\"string\">\"FFFFFFffffffff\"</span>,</div><div class=\"line\">            <span class=\"string\">\"Aaaaaaaaaa\"</span>, <span class=\"string\">\"Vvvvvvv\"</span>, <span class=\"string\">\"Bbbb\"</span>, <span class=\"string\">\"Cccc\"</span>, <span class=\"string\">\"Dddd\"</span>, <span class=\"string\">\"Eddeee\"</span>, <span class=\"string\">\"FFFFFFffffffff\"</span>,</div><div class=\"line\">            <span class=\"string\">\"Aaaaaaaaaa\"</span>, <span class=\"string\">\"Vvvvvvv\"</span>, <span class=\"string\">\"Bbbb\"</span>, <span class=\"string\">\"Cccc\"</span>, <span class=\"string\">\"Dddd\"</span>, <span class=\"string\">\"Eddeee\"</span>, <span class=\"string\">\"FFFFFFffffffff\"</span>,</div><div class=\"line\">            <span class=\"string\">\"Aaaaaaaaaa\"</span>, <span class=\"string\">\"Vvvvvvv\"</span>, <span class=\"string\">\"Bbbb\"</span>, <span class=\"string\">\"Cccc\"</span>, <span class=\"string\">\"Dddd\"</span>, <span class=\"string\">\"Eddeee\"</span>, <span class=\"string\">\"FFFFFFffffffff\"</span>,</div><div class=\"line\">            <span class=\"string\">\"Aaaaaaaaaa\"</span>, <span class=\"string\">\"Vvvvvvv\"</span>, <span class=\"string\">\"Bbbb\"</span>, <span class=\"string\">\"Cccc\"</span>, <span class=\"string\">\"Dddd\"</span>, <span class=\"string\">\"Eddeee\"</span>, <span class=\"string\">\"FFFFFFffffffff\"</span>&#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String[] dst;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> num = <span class=\"number\">5000000</span>;</div><div class=\"line\">        System.out.println(forCopy(num));</div><div class=\"line\">        System.out.println(cloneCopy(num));</div><div class=\"line\">        System.out.println(systemJNICopy(num));</div><div class=\"line\">        System.out.println(ArraysToolCopy(num));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">forCopy</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">long</span> start = System.currentTimeMillis();</div><div class=\"line\">        <span class=\"keyword\">while</span> (num-- &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> size = src.length;</div><div class=\"line\">            dst = <span class=\"keyword\">new</span> String[size];</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</div><div class=\"line\">                dst[i] = src[i];</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">long</span> end = System.currentTimeMillis();</div><div class=\"line\">        <span class=\"keyword\">return</span> end - start;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">cloneCopy</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">long</span> start = System.currentTimeMillis();</div><div class=\"line\">        <span class=\"keyword\">while</span> (num-- &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            dst = src.clone();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">long</span> end = System.currentTimeMillis();</div><div class=\"line\">        <span class=\"keyword\">return</span> end - start;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">systemJNICopy</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">long</span> start = System.currentTimeMillis();</div><div class=\"line\">        <span class=\"keyword\">while</span> (num-- &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            System.arraycopy(src, <span class=\"number\">0</span>, dst, <span class=\"number\">0</span>, src.length);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">long</span> end = System.currentTimeMillis();</div><div class=\"line\">        <span class=\"keyword\">return</span> end - start;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">ArraysToolCopy</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">long</span> start = System.currentTimeMillis();</div><div class=\"line\">        <span class=\"keyword\">while</span> (num-- &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            dst = Arrays.copyOf(src, src.length);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">long</span> end = System.currentTimeMillis();</div><div class=\"line\">        <span class=\"keyword\">return</span> end - start;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"final的用法","date":"2017-02-28T10:42:47.000Z","_content":"\n用final可以修饰类，方法，变量。分别表示类不可被继承，方法不可重写，变量不可变（不可变指的是引用地址不可变，内部的值还是可以变的）。\n\n# 代码实例\n### final修饰的成员变量\n被final修饰的类变量就变成了常量，必须要进行初始化，有两次机会可以初始化，一是声明的时候直接初始化，或者在构造函数里初始化。\n```java\npublic class Test008 {\n\n    final int PI;  //编译报错，未初始化\n\n    public Test008(){\n        \n    }\n\n    public Test008(int i){\n        PI = i;\n    }\n\n    public static void main(String[] args) {\n\n    }\n}\n```\n这段代码是有编译报错的，因为new Test008()的时候，PI是没有被初始化的。所以要嘛在无参构造里也加上初始化，要嘛删掉这个无参构造。\n\n### final修饰的局部变量\n```java\npublic class Test008 {\n    public static void main(String[] args) {\n        final int i;\n        System.out.println(i);  //编译报错，未初始化\n    }\n}\n```\n局部变量和成员变量不一样在，可以声明成final且不初始化，但是在使用的地方会编译报错。\n\n### final定义的基本类型的运算\nJava表达式转型规则由低到高转换：\n\n1. 所有的byte,short,char型的值将被提升为int型；\n2. 如果有一个操作数是long型，计算结果是long型；\n3. 如果有一个操作数是float型，计算结果是float型；\n4. 如果有一个操作数是double型，计算结果是double型；\n5. 被final修饰的两个常量运算会直接在编译期间获得值；\n\n####  例一\n```java\npublic class Test {\n    public static void main(String... args) {\n        byte b1 = 1, b2 = 2, b3;\n        b3 = (byte) (b1 + b2);  //需要强转，因为计算结果为int\n    }\n}\n```\n反编译结果\n```\n  public static void main(java.lang.String[]);\n    Code:\n       0: iconst_1   //整数1入栈，操作数栈【1】\n       1: istore_1   //弹出栈顶元素，赋值给索引为1的变量，操作数栈【】\n       2: iconst_2   //整数1入栈，操作数栈【2】\n       3: istore_2   //弹出栈顶元素，赋值给索引为2的变量，操作数栈【】\n       4: iload_1    //索引为1的变量的值入栈，操作数栈【1】\n       5: iload_2    //索引为2的变量的值入栈，操作数栈【1|2】\n       6: iadd       //栈顶的两个元素相加，操作数栈【3】\n       7: i2b        //把int型转成byte型，操作数栈【3】\n       8: istore_3   //弹出栈顶元素，赋值给索引为3的变量，操作数栈【】\n       9: return\n\n```\n\n####  例二\n```java\npublic class Test {\n    public static void main(String... args) {\n        final byte b1 = 1, b2 = 2;\n        byte b3 = b1 + b2;  //不需要强转，因为这就是byte b3 = 3;\n    }\n}\n```\n反编译结果\n```\n  public static void main(java.lang.String[]);\n    Code:\n       0: iconst_1 //将一个int型常量值推送至栈顶，操作数栈【1】\n       1: istore_1 //弹出栈顶元素，赋值给索引为1的变量，操作数栈【】\n       2: iconst_2 //将一个int型常量值推送至栈顶，操作数栈【2】\n       3: istore_2 //弹出栈顶元素，赋值给索引为2的变量，操作数栈【】\n       4: iconst_3 //将一个int型常量值推送至栈顶，操作数栈【3】\n       5: istore_3 //弹出栈顶元素，赋值给索引为3的变量，操作数栈【】\n       6: return\n\n```\n\n####  例三\n```java\npublic class Test {\n    public static void main(String... args) {\n        final byte b1 = 127, b2 = 3;\n        byte b3 = (byte) (b1 + b2);  //需要强转，因为这就是byte b3 = 130;这是不合法的\n    }\n}\n```\n反编译结果\n```\n  public static void main(java.lang.String[]);\n    Code:\n       0: bipush        127  //将一个byte型常量值推送至栈顶，操作数栈【127】\n       2: istore_1           //弹出栈顶元素，赋值给索引为1的变量，操作数栈【】\n       3: iconst_3           //将一个int型常量值推送至栈顶，操作数栈【3】\n       4: istore_2           //弹出栈顶元素，赋值给索引为2的变量，操作数栈【】\n       5: bipush        -126 //将一个byte型常量值推送至栈顶，操作数栈【-126】\n       7: istore_3           //弹出栈顶元素，赋值给索引为3的变量，操作数栈【】\n       8: return\n\n```\n这里为什么是bipush呢？因为-1 ~ 5使用iconst_m1 ~ iconst_5来入栈的。\n\n#### 例四\n```java\npublic class Test0 {\n    public static void main(String[] args) {\n        final byte b1 = 2;\n        byte b2 = 3;\n        byte b3 = (byte) (b1 + b2);  //需要强转\n    }\n}\n```\n\n```\n  public static void main(java.lang.String[]);\n    Code:\n       0: iconst_2 //将一个int型常量值推送至栈顶，操作数栈【2】\n       1: istore_1 //弹出栈顶元素，赋值给索引为1的变量，操作数栈【】\n       2: iconst_3 //将一个int型常量值推送至栈顶，操作数栈【3】\n       3: istore_2 //弹出栈顶元素，赋值给索引为2的变量，操作数栈【】\n       4: iconst_2 //将一个int型常量值推送至栈顶，操作数栈【2】\n       5: iload_2  //索引为1的变量的值入栈，操作数栈【2|3】\n       6: iadd     //栈顶的两个元素相加，操作数栈【5】\n       7: i2b      //把int型转成byte型，操作数栈【5】\n       8: istore_3 //弹出栈顶元素，赋值给索引为3的变量，操作数栈【】\n       9: return\n```\n\n可以发现，例二和例三少了一个iadd的过程，final直接在编译阶段就计算出来了。\n\n从例四可以看出，一个final类型和非final类型的数相加，final类的数是从常量池里取了以后压入栈的，而非final类的数是从变量里load了以后压入栈的。\n\n#### 例五\n```java\npublic class Test {\n    public static void main(String[] args) {\n        int i = 10;\n        double d = 7.0;\n        float f = (float) (i % d);\n        System.out.println(f);\n    }\n}\n```\n反编译后\n```\n  public static void main(java.lang.String[]);\n    Code:\n       0: bipush        10\n       2: istore_1\n       3: ldc2_w        #2                  // double 7.0d  //将long或double型常量值从常量池中推送至栈顶（宽索引）\n       6: dstore_2\n       7: iload_1\n       8: i2d       //栈顶int值强转double值，并且结果进栈\n       9: dload_2\n      10: drem      //栈顶两double型数值作取模运算，并且结果进栈\n      11: d2f       //栈顶double值强转float值，并且结果进栈\n      12: fstore        4  //这里的4指的是第四个变量，fstore_1指的是第二个变量。\n      14: getstatic     #4                  // Field java/lang/System.out:Ljava/io/PrintStream;\n      17: fload         4\n      19: invokevirtual #5                  // Method java/io/PrintStream.println:(F)V\n      22: return\n}\n```\n可以看到，运算的时候，把int转成了double的，符合了小转大的规则；","source":"_posts/java基础/final的用法.md","raw":"---\ntitle: final的用法\ndate: 2017-02-28 18:42:47\ncategories: Java基础\n---\n\n用final可以修饰类，方法，变量。分别表示类不可被继承，方法不可重写，变量不可变（不可变指的是引用地址不可变，内部的值还是可以变的）。\n\n# 代码实例\n### final修饰的成员变量\n被final修饰的类变量就变成了常量，必须要进行初始化，有两次机会可以初始化，一是声明的时候直接初始化，或者在构造函数里初始化。\n```java\npublic class Test008 {\n\n    final int PI;  //编译报错，未初始化\n\n    public Test008(){\n        \n    }\n\n    public Test008(int i){\n        PI = i;\n    }\n\n    public static void main(String[] args) {\n\n    }\n}\n```\n这段代码是有编译报错的，因为new Test008()的时候，PI是没有被初始化的。所以要嘛在无参构造里也加上初始化，要嘛删掉这个无参构造。\n\n### final修饰的局部变量\n```java\npublic class Test008 {\n    public static void main(String[] args) {\n        final int i;\n        System.out.println(i);  //编译报错，未初始化\n    }\n}\n```\n局部变量和成员变量不一样在，可以声明成final且不初始化，但是在使用的地方会编译报错。\n\n### final定义的基本类型的运算\nJava表达式转型规则由低到高转换：\n\n1. 所有的byte,short,char型的值将被提升为int型；\n2. 如果有一个操作数是long型，计算结果是long型；\n3. 如果有一个操作数是float型，计算结果是float型；\n4. 如果有一个操作数是double型，计算结果是double型；\n5. 被final修饰的两个常量运算会直接在编译期间获得值；\n\n####  例一\n```java\npublic class Test {\n    public static void main(String... args) {\n        byte b1 = 1, b2 = 2, b3;\n        b3 = (byte) (b1 + b2);  //需要强转，因为计算结果为int\n    }\n}\n```\n反编译结果\n```\n  public static void main(java.lang.String[]);\n    Code:\n       0: iconst_1   //整数1入栈，操作数栈【1】\n       1: istore_1   //弹出栈顶元素，赋值给索引为1的变量，操作数栈【】\n       2: iconst_2   //整数1入栈，操作数栈【2】\n       3: istore_2   //弹出栈顶元素，赋值给索引为2的变量，操作数栈【】\n       4: iload_1    //索引为1的变量的值入栈，操作数栈【1】\n       5: iload_2    //索引为2的变量的值入栈，操作数栈【1|2】\n       6: iadd       //栈顶的两个元素相加，操作数栈【3】\n       7: i2b        //把int型转成byte型，操作数栈【3】\n       8: istore_3   //弹出栈顶元素，赋值给索引为3的变量，操作数栈【】\n       9: return\n\n```\n\n####  例二\n```java\npublic class Test {\n    public static void main(String... args) {\n        final byte b1 = 1, b2 = 2;\n        byte b3 = b1 + b2;  //不需要强转，因为这就是byte b3 = 3;\n    }\n}\n```\n反编译结果\n```\n  public static void main(java.lang.String[]);\n    Code:\n       0: iconst_1 //将一个int型常量值推送至栈顶，操作数栈【1】\n       1: istore_1 //弹出栈顶元素，赋值给索引为1的变量，操作数栈【】\n       2: iconst_2 //将一个int型常量值推送至栈顶，操作数栈【2】\n       3: istore_2 //弹出栈顶元素，赋值给索引为2的变量，操作数栈【】\n       4: iconst_3 //将一个int型常量值推送至栈顶，操作数栈【3】\n       5: istore_3 //弹出栈顶元素，赋值给索引为3的变量，操作数栈【】\n       6: return\n\n```\n\n####  例三\n```java\npublic class Test {\n    public static void main(String... args) {\n        final byte b1 = 127, b2 = 3;\n        byte b3 = (byte) (b1 + b2);  //需要强转，因为这就是byte b3 = 130;这是不合法的\n    }\n}\n```\n反编译结果\n```\n  public static void main(java.lang.String[]);\n    Code:\n       0: bipush        127  //将一个byte型常量值推送至栈顶，操作数栈【127】\n       2: istore_1           //弹出栈顶元素，赋值给索引为1的变量，操作数栈【】\n       3: iconst_3           //将一个int型常量值推送至栈顶，操作数栈【3】\n       4: istore_2           //弹出栈顶元素，赋值给索引为2的变量，操作数栈【】\n       5: bipush        -126 //将一个byte型常量值推送至栈顶，操作数栈【-126】\n       7: istore_3           //弹出栈顶元素，赋值给索引为3的变量，操作数栈【】\n       8: return\n\n```\n这里为什么是bipush呢？因为-1 ~ 5使用iconst_m1 ~ iconst_5来入栈的。\n\n#### 例四\n```java\npublic class Test0 {\n    public static void main(String[] args) {\n        final byte b1 = 2;\n        byte b2 = 3;\n        byte b3 = (byte) (b1 + b2);  //需要强转\n    }\n}\n```\n\n```\n  public static void main(java.lang.String[]);\n    Code:\n       0: iconst_2 //将一个int型常量值推送至栈顶，操作数栈【2】\n       1: istore_1 //弹出栈顶元素，赋值给索引为1的变量，操作数栈【】\n       2: iconst_3 //将一个int型常量值推送至栈顶，操作数栈【3】\n       3: istore_2 //弹出栈顶元素，赋值给索引为2的变量，操作数栈【】\n       4: iconst_2 //将一个int型常量值推送至栈顶，操作数栈【2】\n       5: iload_2  //索引为1的变量的值入栈，操作数栈【2|3】\n       6: iadd     //栈顶的两个元素相加，操作数栈【5】\n       7: i2b      //把int型转成byte型，操作数栈【5】\n       8: istore_3 //弹出栈顶元素，赋值给索引为3的变量，操作数栈【】\n       9: return\n```\n\n可以发现，例二和例三少了一个iadd的过程，final直接在编译阶段就计算出来了。\n\n从例四可以看出，一个final类型和非final类型的数相加，final类的数是从常量池里取了以后压入栈的，而非final类的数是从变量里load了以后压入栈的。\n\n#### 例五\n```java\npublic class Test {\n    public static void main(String[] args) {\n        int i = 10;\n        double d = 7.0;\n        float f = (float) (i % d);\n        System.out.println(f);\n    }\n}\n```\n反编译后\n```\n  public static void main(java.lang.String[]);\n    Code:\n       0: bipush        10\n       2: istore_1\n       3: ldc2_w        #2                  // double 7.0d  //将long或double型常量值从常量池中推送至栈顶（宽索引）\n       6: dstore_2\n       7: iload_1\n       8: i2d       //栈顶int值强转double值，并且结果进栈\n       9: dload_2\n      10: drem      //栈顶两double型数值作取模运算，并且结果进栈\n      11: d2f       //栈顶double值强转float值，并且结果进栈\n      12: fstore        4  //这里的4指的是第四个变量，fstore_1指的是第二个变量。\n      14: getstatic     #4                  // Field java/lang/System.out:Ljava/io/PrintStream;\n      17: fload         4\n      19: invokevirtual #5                  // Method java/io/PrintStream.println:(F)V\n      22: return\n}\n```\n可以看到，运算的时候，把int转成了double的，符合了小转大的规则；","slug":"java基础/final的用法","published":1,"updated":"2017-03-01T06:22:21.098Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1qae49c001ac812k8vm2qbd","content":"<p>用final可以修饰类，方法，变量。分别表示类不可被继承，方法不可重写，变量不可变（不可变指的是引用地址不可变，内部的值还是可以变的）。</p>\n<h1 id=\"代码实例\"><a href=\"#代码实例\" class=\"headerlink\" title=\"代码实例\"></a>代码实例</h1><h3 id=\"final修饰的成员变量\"><a href=\"#final修饰的成员变量\" class=\"headerlink\" title=\"final修饰的成员变量\"></a>final修饰的成员变量</h3><p>被final修饰的类变量就变成了常量，必须要进行初始化，有两次机会可以初始化，一是声明的时候直接初始化，或者在构造函数里初始化。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test008</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> PI;  <span class=\"comment\">//编译报错，未初始化</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Test008</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        </div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Test008</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span></span>&#123;</div><div class=\"line\">        PI = i;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这段代码是有编译报错的，因为new Test008()的时候，PI是没有被初始化的。所以要嘛在无参构造里也加上初始化，要嘛删掉这个无参构造。</p>\n<h3 id=\"final修饰的局部变量\"><a href=\"#final修饰的局部变量\" class=\"headerlink\" title=\"final修饰的局部变量\"></a>final修饰的局部变量</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test008</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> i;</div><div class=\"line\">        System.out.println(i);  <span class=\"comment\">//编译报错，未初始化</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>局部变量和成员变量不一样在，可以声明成final且不初始化，但是在使用的地方会编译报错。</p>\n<h3 id=\"final定义的基本类型的运算\"><a href=\"#final定义的基本类型的运算\" class=\"headerlink\" title=\"final定义的基本类型的运算\"></a>final定义的基本类型的运算</h3><p>Java表达式转型规则由低到高转换：</p>\n<ol>\n<li>所有的byte,short,char型的值将被提升为int型；</li>\n<li>如果有一个操作数是long型，计算结果是long型；</li>\n<li>如果有一个操作数是float型，计算结果是float型；</li>\n<li>如果有一个操作数是double型，计算结果是double型；</li>\n<li>被final修饰的两个常量运算会直接在编译期间获得值；</li>\n</ol>\n<h4 id=\"例一\"><a href=\"#例一\" class=\"headerlink\" title=\"例一\"></a>例一</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String... args)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">byte</span> b1 = <span class=\"number\">1</span>, b2 = <span class=\"number\">2</span>, b3;</div><div class=\"line\">        b3 = (<span class=\"keyword\">byte</span>) (b1 + b2);  <span class=\"comment\">//需要强转，因为计算结果为int</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>反编译结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static void main(java.lang.String[]);</div><div class=\"line\">  Code:</div><div class=\"line\">     0: iconst_1   //整数1入栈，操作数栈【1】</div><div class=\"line\">     1: istore_1   //弹出栈顶元素，赋值给索引为1的变量，操作数栈【】</div><div class=\"line\">     2: iconst_2   //整数1入栈，操作数栈【2】</div><div class=\"line\">     3: istore_2   //弹出栈顶元素，赋值给索引为2的变量，操作数栈【】</div><div class=\"line\">     4: iload_1    //索引为1的变量的值入栈，操作数栈【1】</div><div class=\"line\">     5: iload_2    //索引为2的变量的值入栈，操作数栈【1|2】</div><div class=\"line\">     6: iadd       //栈顶的两个元素相加，操作数栈【3】</div><div class=\"line\">     7: i2b        //把int型转成byte型，操作数栈【3】</div><div class=\"line\">     8: istore_3   //弹出栈顶元素，赋值给索引为3的变量，操作数栈【】</div><div class=\"line\">     9: return</div></pre></td></tr></table></figure></p>\n<h4 id=\"例二\"><a href=\"#例二\" class=\"headerlink\" title=\"例二\"></a>例二</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String... args)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">byte</span> b1 = <span class=\"number\">1</span>, b2 = <span class=\"number\">2</span>;</div><div class=\"line\">        <span class=\"keyword\">byte</span> b3 = b1 + b2;  <span class=\"comment\">//不需要强转，因为这就是byte b3 = 3;</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>反编译结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static void main(java.lang.String[]);</div><div class=\"line\">  Code:</div><div class=\"line\">     0: iconst_1 //将一个int型常量值推送至栈顶，操作数栈【1】</div><div class=\"line\">     1: istore_1 //弹出栈顶元素，赋值给索引为1的变量，操作数栈【】</div><div class=\"line\">     2: iconst_2 //将一个int型常量值推送至栈顶，操作数栈【2】</div><div class=\"line\">     3: istore_2 //弹出栈顶元素，赋值给索引为2的变量，操作数栈【】</div><div class=\"line\">     4: iconst_3 //将一个int型常量值推送至栈顶，操作数栈【3】</div><div class=\"line\">     5: istore_3 //弹出栈顶元素，赋值给索引为3的变量，操作数栈【】</div><div class=\"line\">     6: return</div></pre></td></tr></table></figure></p>\n<h4 id=\"例三\"><a href=\"#例三\" class=\"headerlink\" title=\"例三\"></a>例三</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String... args)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">byte</span> b1 = <span class=\"number\">127</span>, b2 = <span class=\"number\">3</span>;</div><div class=\"line\">        <span class=\"keyword\">byte</span> b3 = (<span class=\"keyword\">byte</span>) (b1 + b2);  <span class=\"comment\">//需要强转，因为这就是byte b3 = 130;这是不合法的</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>反编译结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static void main(java.lang.String[]);</div><div class=\"line\">  Code:</div><div class=\"line\">     0: bipush        127  //将一个byte型常量值推送至栈顶，操作数栈【127】</div><div class=\"line\">     2: istore_1           //弹出栈顶元素，赋值给索引为1的变量，操作数栈【】</div><div class=\"line\">     3: iconst_3           //将一个int型常量值推送至栈顶，操作数栈【3】</div><div class=\"line\">     4: istore_2           //弹出栈顶元素，赋值给索引为2的变量，操作数栈【】</div><div class=\"line\">     5: bipush        -126 //将一个byte型常量值推送至栈顶，操作数栈【-126】</div><div class=\"line\">     7: istore_3           //弹出栈顶元素，赋值给索引为3的变量，操作数栈【】</div><div class=\"line\">     8: return</div></pre></td></tr></table></figure></p>\n<p>这里为什么是bipush呢？因为-1 ~ 5使用iconst_m1 ~ iconst_5来入栈的。</p>\n<h4 id=\"例四\"><a href=\"#例四\" class=\"headerlink\" title=\"例四\"></a>例四</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test0</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">byte</span> b1 = <span class=\"number\">2</span>;</div><div class=\"line\">        <span class=\"keyword\">byte</span> b2 = <span class=\"number\">3</span>;</div><div class=\"line\">        <span class=\"keyword\">byte</span> b3 = (<span class=\"keyword\">byte</span>) (b1 + b2);  <span class=\"comment\">//需要强转</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static void main(java.lang.String[]);</div><div class=\"line\">  Code:</div><div class=\"line\">     0: iconst_2 //将一个int型常量值推送至栈顶，操作数栈【2】</div><div class=\"line\">     1: istore_1 //弹出栈顶元素，赋值给索引为1的变量，操作数栈【】</div><div class=\"line\">     2: iconst_3 //将一个int型常量值推送至栈顶，操作数栈【3】</div><div class=\"line\">     3: istore_2 //弹出栈顶元素，赋值给索引为2的变量，操作数栈【】</div><div class=\"line\">     4: iconst_2 //将一个int型常量值推送至栈顶，操作数栈【2】</div><div class=\"line\">     5: iload_2  //索引为1的变量的值入栈，操作数栈【2|3】</div><div class=\"line\">     6: iadd     //栈顶的两个元素相加，操作数栈【5】</div><div class=\"line\">     7: i2b      //把int型转成byte型，操作数栈【5】</div><div class=\"line\">     8: istore_3 //弹出栈顶元素，赋值给索引为3的变量，操作数栈【】</div><div class=\"line\">     9: return</div></pre></td></tr></table></figure>\n<p>可以发现，例二和例三少了一个iadd的过程，final直接在编译阶段就计算出来了。</p>\n<p>从例四可以看出，一个final类型和非final类型的数相加，final类的数是从常量池里取了以后压入栈的，而非final类的数是从变量里load了以后压入栈的。</p>\n<h4 id=\"例五\"><a href=\"#例五\" class=\"headerlink\" title=\"例五\"></a>例五</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"number\">10</span>;</div><div class=\"line\">        <span class=\"keyword\">double</span> d = <span class=\"number\">7.0</span>;</div><div class=\"line\">        <span class=\"keyword\">float</span> f = (<span class=\"keyword\">float</span>) (i % d);</div><div class=\"line\">        System.out.println(f);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>反编译后<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">  public static void main(java.lang.String[]);</div><div class=\"line\">    Code:</div><div class=\"line\">       0: bipush        10</div><div class=\"line\">       2: istore_1</div><div class=\"line\">       3: ldc2_w        #2                  // double 7.0d  //将long或double型常量值从常量池中推送至栈顶（宽索引）</div><div class=\"line\">       6: dstore_2</div><div class=\"line\">       7: iload_1</div><div class=\"line\">       8: i2d       //栈顶int值强转double值，并且结果进栈</div><div class=\"line\">       9: dload_2</div><div class=\"line\">      10: drem      //栈顶两double型数值作取模运算，并且结果进栈</div><div class=\"line\">      11: d2f       //栈顶double值强转float值，并且结果进栈</div><div class=\"line\">      12: fstore        4  //这里的4指的是第四个变量，fstore_1指的是第二个变量。</div><div class=\"line\">      14: getstatic     #4                  // Field java/lang/System.out:Ljava/io/PrintStream;</div><div class=\"line\">      17: fload         4</div><div class=\"line\">      19: invokevirtual #5                  // Method java/io/PrintStream.println:(F)V</div><div class=\"line\">      22: return</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>可以看到，运算的时候，把int转成了double的，符合了小转大的规则；</p>\n","excerpt":"","more":"<p>用final可以修饰类，方法，变量。分别表示类不可被继承，方法不可重写，变量不可变（不可变指的是引用地址不可变，内部的值还是可以变的）。</p>\n<h1 id=\"代码实例\"><a href=\"#代码实例\" class=\"headerlink\" title=\"代码实例\"></a>代码实例</h1><h3 id=\"final修饰的成员变量\"><a href=\"#final修饰的成员变量\" class=\"headerlink\" title=\"final修饰的成员变量\"></a>final修饰的成员变量</h3><p>被final修饰的类变量就变成了常量，必须要进行初始化，有两次机会可以初始化，一是声明的时候直接初始化，或者在构造函数里初始化。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test008</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> PI;  <span class=\"comment\">//编译报错，未初始化</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Test008</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        </div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Test008</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span></span>&#123;</div><div class=\"line\">        PI = i;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这段代码是有编译报错的，因为new Test008()的时候，PI是没有被初始化的。所以要嘛在无参构造里也加上初始化，要嘛删掉这个无参构造。</p>\n<h3 id=\"final修饰的局部变量\"><a href=\"#final修饰的局部变量\" class=\"headerlink\" title=\"final修饰的局部变量\"></a>final修饰的局部变量</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test008</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> i;</div><div class=\"line\">        System.out.println(i);  <span class=\"comment\">//编译报错，未初始化</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>局部变量和成员变量不一样在，可以声明成final且不初始化，但是在使用的地方会编译报错。</p>\n<h3 id=\"final定义的基本类型的运算\"><a href=\"#final定义的基本类型的运算\" class=\"headerlink\" title=\"final定义的基本类型的运算\"></a>final定义的基本类型的运算</h3><p>Java表达式转型规则由低到高转换：</p>\n<ol>\n<li>所有的byte,short,char型的值将被提升为int型；</li>\n<li>如果有一个操作数是long型，计算结果是long型；</li>\n<li>如果有一个操作数是float型，计算结果是float型；</li>\n<li>如果有一个操作数是double型，计算结果是double型；</li>\n<li>被final修饰的两个常量运算会直接在编译期间获得值；</li>\n</ol>\n<h4 id=\"例一\"><a href=\"#例一\" class=\"headerlink\" title=\"例一\"></a>例一</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String... args)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">byte</span> b1 = <span class=\"number\">1</span>, b2 = <span class=\"number\">2</span>, b3;</div><div class=\"line\">        b3 = (<span class=\"keyword\">byte</span>) (b1 + b2);  <span class=\"comment\">//需要强转，因为计算结果为int</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>反编译结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static void main(java.lang.String[]);</div><div class=\"line\">  Code:</div><div class=\"line\">     0: iconst_1   //整数1入栈，操作数栈【1】</div><div class=\"line\">     1: istore_1   //弹出栈顶元素，赋值给索引为1的变量，操作数栈【】</div><div class=\"line\">     2: iconst_2   //整数1入栈，操作数栈【2】</div><div class=\"line\">     3: istore_2   //弹出栈顶元素，赋值给索引为2的变量，操作数栈【】</div><div class=\"line\">     4: iload_1    //索引为1的变量的值入栈，操作数栈【1】</div><div class=\"line\">     5: iload_2    //索引为2的变量的值入栈，操作数栈【1|2】</div><div class=\"line\">     6: iadd       //栈顶的两个元素相加，操作数栈【3】</div><div class=\"line\">     7: i2b        //把int型转成byte型，操作数栈【3】</div><div class=\"line\">     8: istore_3   //弹出栈顶元素，赋值给索引为3的变量，操作数栈【】</div><div class=\"line\">     9: return</div></pre></td></tr></table></figure></p>\n<h4 id=\"例二\"><a href=\"#例二\" class=\"headerlink\" title=\"例二\"></a>例二</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String... args)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">byte</span> b1 = <span class=\"number\">1</span>, b2 = <span class=\"number\">2</span>;</div><div class=\"line\">        <span class=\"keyword\">byte</span> b3 = b1 + b2;  <span class=\"comment\">//不需要强转，因为这就是byte b3 = 3;</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>反编译结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static void main(java.lang.String[]);</div><div class=\"line\">  Code:</div><div class=\"line\">     0: iconst_1 //将一个int型常量值推送至栈顶，操作数栈【1】</div><div class=\"line\">     1: istore_1 //弹出栈顶元素，赋值给索引为1的变量，操作数栈【】</div><div class=\"line\">     2: iconst_2 //将一个int型常量值推送至栈顶，操作数栈【2】</div><div class=\"line\">     3: istore_2 //弹出栈顶元素，赋值给索引为2的变量，操作数栈【】</div><div class=\"line\">     4: iconst_3 //将一个int型常量值推送至栈顶，操作数栈【3】</div><div class=\"line\">     5: istore_3 //弹出栈顶元素，赋值给索引为3的变量，操作数栈【】</div><div class=\"line\">     6: return</div></pre></td></tr></table></figure></p>\n<h4 id=\"例三\"><a href=\"#例三\" class=\"headerlink\" title=\"例三\"></a>例三</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String... args)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">byte</span> b1 = <span class=\"number\">127</span>, b2 = <span class=\"number\">3</span>;</div><div class=\"line\">        <span class=\"keyword\">byte</span> b3 = (<span class=\"keyword\">byte</span>) (b1 + b2);  <span class=\"comment\">//需要强转，因为这就是byte b3 = 130;这是不合法的</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>反编译结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static void main(java.lang.String[]);</div><div class=\"line\">  Code:</div><div class=\"line\">     0: bipush        127  //将一个byte型常量值推送至栈顶，操作数栈【127】</div><div class=\"line\">     2: istore_1           //弹出栈顶元素，赋值给索引为1的变量，操作数栈【】</div><div class=\"line\">     3: iconst_3           //将一个int型常量值推送至栈顶，操作数栈【3】</div><div class=\"line\">     4: istore_2           //弹出栈顶元素，赋值给索引为2的变量，操作数栈【】</div><div class=\"line\">     5: bipush        -126 //将一个byte型常量值推送至栈顶，操作数栈【-126】</div><div class=\"line\">     7: istore_3           //弹出栈顶元素，赋值给索引为3的变量，操作数栈【】</div><div class=\"line\">     8: return</div></pre></td></tr></table></figure></p>\n<p>这里为什么是bipush呢？因为-1 ~ 5使用iconst_m1 ~ iconst_5来入栈的。</p>\n<h4 id=\"例四\"><a href=\"#例四\" class=\"headerlink\" title=\"例四\"></a>例四</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test0</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">byte</span> b1 = <span class=\"number\">2</span>;</div><div class=\"line\">        <span class=\"keyword\">byte</span> b2 = <span class=\"number\">3</span>;</div><div class=\"line\">        <span class=\"keyword\">byte</span> b3 = (<span class=\"keyword\">byte</span>) (b1 + b2);  <span class=\"comment\">//需要强转</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static void main(java.lang.String[]);</div><div class=\"line\">  Code:</div><div class=\"line\">     0: iconst_2 //将一个int型常量值推送至栈顶，操作数栈【2】</div><div class=\"line\">     1: istore_1 //弹出栈顶元素，赋值给索引为1的变量，操作数栈【】</div><div class=\"line\">     2: iconst_3 //将一个int型常量值推送至栈顶，操作数栈【3】</div><div class=\"line\">     3: istore_2 //弹出栈顶元素，赋值给索引为2的变量，操作数栈【】</div><div class=\"line\">     4: iconst_2 //将一个int型常量值推送至栈顶，操作数栈【2】</div><div class=\"line\">     5: iload_2  //索引为1的变量的值入栈，操作数栈【2|3】</div><div class=\"line\">     6: iadd     //栈顶的两个元素相加，操作数栈【5】</div><div class=\"line\">     7: i2b      //把int型转成byte型，操作数栈【5】</div><div class=\"line\">     8: istore_3 //弹出栈顶元素，赋值给索引为3的变量，操作数栈【】</div><div class=\"line\">     9: return</div></pre></td></tr></table></figure>\n<p>可以发现，例二和例三少了一个iadd的过程，final直接在编译阶段就计算出来了。</p>\n<p>从例四可以看出，一个final类型和非final类型的数相加，final类的数是从常量池里取了以后压入栈的，而非final类的数是从变量里load了以后压入栈的。</p>\n<h4 id=\"例五\"><a href=\"#例五\" class=\"headerlink\" title=\"例五\"></a>例五</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"number\">10</span>;</div><div class=\"line\">        <span class=\"keyword\">double</span> d = <span class=\"number\">7.0</span>;</div><div class=\"line\">        <span class=\"keyword\">float</span> f = (<span class=\"keyword\">float</span>) (i % d);</div><div class=\"line\">        System.out.println(f);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>反编译后<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">  public static void main(java.lang.String[]);</div><div class=\"line\">    Code:</div><div class=\"line\">       0: bipush        10</div><div class=\"line\">       2: istore_1</div><div class=\"line\">       3: ldc2_w        #2                  // double 7.0d  //将long或double型常量值从常量池中推送至栈顶（宽索引）</div><div class=\"line\">       6: dstore_2</div><div class=\"line\">       7: iload_1</div><div class=\"line\">       8: i2d       //栈顶int值强转double值，并且结果进栈</div><div class=\"line\">       9: dload_2</div><div class=\"line\">      10: drem      //栈顶两double型数值作取模运算，并且结果进栈</div><div class=\"line\">      11: d2f       //栈顶double值强转float值，并且结果进栈</div><div class=\"line\">      12: fstore        4  //这里的4指的是第四个变量，fstore_1指的是第二个变量。</div><div class=\"line\">      14: getstatic     #4                  // Field java/lang/System.out:Ljava/io/PrintStream;</div><div class=\"line\">      17: fload         4</div><div class=\"line\">      19: invokevirtual #5                  // Method java/io/PrintStream.println:(F)V</div><div class=\"line\">      22: return</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>可以看到，运算的时候，把int转成了double的，符合了小转大的规则；</p>\n"},{"title":"java的八种基本类型的默认值","date":"2017-02-28T10:42:47.000Z","_content":"\n### 参见表格\n基本类型 | 默认值\n---|---\nbyte|\t0\nshort|\t0\nint|\t0\nlong|\t0L\nfloat|\t0.0f\ndouble|\t0.0d\nchar|\t'\\u0000'\nboolean|\tfalse\n\n### 代码\n```java\n/**\n * 实验基本类型的默认值\n */\npublic class Test002 {\n\n    private static byte defaultByte; //如果是final类型的话就必须初始化了，没有默认值\n    private static short defaultShort;\n    private static int defaultInt;\n    private static long defaultLong;\n    private static float defaultFloat;\n    private static double defaultDouble;\n    private static char defaultChar;\n    private static boolean defaultBoolean;\n    private static String str;\n\n    public static void main(String[] args) {\n        System.out.println(defaultByte);\n        System.out.println(defaultShort);\n        System.out.println(defaultInt);\n        System.out.println(defaultLong);\n        System.out.println(defaultFloat);\n        System.out.println(defaultDouble);\n        System.out.println(defaultChar);\n        System.out.println(defaultBoolean);\n        System.out.println(\"输出\" + str);\n    }\n}\n```\n**输出**  \n0  \n0  \n0  \n0  \n0.0  \n0.0  \n \nfalse  \n输出null\n\n### 注意点\n默认值只有成员变量才有，局部变量是没有默认值的。\n\n\n","source":"_posts/java基础/java的八种基本类型的默认值.md","raw":"---\ntitle: java的八种基本类型的默认值\ndate: 2017-02-28 18:42:47\ncategories: Java基础\n---\n\n### 参见表格\n基本类型 | 默认值\n---|---\nbyte|\t0\nshort|\t0\nint|\t0\nlong|\t0L\nfloat|\t0.0f\ndouble|\t0.0d\nchar|\t'\\u0000'\nboolean|\tfalse\n\n### 代码\n```java\n/**\n * 实验基本类型的默认值\n */\npublic class Test002 {\n\n    private static byte defaultByte; //如果是final类型的话就必须初始化了，没有默认值\n    private static short defaultShort;\n    private static int defaultInt;\n    private static long defaultLong;\n    private static float defaultFloat;\n    private static double defaultDouble;\n    private static char defaultChar;\n    private static boolean defaultBoolean;\n    private static String str;\n\n    public static void main(String[] args) {\n        System.out.println(defaultByte);\n        System.out.println(defaultShort);\n        System.out.println(defaultInt);\n        System.out.println(defaultLong);\n        System.out.println(defaultFloat);\n        System.out.println(defaultDouble);\n        System.out.println(defaultChar);\n        System.out.println(defaultBoolean);\n        System.out.println(\"输出\" + str);\n    }\n}\n```\n**输出**  \n0  \n0  \n0  \n0  \n0.0  \n0.0  \n \nfalse  \n输出null\n\n### 注意点\n默认值只有成员变量才有，局部变量是没有默认值的。\n\n\n","slug":"java基础/java的八种基本类型的默认值","published":1,"updated":"2017-03-01T06:22:41.840Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1qae49f001cc812otgrsrxv","content":"<h3 id=\"参见表格\"><a href=\"#参见表格\" class=\"headerlink\" title=\"参见表格\"></a>参见表格</h3><table>\n<thead>\n<tr>\n<th>基本类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>byte</td>\n<td>0</td>\n</tr>\n<tr>\n<td>short</td>\n<td>0</td>\n</tr>\n<tr>\n<td>int</td>\n<td>0</td>\n</tr>\n<tr>\n<td>long</td>\n<td>0L</td>\n</tr>\n<tr>\n<td>float</td>\n<td>0.0f</td>\n</tr>\n<tr>\n<td>double</td>\n<td>0.0d</td>\n</tr>\n<tr>\n<td>char</td>\n<td>‘\\u0000’</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>false</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 实验基本类型的默认值</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test002</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">byte</span> defaultByte; <span class=\"comment\">//如果是final类型的话就必须初始化了，没有默认值</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">short</span> defaultShort;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> defaultInt;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> defaultLong;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">float</span> defaultFloat;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">double</span> defaultDouble;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">char</span> defaultChar;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> defaultBoolean;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String str;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        System.out.println(defaultByte);</div><div class=\"line\">        System.out.println(defaultShort);</div><div class=\"line\">        System.out.println(defaultInt);</div><div class=\"line\">        System.out.println(defaultLong);</div><div class=\"line\">        System.out.println(defaultFloat);</div><div class=\"line\">        System.out.println(defaultDouble);</div><div class=\"line\">        System.out.println(defaultChar);</div><div class=\"line\">        System.out.println(defaultBoolean);</div><div class=\"line\">        System.out.println(<span class=\"string\">\"输出\"</span> + str);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>输出</strong><br>0<br>0<br>0<br>0<br>0.0<br>0.0  </p>\n<p>false<br>输出null</p>\n<h3 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h3><p>默认值只有成员变量才有，局部变量是没有默认值的。</p>\n","excerpt":"","more":"<h3 id=\"参见表格\"><a href=\"#参见表格\" class=\"headerlink\" title=\"参见表格\"></a>参见表格</h3><table>\n<thead>\n<tr>\n<th>基本类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>byte</td>\n<td>0</td>\n</tr>\n<tr>\n<td>short</td>\n<td>0</td>\n</tr>\n<tr>\n<td>int</td>\n<td>0</td>\n</tr>\n<tr>\n<td>long</td>\n<td>0L</td>\n</tr>\n<tr>\n<td>float</td>\n<td>0.0f</td>\n</tr>\n<tr>\n<td>double</td>\n<td>0.0d</td>\n</tr>\n<tr>\n<td>char</td>\n<td>‘\\u0000’</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>false</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 实验基本类型的默认值</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test002</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">byte</span> defaultByte; <span class=\"comment\">//如果是final类型的话就必须初始化了，没有默认值</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">short</span> defaultShort;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> defaultInt;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> defaultLong;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">float</span> defaultFloat;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">double</span> defaultDouble;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">char</span> defaultChar;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> defaultBoolean;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String str;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        System.out.println(defaultByte);</div><div class=\"line\">        System.out.println(defaultShort);</div><div class=\"line\">        System.out.println(defaultInt);</div><div class=\"line\">        System.out.println(defaultLong);</div><div class=\"line\">        System.out.println(defaultFloat);</div><div class=\"line\">        System.out.println(defaultDouble);</div><div class=\"line\">        System.out.println(defaultChar);</div><div class=\"line\">        System.out.println(defaultBoolean);</div><div class=\"line\">        System.out.println(<span class=\"string\">\"输出\"</span> + str);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>输出</strong><br>0<br>0<br>0<br>0<br>0.0<br>0.0  </p>\n<p>false<br>输出null</p>\n<h3 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h3><p>默认值只有成员变量才有，局部变量是没有默认值的。</p>\n"},{"title":"Nginx+重定向导致的问题","date":"2017-03-07T03:34:47.000Z","_content":"## 场景描述\n在做项目迁移的时候，有个bug是页面跳转以后显示不出来：  \n ```java\n response.sendRedirect(\"/xxx/xxx.htm?action=xxx\");\n```\n\n原因是虽然Nginx设置了https的协议，但是根据下面的图片来看，response.sendRedirect()以后请求被重定向到http上了。  \n![image](http://ok7wlv1ee.bkt.clouddn.com/17-3-7/16359046-file_1488855118533_754c.png)\n\n[查了资料](http://feitianbenyue.iteye.com/blog/2056357)\n\n## 解决方法：\n\n1. 找运维人员nginx配置： \n```\nproxy_set_header       Host $host;  \nproxy_set_header  X-Real-IP  $remote_addr;  \nproxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;  \nproxy_set_header X-Forwarded-Proto  $scheme;  \n```\n2. 在tomcat的server.xml里的Engine模块下加入：  \n```\n<Valve className=\"org.apache.catalina.valves.RemoteIpValve\" protocolHeader=\"X-Forwarded-Proto\" />\n```\n\n\n","source":"_posts/Tomcat/Nginx+重定向导致的问题.md","raw":"---\ntitle: Nginx+重定向导致的问题\ndate: 2017-03-07 11:34:47\ncategories: Tomcat\n---\n## 场景描述\n在做项目迁移的时候，有个bug是页面跳转以后显示不出来：  \n ```java\n response.sendRedirect(\"/xxx/xxx.htm?action=xxx\");\n```\n\n原因是虽然Nginx设置了https的协议，但是根据下面的图片来看，response.sendRedirect()以后请求被重定向到http上了。  \n![image](http://ok7wlv1ee.bkt.clouddn.com/17-3-7/16359046-file_1488855118533_754c.png)\n\n[查了资料](http://feitianbenyue.iteye.com/blog/2056357)\n\n## 解决方法：\n\n1. 找运维人员nginx配置： \n```\nproxy_set_header       Host $host;  \nproxy_set_header  X-Real-IP  $remote_addr;  \nproxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;  \nproxy_set_header X-Forwarded-Proto  $scheme;  \n```\n2. 在tomcat的server.xml里的Engine模块下加入：  \n```\n<Valve className=\"org.apache.catalina.valves.RemoteIpValve\" protocolHeader=\"X-Forwarded-Proto\" />\n```\n\n\n","slug":"Tomcat/Nginx+重定向导致的问题","published":1,"updated":"2017-03-07T07:17:29.221Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1qae49j001ec8121umes8zs","content":"<h2 id=\"场景描述\"><a href=\"#场景描述\" class=\"headerlink\" title=\"场景描述\"></a>场景描述</h2><p>在做项目迁移的时候，有个bug是页面跳转以后显示不出来：<br> <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">response.sendRedirect(<span class=\"string\">\"/xxx/xxx.htm?action=xxx\"</span>);</div></pre></td></tr></table></figure></p>\n<p>原因是虽然Nginx设置了https的协议，但是根据下面的图片来看，response.sendRedirect()以后请求被重定向到http上了。<br><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-3-7/16359046-file_1488855118533_754c.png\" alt=\"image\"></p>\n<p><a href=\"http://feitianbenyue.iteye.com/blog/2056357\" target=\"_blank\" rel=\"external\">查了资料</a></p>\n<h2 id=\"解决方法：\"><a href=\"#解决方法：\" class=\"headerlink\" title=\"解决方法：\"></a>解决方法：</h2><ol>\n<li><p>找运维人员nginx配置： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">proxy_set_header       Host $host;  </div><div class=\"line\">proxy_set_header  X-Real-IP  $remote_addr;  </div><div class=\"line\">proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;  </div><div class=\"line\">proxy_set_header X-Forwarded-Proto  $scheme;</div></pre></td></tr></table></figure>\n</li>\n<li><p>在tomcat的server.xml里的Engine模块下加入：  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Valve className=&quot;org.apache.catalina.valves.RemoteIpValve&quot; protocolHeader=&quot;X-Forwarded-Proto&quot; /&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n","excerpt":"","more":"<h2 id=\"场景描述\"><a href=\"#场景描述\" class=\"headerlink\" title=\"场景描述\"></a>场景描述</h2><p>在做项目迁移的时候，有个bug是页面跳转以后显示不出来：<br> <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">response.sendRedirect(<span class=\"string\">\"/xxx/xxx.htm?action=xxx\"</span>);</div></pre></td></tr></table></figure></p>\n<p>原因是虽然Nginx设置了https的协议，但是根据下面的图片来看，response.sendRedirect()以后请求被重定向到http上了。<br><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-3-7/16359046-file_1488855118533_754c.png\" alt=\"image\"></p>\n<p><a href=\"http://feitianbenyue.iteye.com/blog/2056357\">查了资料</a></p>\n<h2 id=\"解决方法：\"><a href=\"#解决方法：\" class=\"headerlink\" title=\"解决方法：\"></a>解决方法：</h2><ol>\n<li><p>找运维人员nginx配置： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">proxy_set_header       Host $host;  </div><div class=\"line\">proxy_set_header  X-Real-IP  $remote_addr;  </div><div class=\"line\">proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;  </div><div class=\"line\">proxy_set_header X-Forwarded-Proto  $scheme;</div></pre></td></tr></table></figure>\n</li>\n<li><p>在tomcat的server.xml里的Engine模块下加入：  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Valve className=&quot;org.apache.catalina.valves.RemoteIpValve&quot; protocolHeader=&quot;X-Forwarded-Proto&quot; /&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"title":"java的八种基本类型~byte","date":"2017-02-28T10:42:47.000Z","_content":"\n1. byte可表示的位数\n2. byte与int互转\n3. byte的包装类\n4. byte与字节流（TODO）\n\n\n# byte可表示的位数\n\n> \n> ```math\n> -2^7\n> ```\n> \n> ```math\n> \\downarrow\n> ```\n> \n> ```math\n>  2^7-1\n> ```\n\n \n\nbyte在java中是一字节的，而一字节在内存中是8bit，而8bit中，  \n第一位又是符号位，那只有7位可以表示数字，所以\n- byte能表示的最大的正数在内存中是0111 1111，即 127\n- byte能表示的最小的负数在内存中是1000 0000，即-128  \n\n可以用byte的包装类Byte.java的静态常量来查看\n```\npublic class Test01 {\n    public static void main(String[] args) {\n        System.out.println(Byte.MIN_VALUE + \"~\" + Byte.MAX_VALUE);  //输出：-128~127\n        byte b = 128; //error，编译报错\n        byte c = 127; //编译通过\n        byte d = (byte)128; //编译通过\n    }\n}\n```\n  \n# byte与int互转\n- ## byte转int\n好像也没什么需要注意的...\n```\npublic class Test01 {\n    public static void main(String[] args) {\n        /**\n         * int在byte范围内\n         */\n        byte b = 10;\n        System.out.println(b + 10);  //输出： 20\n        int b1 = b;\n        System.out.println(b1);  //输出： 10\n        /**\n         * int不在byte范围内\n         */\n        byte c = 127;\n        System.out.println(c + 10);  //输出： 137\n        int d = c + 10;\n        System.out.println(d);  //输出： 137，与上一句是一样的，java底层是int计算的。\n    }\n}\n```\n\n- ## int转byte\n```\npublic class Test01 {\n    public static void main(String[] args) {\n        int i = 128;\n        byte j = (byte) i;  //不强转编译报错\n        System.out.println(j);  //输出： -128\n        int m = -129;\n        byte n = (byte) m;  //不强转编译报错\n        System.out.println(n);  //输出： 127\n        int a = 127;\n        byte b = (byte) a;  //不强转编译报错\n        System.out.println(b);  //输出： 127\n        byte e = 127;  //这里字面量是int，为什么不用强转呢，jvm做了处理\n        System.out.println(e);  //输出： 127\n        byte c = 127;\n        byte d = 1;\n        byte e = c + d;  //error，编译报错，必须加上强转。因为java计算是通过int的。\n    }\n}\n```\n[TODO:计算一下为什么128变成了-128]\n\n# byte的包装类\nbyte的包装类就是Byte，列举一下常见方法\n\n```\n- toString(byte b)  //静态的，调用了Integer.toString()\n- ByteCache() //不是很懂，也不是静态方法啊\n- parseByte(String s) //超过范围或者不是数字会报：NumberFormatException，调用了Integer.parseInt()\n- valueOf() //把括号里的参数变成Byte对象，超过范围或者不是数字会报：NumberFormatException\n- byteValue() //返回Byte里的byte\n- shortValue() //返回short，代码里加了强转，平时不写是隐式类型转换，jvm实现的。\n- intValue(),longValue() //同上\n- floatValue(),doubleValue() //同上，但是不知道精度是否会丢失【TODO】\n- toString() //源码里调用了Integer.toString，非静态\n- hashCode() //返回这个类的hashCode\n- equals() //直接比byte了，也不用比hashCode了\n- compareTo(Byte anotherByte) //和另外一个Byte比较大小\n- compare(byte x, byte y) //静态方法\n\n```\n\nByteCache可以查看[128的hashCode共享](http://blog.csdn.net/mazhimazh/article/details/17681787)\n\n```\npublic class Test01 {\n    public static void main(String[] args) {\n        System.out.println(Byte.toString((byte) 1));  //1\n        System.out.println(Byte.parseByte(\"129\")); //NumberFormatException：Value out of range. Value:\"129\" Radix:10\n        System.out.println(Byte.parseByte(\"x\")); //NumberFormatException：For input string: \"x\"\n        System.out.println(Byte.parseByte(\"20\")); //20，调用了重写的toString方法\n        System.out.println(Byte.valueOf(\"20\")); //20，与parseByte()的区别是返回类型不同，这个返回Byte\n        System.out.println(Byte.valueOf((byte) 130)); //-126，与parseByte()的区别是返回类型不同，这个返回Byte\n        Byte testByte = new Byte(\"-5\");\n        System.out.println(testByte.shortValue()); //-5\n        System.out.println(testByte.intValue()); //-5\n        System.out.println(testByte.longValue()); //-5\n        System.out.println(testByte.floatValue()); //-5.0\n        System.out.println(testByte.doubleValue()); //-5.0\n    }\n}\n```\n\nByte是final类型的类，也就是不可变的。（其他的基本类型的包装类也都是final类型的）下面的例子可以验证。\n```java\n/**\n * 试验包装类的自增。\n */\npublic class Test001 {\n    private static void add(Byte b) {\n        b = b++;\n    }\n\n    public static void main(String[] args) {\n        Byte a = 127;\n        Byte b = 127;\n        add(++a);\n        System.out.println(a);  //-128，自动拆箱\n        add(b);\n        System.out.println(b);  //127\n    }\n}\n```\n\n\n\n\n\n\n","source":"_posts/java基础/java的八种基本类型~byte.md","raw":"---\ntitle: java的八种基本类型~byte\ndate: 2017-02-28 18:42:47\ncategories: Java基础\n---\n\n1. byte可表示的位数\n2. byte与int互转\n3. byte的包装类\n4. byte与字节流（TODO）\n\n\n# byte可表示的位数\n\n> \n> ```math\n> -2^7\n> ```\n> \n> ```math\n> \\downarrow\n> ```\n> \n> ```math\n>  2^7-1\n> ```\n\n \n\nbyte在java中是一字节的，而一字节在内存中是8bit，而8bit中，  \n第一位又是符号位，那只有7位可以表示数字，所以\n- byte能表示的最大的正数在内存中是0111 1111，即 127\n- byte能表示的最小的负数在内存中是1000 0000，即-128  \n\n可以用byte的包装类Byte.java的静态常量来查看\n```\npublic class Test01 {\n    public static void main(String[] args) {\n        System.out.println(Byte.MIN_VALUE + \"~\" + Byte.MAX_VALUE);  //输出：-128~127\n        byte b = 128; //error，编译报错\n        byte c = 127; //编译通过\n        byte d = (byte)128; //编译通过\n    }\n}\n```\n  \n# byte与int互转\n- ## byte转int\n好像也没什么需要注意的...\n```\npublic class Test01 {\n    public static void main(String[] args) {\n        /**\n         * int在byte范围内\n         */\n        byte b = 10;\n        System.out.println(b + 10);  //输出： 20\n        int b1 = b;\n        System.out.println(b1);  //输出： 10\n        /**\n         * int不在byte范围内\n         */\n        byte c = 127;\n        System.out.println(c + 10);  //输出： 137\n        int d = c + 10;\n        System.out.println(d);  //输出： 137，与上一句是一样的，java底层是int计算的。\n    }\n}\n```\n\n- ## int转byte\n```\npublic class Test01 {\n    public static void main(String[] args) {\n        int i = 128;\n        byte j = (byte) i;  //不强转编译报错\n        System.out.println(j);  //输出： -128\n        int m = -129;\n        byte n = (byte) m;  //不强转编译报错\n        System.out.println(n);  //输出： 127\n        int a = 127;\n        byte b = (byte) a;  //不强转编译报错\n        System.out.println(b);  //输出： 127\n        byte e = 127;  //这里字面量是int，为什么不用强转呢，jvm做了处理\n        System.out.println(e);  //输出： 127\n        byte c = 127;\n        byte d = 1;\n        byte e = c + d;  //error，编译报错，必须加上强转。因为java计算是通过int的。\n    }\n}\n```\n[TODO:计算一下为什么128变成了-128]\n\n# byte的包装类\nbyte的包装类就是Byte，列举一下常见方法\n\n```\n- toString(byte b)  //静态的，调用了Integer.toString()\n- ByteCache() //不是很懂，也不是静态方法啊\n- parseByte(String s) //超过范围或者不是数字会报：NumberFormatException，调用了Integer.parseInt()\n- valueOf() //把括号里的参数变成Byte对象，超过范围或者不是数字会报：NumberFormatException\n- byteValue() //返回Byte里的byte\n- shortValue() //返回short，代码里加了强转，平时不写是隐式类型转换，jvm实现的。\n- intValue(),longValue() //同上\n- floatValue(),doubleValue() //同上，但是不知道精度是否会丢失【TODO】\n- toString() //源码里调用了Integer.toString，非静态\n- hashCode() //返回这个类的hashCode\n- equals() //直接比byte了，也不用比hashCode了\n- compareTo(Byte anotherByte) //和另外一个Byte比较大小\n- compare(byte x, byte y) //静态方法\n\n```\n\nByteCache可以查看[128的hashCode共享](http://blog.csdn.net/mazhimazh/article/details/17681787)\n\n```\npublic class Test01 {\n    public static void main(String[] args) {\n        System.out.println(Byte.toString((byte) 1));  //1\n        System.out.println(Byte.parseByte(\"129\")); //NumberFormatException：Value out of range. Value:\"129\" Radix:10\n        System.out.println(Byte.parseByte(\"x\")); //NumberFormatException：For input string: \"x\"\n        System.out.println(Byte.parseByte(\"20\")); //20，调用了重写的toString方法\n        System.out.println(Byte.valueOf(\"20\")); //20，与parseByte()的区别是返回类型不同，这个返回Byte\n        System.out.println(Byte.valueOf((byte) 130)); //-126，与parseByte()的区别是返回类型不同，这个返回Byte\n        Byte testByte = new Byte(\"-5\");\n        System.out.println(testByte.shortValue()); //-5\n        System.out.println(testByte.intValue()); //-5\n        System.out.println(testByte.longValue()); //-5\n        System.out.println(testByte.floatValue()); //-5.0\n        System.out.println(testByte.doubleValue()); //-5.0\n    }\n}\n```\n\nByte是final类型的类，也就是不可变的。（其他的基本类型的包装类也都是final类型的）下面的例子可以验证。\n```java\n/**\n * 试验包装类的自增。\n */\npublic class Test001 {\n    private static void add(Byte b) {\n        b = b++;\n    }\n\n    public static void main(String[] args) {\n        Byte a = 127;\n        Byte b = 127;\n        add(++a);\n        System.out.println(a);  //-128，自动拆箱\n        add(b);\n        System.out.println(b);  //127\n    }\n}\n```\n\n\n\n\n\n\n","slug":"java基础/java的八种基本类型~byte","published":1,"updated":"2017-03-01T06:22:30.555Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1qae49n001gc812g29fspoc","content":"<ol>\n<li>byte可表示的位数</li>\n<li>byte与int互转</li>\n<li>byte的包装类</li>\n<li>byte与字节流（TODO）</li>\n</ol>\n<h1 id=\"byte可表示的位数\"><a href=\"#byte可表示的位数\" class=\"headerlink\" title=\"byte可表示的位数\"></a>byte可表示的位数</h1><blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; -2^7</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; \\downarrow</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;  2^7-1</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>byte在java中是一字节的，而一字节在内存中是8bit，而8bit中，<br>第一位又是符号位，那只有7位可以表示数字，所以</p>\n<ul>\n<li>byte能表示的最大的正数在内存中是0111 1111，即 127</li>\n<li>byte能表示的最小的负数在内存中是1000 0000，即-128  </li>\n</ul>\n<p>可以用byte的包装类Byte.java的静态常量来查看<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Test01 &#123;</div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        System.out.println(Byte.MIN_VALUE + &quot;~&quot; + Byte.MAX_VALUE);  //输出：-128~127</div><div class=\"line\">        byte b = 128; //error，编译报错</div><div class=\"line\">        byte c = 127; //编译通过</div><div class=\"line\">        byte d = (byte)128; //编译通过</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"byte与int互转\"><a href=\"#byte与int互转\" class=\"headerlink\" title=\"byte与int互转\"></a>byte与int互转</h1><ul>\n<li><h2 id=\"byte转int\"><a href=\"#byte转int\" class=\"headerlink\" title=\"byte转int\"></a>byte转int</h2><p>好像也没什么需要注意的…</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Test01 &#123;</div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        /**</div><div class=\"line\">         * int在byte范围内</div><div class=\"line\">         */</div><div class=\"line\">        byte b = 10;</div><div class=\"line\">        System.out.println(b + 10);  //输出： 20</div><div class=\"line\">        int b1 = b;</div><div class=\"line\">        System.out.println(b1);  //输出： 10</div><div class=\"line\">        /**</div><div class=\"line\">         * int不在byte范围内</div><div class=\"line\">         */</div><div class=\"line\">        byte c = 127;</div><div class=\"line\">        System.out.println(c + 10);  //输出： 137</div><div class=\"line\">        int d = c + 10;</div><div class=\"line\">        System.out.println(d);  //输出： 137，与上一句是一样的，java底层是int计算的。</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><h2 id=\"int转byte\"><a href=\"#int转byte\" class=\"headerlink\" title=\"int转byte\"></a>int转byte</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Test01 &#123;</div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        int i = 128;</div><div class=\"line\">        byte j = (byte) i;  //不强转编译报错</div><div class=\"line\">        System.out.println(j);  //输出： -128</div><div class=\"line\">        int m = -129;</div><div class=\"line\">        byte n = (byte) m;  //不强转编译报错</div><div class=\"line\">        System.out.println(n);  //输出： 127</div><div class=\"line\">        int a = 127;</div><div class=\"line\">        byte b = (byte) a;  //不强转编译报错</div><div class=\"line\">        System.out.println(b);  //输出： 127</div><div class=\"line\">        byte e = 127;  //这里字面量是int，为什么不用强转呢，jvm做了处理</div><div class=\"line\">        System.out.println(e);  //输出： 127</div><div class=\"line\">        byte c = 127;</div><div class=\"line\">        byte d = 1;</div><div class=\"line\">        byte e = c + d;  //error，编译报错，必须加上强转。因为java计算是通过int的。</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>[TODO:计算一下为什么128变成了-128]</p>\n<h1 id=\"byte的包装类\"><a href=\"#byte的包装类\" class=\"headerlink\" title=\"byte的包装类\"></a>byte的包装类</h1><p>byte的包装类就是Byte，列举一下常见方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">- toString(byte b)  //静态的，调用了Integer.toString()</div><div class=\"line\">- ByteCache() //不是很懂，也不是静态方法啊</div><div class=\"line\">- parseByte(String s) //超过范围或者不是数字会报：NumberFormatException，调用了Integer.parseInt()</div><div class=\"line\">- valueOf() //把括号里的参数变成Byte对象，超过范围或者不是数字会报：NumberFormatException</div><div class=\"line\">- byteValue() //返回Byte里的byte</div><div class=\"line\">- shortValue() //返回short，代码里加了强转，平时不写是隐式类型转换，jvm实现的。</div><div class=\"line\">- intValue(),longValue() //同上</div><div class=\"line\">- floatValue(),doubleValue() //同上，但是不知道精度是否会丢失【TODO】</div><div class=\"line\">- toString() //源码里调用了Integer.toString，非静态</div><div class=\"line\">- hashCode() //返回这个类的hashCode</div><div class=\"line\">- equals() //直接比byte了，也不用比hashCode了</div><div class=\"line\">- compareTo(Byte anotherByte) //和另外一个Byte比较大小</div><div class=\"line\">- compare(byte x, byte y) //静态方法</div></pre></td></tr></table></figure>\n<p>ByteCache可以查看<a href=\"http://blog.csdn.net/mazhimazh/article/details/17681787\" target=\"_blank\" rel=\"external\">128的hashCode共享</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Test01 &#123;</div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        System.out.println(Byte.toString((byte) 1));  //1</div><div class=\"line\">        System.out.println(Byte.parseByte(&quot;129&quot;)); //NumberFormatException：Value out of range. Value:&quot;129&quot; Radix:10</div><div class=\"line\">        System.out.println(Byte.parseByte(&quot;x&quot;)); //NumberFormatException：For input string: &quot;x&quot;</div><div class=\"line\">        System.out.println(Byte.parseByte(&quot;20&quot;)); //20，调用了重写的toString方法</div><div class=\"line\">        System.out.println(Byte.valueOf(&quot;20&quot;)); //20，与parseByte()的区别是返回类型不同，这个返回Byte</div><div class=\"line\">        System.out.println(Byte.valueOf((byte) 130)); //-126，与parseByte()的区别是返回类型不同，这个返回Byte</div><div class=\"line\">        Byte testByte = new Byte(&quot;-5&quot;);</div><div class=\"line\">        System.out.println(testByte.shortValue()); //-5</div><div class=\"line\">        System.out.println(testByte.intValue()); //-5</div><div class=\"line\">        System.out.println(testByte.longValue()); //-5</div><div class=\"line\">        System.out.println(testByte.floatValue()); //-5.0</div><div class=\"line\">        System.out.println(testByte.doubleValue()); //-5.0</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Byte是final类型的类，也就是不可变的。（其他的基本类型的包装类也都是final类型的）下面的例子可以验证。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 试验包装类的自增。</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test001</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(Byte b)</span> </span>&#123;</div><div class=\"line\">        b = b++;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        Byte a = <span class=\"number\">127</span>;</div><div class=\"line\">        Byte b = <span class=\"number\">127</span>;</div><div class=\"line\">        add(++a);</div><div class=\"line\">        System.out.println(a);  <span class=\"comment\">//-128，自动拆箱</span></div><div class=\"line\">        add(b);</div><div class=\"line\">        System.out.println(b);  <span class=\"comment\">//127</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<ol>\n<li>byte可表示的位数</li>\n<li>byte与int互转</li>\n<li>byte的包装类</li>\n<li>byte与字节流（TODO）</li>\n</ol>\n<h1 id=\"byte可表示的位数\"><a href=\"#byte可表示的位数\" class=\"headerlink\" title=\"byte可表示的位数\"></a>byte可表示的位数</h1><blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; -2^7</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; \\downarrow</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;  2^7-1</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>byte在java中是一字节的，而一字节在内存中是8bit，而8bit中，<br>第一位又是符号位，那只有7位可以表示数字，所以</p>\n<ul>\n<li>byte能表示的最大的正数在内存中是0111 1111，即 127</li>\n<li>byte能表示的最小的负数在内存中是1000 0000，即-128  </li>\n</ul>\n<p>可以用byte的包装类Byte.java的静态常量来查看<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Test01 &#123;</div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        System.out.println(Byte.MIN_VALUE + &quot;~&quot; + Byte.MAX_VALUE);  //输出：-128~127</div><div class=\"line\">        byte b = 128; //error，编译报错</div><div class=\"line\">        byte c = 127; //编译通过</div><div class=\"line\">        byte d = (byte)128; //编译通过</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"byte与int互转\"><a href=\"#byte与int互转\" class=\"headerlink\" title=\"byte与int互转\"></a>byte与int互转</h1><ul>\n<li><h2 id=\"byte转int\"><a href=\"#byte转int\" class=\"headerlink\" title=\"byte转int\"></a>byte转int</h2><p>好像也没什么需要注意的…</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Test01 &#123;</div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        /**</div><div class=\"line\">         * int在byte范围内</div><div class=\"line\">         */</div><div class=\"line\">        byte b = 10;</div><div class=\"line\">        System.out.println(b + 10);  //输出： 20</div><div class=\"line\">        int b1 = b;</div><div class=\"line\">        System.out.println(b1);  //输出： 10</div><div class=\"line\">        /**</div><div class=\"line\">         * int不在byte范围内</div><div class=\"line\">         */</div><div class=\"line\">        byte c = 127;</div><div class=\"line\">        System.out.println(c + 10);  //输出： 137</div><div class=\"line\">        int d = c + 10;</div><div class=\"line\">        System.out.println(d);  //输出： 137，与上一句是一样的，java底层是int计算的。</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><h2 id=\"int转byte\"><a href=\"#int转byte\" class=\"headerlink\" title=\"int转byte\"></a>int转byte</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Test01 &#123;</div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        int i = 128;</div><div class=\"line\">        byte j = (byte) i;  //不强转编译报错</div><div class=\"line\">        System.out.println(j);  //输出： -128</div><div class=\"line\">        int m = -129;</div><div class=\"line\">        byte n = (byte) m;  //不强转编译报错</div><div class=\"line\">        System.out.println(n);  //输出： 127</div><div class=\"line\">        int a = 127;</div><div class=\"line\">        byte b = (byte) a;  //不强转编译报错</div><div class=\"line\">        System.out.println(b);  //输出： 127</div><div class=\"line\">        byte e = 127;  //这里字面量是int，为什么不用强转呢，jvm做了处理</div><div class=\"line\">        System.out.println(e);  //输出： 127</div><div class=\"line\">        byte c = 127;</div><div class=\"line\">        byte d = 1;</div><div class=\"line\">        byte e = c + d;  //error，编译报错，必须加上强转。因为java计算是通过int的。</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>[TODO:计算一下为什么128变成了-128]</p>\n<h1 id=\"byte的包装类\"><a href=\"#byte的包装类\" class=\"headerlink\" title=\"byte的包装类\"></a>byte的包装类</h1><p>byte的包装类就是Byte，列举一下常见方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">- toString(byte b)  //静态的，调用了Integer.toString()</div><div class=\"line\">- ByteCache() //不是很懂，也不是静态方法啊</div><div class=\"line\">- parseByte(String s) //超过范围或者不是数字会报：NumberFormatException，调用了Integer.parseInt()</div><div class=\"line\">- valueOf() //把括号里的参数变成Byte对象，超过范围或者不是数字会报：NumberFormatException</div><div class=\"line\">- byteValue() //返回Byte里的byte</div><div class=\"line\">- shortValue() //返回short，代码里加了强转，平时不写是隐式类型转换，jvm实现的。</div><div class=\"line\">- intValue(),longValue() //同上</div><div class=\"line\">- floatValue(),doubleValue() //同上，但是不知道精度是否会丢失【TODO】</div><div class=\"line\">- toString() //源码里调用了Integer.toString，非静态</div><div class=\"line\">- hashCode() //返回这个类的hashCode</div><div class=\"line\">- equals() //直接比byte了，也不用比hashCode了</div><div class=\"line\">- compareTo(Byte anotherByte) //和另外一个Byte比较大小</div><div class=\"line\">- compare(byte x, byte y) //静态方法</div></pre></td></tr></table></figure>\n<p>ByteCache可以查看<a href=\"http://blog.csdn.net/mazhimazh/article/details/17681787\">128的hashCode共享</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Test01 &#123;</div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        System.out.println(Byte.toString((byte) 1));  //1</div><div class=\"line\">        System.out.println(Byte.parseByte(&quot;129&quot;)); //NumberFormatException：Value out of range. Value:&quot;129&quot; Radix:10</div><div class=\"line\">        System.out.println(Byte.parseByte(&quot;x&quot;)); //NumberFormatException：For input string: &quot;x&quot;</div><div class=\"line\">        System.out.println(Byte.parseByte(&quot;20&quot;)); //20，调用了重写的toString方法</div><div class=\"line\">        System.out.println(Byte.valueOf(&quot;20&quot;)); //20，与parseByte()的区别是返回类型不同，这个返回Byte</div><div class=\"line\">        System.out.println(Byte.valueOf((byte) 130)); //-126，与parseByte()的区别是返回类型不同，这个返回Byte</div><div class=\"line\">        Byte testByte = new Byte(&quot;-5&quot;);</div><div class=\"line\">        System.out.println(testByte.shortValue()); //-5</div><div class=\"line\">        System.out.println(testByte.intValue()); //-5</div><div class=\"line\">        System.out.println(testByte.longValue()); //-5</div><div class=\"line\">        System.out.println(testByte.floatValue()); //-5.0</div><div class=\"line\">        System.out.println(testByte.doubleValue()); //-5.0</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Byte是final类型的类，也就是不可变的。（其他的基本类型的包装类也都是final类型的）下面的例子可以验证。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 试验包装类的自增。</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test001</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(Byte b)</span> </span>&#123;</div><div class=\"line\">        b = b++;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        Byte a = <span class=\"number\">127</span>;</div><div class=\"line\">        Byte b = <span class=\"number\">127</span>;</div><div class=\"line\">        add(++a);</div><div class=\"line\">        System.out.println(a);  <span class=\"comment\">//-128，自动拆箱</span></div><div class=\"line\">        add(b);</div><div class=\"line\">        System.out.println(b);  <span class=\"comment\">//127</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n"},{"title":"Math类中的几种取整方式","date":"2017-02-28T10:42:47.000Z","_content":"\n方法名 | 作用\n---|---\nceil | 天花板，即向上取整，结果大于等于原值\nfloor | 地板，即向下取整，结果小于等于原值\nround | 四舍五入，算法为Math.floor(x+0.5)\n\n### 代码示例\n```java\npublic class test001 {\n\n    public static void main(String[] args) {\n        System.out.println(Math.floor(-10.4));  //-11.0\n        System.out.println(Math.floor(-10.6));  //-11.0\n        System.out.println(Math.floor(10.4));   //10.0\n        System.out.println(Math.floor(10.6));   //10.0\n        \n        System.out.println(Math.ceil(-10.4));  //-10.0\n        System.out.println(Math.ceil(-10.6));  //-10.0\n        System.out.println(Math.ceil(10.4));   //11.0\n        System.out.println(Math.ceil(10.6));   //11.0\n        \n        System.out.println(Math.round(-10.1));  //-10\n        System.out.println(Math.round(-10.5));  //-10\n        System.out.println(Math.round(-10.9));  //-11\n        System.out.println(Math.round(10.1));   //10\n        System.out.println(Math.round(10.5));   //11\n        System.out.println(Math.round(10.9));   //11\n    }\n\n}\n```","source":"_posts/java基础/Math类中的几种取整方式.md","raw":"---\ntitle: Math类中的几种取整方式\ndate: 2017-02-28 18:42:47\ncategories: Java基础\n---\n\n方法名 | 作用\n---|---\nceil | 天花板，即向上取整，结果大于等于原值\nfloor | 地板，即向下取整，结果小于等于原值\nround | 四舍五入，算法为Math.floor(x+0.5)\n\n### 代码示例\n```java\npublic class test001 {\n\n    public static void main(String[] args) {\n        System.out.println(Math.floor(-10.4));  //-11.0\n        System.out.println(Math.floor(-10.6));  //-11.0\n        System.out.println(Math.floor(10.4));   //10.0\n        System.out.println(Math.floor(10.6));   //10.0\n        \n        System.out.println(Math.ceil(-10.4));  //-10.0\n        System.out.println(Math.ceil(-10.6));  //-10.0\n        System.out.println(Math.ceil(10.4));   //11.0\n        System.out.println(Math.ceil(10.6));   //11.0\n        \n        System.out.println(Math.round(-10.1));  //-10\n        System.out.println(Math.round(-10.5));  //-10\n        System.out.println(Math.round(-10.9));  //-11\n        System.out.println(Math.round(10.1));   //10\n        System.out.println(Math.round(10.5));   //11\n        System.out.println(Math.round(10.9));   //11\n    }\n\n}\n```","slug":"java基础/Math类中的几种取整方式","published":1,"updated":"2017-03-01T06:22:59.487Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1qae49r001ic8124tdiz3bp","content":"<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ceil</td>\n<td>天花板，即向上取整，结果大于等于原值</td>\n</tr>\n<tr>\n<td>floor</td>\n<td>地板，即向下取整，结果小于等于原值</td>\n</tr>\n<tr>\n<td>round</td>\n<td>四舍五入，算法为Math.floor(x+0.5)</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test001</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        System.out.println(Math.floor(-<span class=\"number\">10.4</span>));  <span class=\"comment\">//-11.0</span></div><div class=\"line\">        System.out.println(Math.floor(-<span class=\"number\">10.6</span>));  <span class=\"comment\">//-11.0</span></div><div class=\"line\">        System.out.println(Math.floor(<span class=\"number\">10.4</span>));   <span class=\"comment\">//10.0</span></div><div class=\"line\">        System.out.println(Math.floor(<span class=\"number\">10.6</span>));   <span class=\"comment\">//10.0</span></div><div class=\"line\">        </div><div class=\"line\">        System.out.println(Math.ceil(-<span class=\"number\">10.4</span>));  <span class=\"comment\">//-10.0</span></div><div class=\"line\">        System.out.println(Math.ceil(-<span class=\"number\">10.6</span>));  <span class=\"comment\">//-10.0</span></div><div class=\"line\">        System.out.println(Math.ceil(<span class=\"number\">10.4</span>));   <span class=\"comment\">//11.0</span></div><div class=\"line\">        System.out.println(Math.ceil(<span class=\"number\">10.6</span>));   <span class=\"comment\">//11.0</span></div><div class=\"line\">        </div><div class=\"line\">        System.out.println(Math.round(-<span class=\"number\">10.1</span>));  <span class=\"comment\">//-10</span></div><div class=\"line\">        System.out.println(Math.round(-<span class=\"number\">10.5</span>));  <span class=\"comment\">//-10</span></div><div class=\"line\">        System.out.println(Math.round(-<span class=\"number\">10.9</span>));  <span class=\"comment\">//-11</span></div><div class=\"line\">        System.out.println(Math.round(<span class=\"number\">10.1</span>));   <span class=\"comment\">//10</span></div><div class=\"line\">        System.out.println(Math.round(<span class=\"number\">10.5</span>));   <span class=\"comment\">//11</span></div><div class=\"line\">        System.out.println(Math.round(<span class=\"number\">10.9</span>));   <span class=\"comment\">//11</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"","more":"<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ceil</td>\n<td>天花板，即向上取整，结果大于等于原值</td>\n</tr>\n<tr>\n<td>floor</td>\n<td>地板，即向下取整，结果小于等于原值</td>\n</tr>\n<tr>\n<td>round</td>\n<td>四舍五入，算法为Math.floor(x+0.5)</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test001</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        System.out.println(Math.floor(-<span class=\"number\">10.4</span>));  <span class=\"comment\">//-11.0</span></div><div class=\"line\">        System.out.println(Math.floor(-<span class=\"number\">10.6</span>));  <span class=\"comment\">//-11.0</span></div><div class=\"line\">        System.out.println(Math.floor(<span class=\"number\">10.4</span>));   <span class=\"comment\">//10.0</span></div><div class=\"line\">        System.out.println(Math.floor(<span class=\"number\">10.6</span>));   <span class=\"comment\">//10.0</span></div><div class=\"line\">        </div><div class=\"line\">        System.out.println(Math.ceil(-<span class=\"number\">10.4</span>));  <span class=\"comment\">//-10.0</span></div><div class=\"line\">        System.out.println(Math.ceil(-<span class=\"number\">10.6</span>));  <span class=\"comment\">//-10.0</span></div><div class=\"line\">        System.out.println(Math.ceil(<span class=\"number\">10.4</span>));   <span class=\"comment\">//11.0</span></div><div class=\"line\">        System.out.println(Math.ceil(<span class=\"number\">10.6</span>));   <span class=\"comment\">//11.0</span></div><div class=\"line\">        </div><div class=\"line\">        System.out.println(Math.round(-<span class=\"number\">10.1</span>));  <span class=\"comment\">//-10</span></div><div class=\"line\">        System.out.println(Math.round(-<span class=\"number\">10.5</span>));  <span class=\"comment\">//-10</span></div><div class=\"line\">        System.out.println(Math.round(-<span class=\"number\">10.9</span>));  <span class=\"comment\">//-11</span></div><div class=\"line\">        System.out.println(Math.round(<span class=\"number\">10.1</span>));   <span class=\"comment\">//10</span></div><div class=\"line\">        System.out.println(Math.round(<span class=\"number\">10.5</span>));   <span class=\"comment\">//11</span></div><div class=\"line\">        System.out.println(Math.round(<span class=\"number\">10.9</span>));   <span class=\"comment\">//11</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"switch的用法","date":"2017-02-28T10:42:47.000Z","_content":"\n## 前言\nswitch-case语句完全可以与if-else语句互转，但通常来说，switch-case语句执行效率要高。\n\ndefault在当前switch找不到匹配的case时执行。default并不是必须的。\n\n一旦case匹配，就会顺序执行后面的程序代码，而不管后面的case是否匹配，直到遇见break。（所以这里有坑要避免）\n\n# switch支持的类型\njava7的switch支持一下几种类型\n\n类型 |\n---|---\nchar | \nCharacter | \nbyte |\nByte |\nint |\nInteger |\nshort |\nShort |\nString(java7) |\nenum(java5) |\n\n# 代码实例\n### default的使用\ndefault在当前switch找不到匹配的case时执行。default并不是必须的。default并不一定要写在最后，但是好怪。。\n```java\npublic class Test004 {\n    public static void main(String[] args) {\n        int i = 4;\n        switch (i){\n            case 1:      //这个值要和括号里变量的类型一样，不然编译报错\n                System.out.print(1);\n                break;\n            default:\n                System.out.print(0);\n            case 5:\n                System.out.print(5);\n        }\n    }\n}\n```\n**输出结果:** 05  \n因为default后面没有break，所以会执行case5。如前言里所说。\n\n### switch使用枚举\n```java\npublic class Test005 {\n\n    static enum E {\n        A, B, C, D\n    }\n\n    public static void main(String[] args) {\n        E e = E.B;    //注意不要写成Enum e = E.b; 否则case那句会编译报错\n        switch (e) {\n            case A:\n                System.out.println(1);\n                break;\n            default:\n                System.out.println(0);\n        }\n    }\n\n}\n```\n\n### 忘记写break的陷阱\n```java\npublic class Test007 {\n    public static void main(String[] args) {\n        int i = 2;\n        switch (i){\n            case 1:\n                System.out.print(1);\n            case 2:\n                System.out.print(2);\n            case 3:\n                System.out.print(3);\n            default:\n                System.out.print(0);\n        }\n    }\n}\n```\n**输出结果:** 230  ","source":"_posts/java基础/switch的用法.md","raw":"---\ntitle: switch的用法\ndate: 2017-02-28 18:42:47\ncategories: Java基础\n---\n\n## 前言\nswitch-case语句完全可以与if-else语句互转，但通常来说，switch-case语句执行效率要高。\n\ndefault在当前switch找不到匹配的case时执行。default并不是必须的。\n\n一旦case匹配，就会顺序执行后面的程序代码，而不管后面的case是否匹配，直到遇见break。（所以这里有坑要避免）\n\n# switch支持的类型\njava7的switch支持一下几种类型\n\n类型 |\n---|---\nchar | \nCharacter | \nbyte |\nByte |\nint |\nInteger |\nshort |\nShort |\nString(java7) |\nenum(java5) |\n\n# 代码实例\n### default的使用\ndefault在当前switch找不到匹配的case时执行。default并不是必须的。default并不一定要写在最后，但是好怪。。\n```java\npublic class Test004 {\n    public static void main(String[] args) {\n        int i = 4;\n        switch (i){\n            case 1:      //这个值要和括号里变量的类型一样，不然编译报错\n                System.out.print(1);\n                break;\n            default:\n                System.out.print(0);\n            case 5:\n                System.out.print(5);\n        }\n    }\n}\n```\n**输出结果:** 05  \n因为default后面没有break，所以会执行case5。如前言里所说。\n\n### switch使用枚举\n```java\npublic class Test005 {\n\n    static enum E {\n        A, B, C, D\n    }\n\n    public static void main(String[] args) {\n        E e = E.B;    //注意不要写成Enum e = E.b; 否则case那句会编译报错\n        switch (e) {\n            case A:\n                System.out.println(1);\n                break;\n            default:\n                System.out.println(0);\n        }\n    }\n\n}\n```\n\n### 忘记写break的陷阱\n```java\npublic class Test007 {\n    public static void main(String[] args) {\n        int i = 2;\n        switch (i){\n            case 1:\n                System.out.print(1);\n            case 2:\n                System.out.print(2);\n            case 3:\n                System.out.print(3);\n            default:\n                System.out.print(0);\n        }\n    }\n}\n```\n**输出结果:** 230  ","slug":"java基础/switch的用法","published":1,"updated":"2017-03-01T06:23:07.677Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1qae4a7001kc8126ewva3f6","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>switch-case语句完全可以与if-else语句互转，但通常来说，switch-case语句执行效率要高。</p>\n<p>default在当前switch找不到匹配的case时执行。default并不是必须的。</p>\n<p>一旦case匹配，就会顺序执行后面的程序代码，而不管后面的case是否匹配，直到遇见break。（所以这里有坑要避免）</p>\n<h1 id=\"switch支持的类型\"><a href=\"#switch支持的类型\" class=\"headerlink\" title=\"switch支持的类型\"></a>switch支持的类型</h1><p>java7的switch支持一下几种类型</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>char</td>\n<td></td>\n</tr>\n<tr>\n<td>Character</td>\n<td></td>\n</tr>\n<tr>\n<td>byte</td>\n<td></td>\n</tr>\n<tr>\n<td>Byte</td>\n<td></td>\n</tr>\n<tr>\n<td>int</td>\n<td></td>\n</tr>\n<tr>\n<td>Integer</td>\n<td></td>\n</tr>\n<tr>\n<td>short</td>\n<td></td>\n</tr>\n<tr>\n<td>Short</td>\n<td></td>\n</tr>\n<tr>\n<td>String(java7)</td>\n<td></td>\n</tr>\n<tr>\n<td>enum(java5)</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"代码实例\"><a href=\"#代码实例\" class=\"headerlink\" title=\"代码实例\"></a>代码实例</h1><h3 id=\"default的使用\"><a href=\"#default的使用\" class=\"headerlink\" title=\"default的使用\"></a>default的使用</h3><p>default在当前switch找不到匹配的case时执行。default并不是必须的。default并不一定要写在最后，但是好怪。。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test004</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"number\">4</span>;</div><div class=\"line\">        <span class=\"keyword\">switch</span> (i)&#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">1</span>:      <span class=\"comment\">//这个值要和括号里变量的类型一样，不然编译报错</span></div><div class=\"line\">                System.out.print(<span class=\"number\">1</span>);</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">default</span>:</div><div class=\"line\">                System.out.print(<span class=\"number\">0</span>);</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">5</span>:</div><div class=\"line\">                System.out.print(<span class=\"number\">5</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>输出结果:</strong> 05<br>因为default后面没有break，所以会执行case5。如前言里所说。</p>\n<h3 id=\"switch使用枚举\"><a href=\"#switch使用枚举\" class=\"headerlink\" title=\"switch使用枚举\"></a>switch使用枚举</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test005</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">enum</span> E &#123;</div><div class=\"line\">        A, B, C, D</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        E e = E.B;    <span class=\"comment\">//注意不要写成Enum e = E.b; 否则case那句会编译报错</span></div><div class=\"line\">        <span class=\"keyword\">switch</span> (e) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> A:</div><div class=\"line\">                System.out.println(<span class=\"number\">1</span>);</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">default</span>:</div><div class=\"line\">                System.out.println(<span class=\"number\">0</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"忘记写break的陷阱\"><a href=\"#忘记写break的陷阱\" class=\"headerlink\" title=\"忘记写break的陷阱\"></a>忘记写break的陷阱</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test007</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"number\">2</span>;</div><div class=\"line\">        <span class=\"keyword\">switch</span> (i)&#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</div><div class=\"line\">                System.out.print(<span class=\"number\">1</span>);</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</div><div class=\"line\">                System.out.print(<span class=\"number\">2</span>);</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</div><div class=\"line\">                System.out.print(<span class=\"number\">3</span>);</div><div class=\"line\">            <span class=\"keyword\">default</span>:</div><div class=\"line\">                System.out.print(<span class=\"number\">0</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>输出结果:</strong> 230  </p>\n","excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>switch-case语句完全可以与if-else语句互转，但通常来说，switch-case语句执行效率要高。</p>\n<p>default在当前switch找不到匹配的case时执行。default并不是必须的。</p>\n<p>一旦case匹配，就会顺序执行后面的程序代码，而不管后面的case是否匹配，直到遇见break。（所以这里有坑要避免）</p>\n<h1 id=\"switch支持的类型\"><a href=\"#switch支持的类型\" class=\"headerlink\" title=\"switch支持的类型\"></a>switch支持的类型</h1><p>java7的switch支持一下几种类型</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>char</td>\n<td></td>\n</tr>\n<tr>\n<td>Character</td>\n<td></td>\n</tr>\n<tr>\n<td>byte</td>\n<td></td>\n</tr>\n<tr>\n<td>Byte</td>\n<td></td>\n</tr>\n<tr>\n<td>int</td>\n<td></td>\n</tr>\n<tr>\n<td>Integer</td>\n<td></td>\n</tr>\n<tr>\n<td>short</td>\n<td></td>\n</tr>\n<tr>\n<td>Short</td>\n<td></td>\n</tr>\n<tr>\n<td>String(java7)</td>\n<td></td>\n</tr>\n<tr>\n<td>enum(java5)</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"代码实例\"><a href=\"#代码实例\" class=\"headerlink\" title=\"代码实例\"></a>代码实例</h1><h3 id=\"default的使用\"><a href=\"#default的使用\" class=\"headerlink\" title=\"default的使用\"></a>default的使用</h3><p>default在当前switch找不到匹配的case时执行。default并不是必须的。default并不一定要写在最后，但是好怪。。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test004</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"number\">4</span>;</div><div class=\"line\">        <span class=\"keyword\">switch</span> (i)&#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">1</span>:      <span class=\"comment\">//这个值要和括号里变量的类型一样，不然编译报错</span></div><div class=\"line\">                System.out.print(<span class=\"number\">1</span>);</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">default</span>:</div><div class=\"line\">                System.out.print(<span class=\"number\">0</span>);</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">5</span>:</div><div class=\"line\">                System.out.print(<span class=\"number\">5</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>输出结果:</strong> 05<br>因为default后面没有break，所以会执行case5。如前言里所说。</p>\n<h3 id=\"switch使用枚举\"><a href=\"#switch使用枚举\" class=\"headerlink\" title=\"switch使用枚举\"></a>switch使用枚举</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test005</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">enum</span> E &#123;</div><div class=\"line\">        A, B, C, D</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        E e = E.B;    <span class=\"comment\">//注意不要写成Enum e = E.b; 否则case那句会编译报错</span></div><div class=\"line\">        <span class=\"keyword\">switch</span> (e) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> A:</div><div class=\"line\">                System.out.println(<span class=\"number\">1</span>);</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">default</span>:</div><div class=\"line\">                System.out.println(<span class=\"number\">0</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"忘记写break的陷阱\"><a href=\"#忘记写break的陷阱\" class=\"headerlink\" title=\"忘记写break的陷阱\"></a>忘记写break的陷阱</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test007</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"number\">2</span>;</div><div class=\"line\">        <span class=\"keyword\">switch</span> (i)&#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</div><div class=\"line\">                System.out.print(<span class=\"number\">1</span>);</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</div><div class=\"line\">                System.out.print(<span class=\"number\">2</span>);</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</div><div class=\"line\">                System.out.print(<span class=\"number\">3</span>);</div><div class=\"line\">            <span class=\"keyword\">default</span>:</div><div class=\"line\">                System.out.print(<span class=\"number\">0</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>输出结果:</strong> 230  </p>\n"},{"title":"Linux熵池导致的Tomcat启动缓慢","date":"2017-03-29T03:34:47.000Z","_content":"\n在阿里云的Linux服务器下，启动一个项目，查看Log4J日志，显示项目已经启动完成。\n\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-3-29/64688158-file_1490765179140_13adf.png)\n\n但是页面在请求的时候，一直在等待响应，大概要等5分钟，才能响应成功。\n\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-3-29/82861973-file_1490765195892_6ad8.png)\n\n这里记录一下解决的方法。\n\n<!-- more -->\n\n项目启动后，查看Tomcat目录/logs/catalina.out的日志。\n\n发现\n> Server startup in 338255 ms\n\n竟然花了338秒。\n\n继续查看日志，发现大部分时间都花在了SessionIdGenerator这个类的createSecureRandom()方法上。\n> Mar 28, 2017 3:38:35 PM org.apache.catalina.util.SessionIdGenerator createSecureRandom  \nINFO: Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [286,439] milliseconds.\n\n大致意思是，Tomcat在生成sessionId的时候，用了叫做`SHA1PRNG`的算法，这个算法依赖于Linux下的熵池。\n\n项目启动后，通过`jstack pid > log.txt`命令，如下图，观察项目中线程的运行情况，也确实看到有线程在执行createSecureRandom()方法。  \n**PS：pid就是项目的进程id。`jstack`可能会提示无效的命令，这个时候就要到jdk/bin目录下去执行`jstack`命令了。**\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-3-29/12999901-file_1490756527994_11216.png)\n\n### 两种改法\n**我试了第一种未生效，第二种生效了。**\n1. 把%JAVA_HOME%/jre/lib/security/java.security下的\n\n    `securerandom.source=file:/dev/random`\n\n    改成\n\n    `securerandom.source=file:/dev/./urandom`\n\n2. 在启动参数中加上` -Djava.security.egd=file:/dev/./urandom`\n\n    如图，我在catalina.sh加上了这么一句。\n    \n    ![image](http://ok7wlv1ee.bkt.clouddn.com/17-3-29/95284874-file_1490756122738_99d5.png)\n\n### 效果\n> 信息: Server startup in 37857 ms\n\n生效后，查看catalina.out日志，发现花了37秒，相比设置前快了十倍。\n\n## 题外话\n\n说点自己的理解，这里就不摘用很高深的术语了。\n\n上面说到的优化方式在[Tomcat的启动优化文档](https://wiki.apache.org/tomcat/HowTo/FasterStartUp)里也提到了。\n\n其他的优化有去掉不必要的jar包依赖（Maven把scope设置成private）等等。\n\n### Log4J中的日志\nLog4J中显示的加载完成，只是Spring框架加载完成了。\n\n我们知道Tomcat是一个Servlet容器，而生成sessionId是容器这块的。容器没加载完毕，就算Spring加载完毕，也是算没有启动完成的。\n\n### random和urandom的区别\n上面提到的第一种改法是把random改成了urandom。两个有什么区别呢？\n\n网上的结论是random更加安全，产生的是真正的随机数，而urandom是‘伪’随机数，可能没有random来的安全。\n\n这些随机数是依赖噪声产生的，鼠标移动，键盘键入，I/O等就会产生噪声。\n\n而为什么有urandom就变快了呢？这里就有个熵池的概念，`SHA1PRNG`算法根据熵池里的熵（我的理解熵就是随机数）来计算，\nrandom是阻塞的，也就是说使用random的时候，如果熵池空了，那就会阻塞线程至熵池里的熵够用为止。而urandom是非阻塞的。\n\n### 为什么是/dev/./urandom\n据说是jdk的bug，如果不加`/./`的话，最后采用的还是random的。\n\n### 关于熵池的补种\n除了上面提到的两种办法，还有一种办法就是使用工具来补种，也就是补充熵池，可以使用`rng-tools`工具。\n","source":"_posts/Tomcat/Linux熵池导致的Tomcat启动缓慢.md","raw":"---\ntitle: Linux熵池导致的Tomcat启动缓慢\ndate: 2017-03-29 11:34:47\ncategories: Tomcat\n---\n\n在阿里云的Linux服务器下，启动一个项目，查看Log4J日志，显示项目已经启动完成。\n\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-3-29/64688158-file_1490765179140_13adf.png)\n\n但是页面在请求的时候，一直在等待响应，大概要等5分钟，才能响应成功。\n\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-3-29/82861973-file_1490765195892_6ad8.png)\n\n这里记录一下解决的方法。\n\n<!-- more -->\n\n项目启动后，查看Tomcat目录/logs/catalina.out的日志。\n\n发现\n> Server startup in 338255 ms\n\n竟然花了338秒。\n\n继续查看日志，发现大部分时间都花在了SessionIdGenerator这个类的createSecureRandom()方法上。\n> Mar 28, 2017 3:38:35 PM org.apache.catalina.util.SessionIdGenerator createSecureRandom  \nINFO: Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [286,439] milliseconds.\n\n大致意思是，Tomcat在生成sessionId的时候，用了叫做`SHA1PRNG`的算法，这个算法依赖于Linux下的熵池。\n\n项目启动后，通过`jstack pid > log.txt`命令，如下图，观察项目中线程的运行情况，也确实看到有线程在执行createSecureRandom()方法。  \n**PS：pid就是项目的进程id。`jstack`可能会提示无效的命令，这个时候就要到jdk/bin目录下去执行`jstack`命令了。**\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-3-29/12999901-file_1490756527994_11216.png)\n\n### 两种改法\n**我试了第一种未生效，第二种生效了。**\n1. 把%JAVA_HOME%/jre/lib/security/java.security下的\n\n    `securerandom.source=file:/dev/random`\n\n    改成\n\n    `securerandom.source=file:/dev/./urandom`\n\n2. 在启动参数中加上` -Djava.security.egd=file:/dev/./urandom`\n\n    如图，我在catalina.sh加上了这么一句。\n    \n    ![image](http://ok7wlv1ee.bkt.clouddn.com/17-3-29/95284874-file_1490756122738_99d5.png)\n\n### 效果\n> 信息: Server startup in 37857 ms\n\n生效后，查看catalina.out日志，发现花了37秒，相比设置前快了十倍。\n\n## 题外话\n\n说点自己的理解，这里就不摘用很高深的术语了。\n\n上面说到的优化方式在[Tomcat的启动优化文档](https://wiki.apache.org/tomcat/HowTo/FasterStartUp)里也提到了。\n\n其他的优化有去掉不必要的jar包依赖（Maven把scope设置成private）等等。\n\n### Log4J中的日志\nLog4J中显示的加载完成，只是Spring框架加载完成了。\n\n我们知道Tomcat是一个Servlet容器，而生成sessionId是容器这块的。容器没加载完毕，就算Spring加载完毕，也是算没有启动完成的。\n\n### random和urandom的区别\n上面提到的第一种改法是把random改成了urandom。两个有什么区别呢？\n\n网上的结论是random更加安全，产生的是真正的随机数，而urandom是‘伪’随机数，可能没有random来的安全。\n\n这些随机数是依赖噪声产生的，鼠标移动，键盘键入，I/O等就会产生噪声。\n\n而为什么有urandom就变快了呢？这里就有个熵池的概念，`SHA1PRNG`算法根据熵池里的熵（我的理解熵就是随机数）来计算，\nrandom是阻塞的，也就是说使用random的时候，如果熵池空了，那就会阻塞线程至熵池里的熵够用为止。而urandom是非阻塞的。\n\n### 为什么是/dev/./urandom\n据说是jdk的bug，如果不加`/./`的话，最后采用的还是random的。\n\n### 关于熵池的补种\n除了上面提到的两种办法，还有一种办法就是使用工具来补种，也就是补充熵池，可以使用`rng-tools`工具。\n","slug":"Tomcat/Linux熵池导致的Tomcat启动缓慢","published":1,"updated":"2017-03-29T06:13:40.651Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1qae4ai001mc812ma6lu725","content":"<p>在阿里云的Linux服务器下，启动一个项目，查看Log4J日志，显示项目已经启动完成。</p>\n<p><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-3-29/64688158-file_1490765179140_13adf.png\" alt=\"image\"></p>\n<p>但是页面在请求的时候，一直在等待响应，大概要等5分钟，才能响应成功。</p>\n<p><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-3-29/82861973-file_1490765195892_6ad8.png\" alt=\"image\"></p>\n<p>这里记录一下解决的方法。</p>\n<a id=\"more\"></a>\n<p>项目启动后，查看Tomcat目录/logs/catalina.out的日志。</p>\n<p>发现</p>\n<blockquote>\n<p>Server startup in 338255 ms</p>\n</blockquote>\n<p>竟然花了338秒。</p>\n<p>继续查看日志，发现大部分时间都花在了SessionIdGenerator这个类的createSecureRandom()方法上。</p>\n<blockquote>\n<p>Mar 28, 2017 3:38:35 PM org.apache.catalina.util.SessionIdGenerator createSecureRandom<br>INFO: Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [286,439] milliseconds.</p>\n</blockquote>\n<p>大致意思是，Tomcat在生成sessionId的时候，用了叫做<code>SHA1PRNG</code>的算法，这个算法依赖于Linux下的熵池。</p>\n<p>项目启动后，通过<code>jstack pid &gt; log.txt</code>命令，如下图，观察项目中线程的运行情况，也确实看到有线程在执行createSecureRandom()方法。<br><strong>PS：pid就是项目的进程id。<code>jstack</code>可能会提示无效的命令，这个时候就要到jdk/bin目录下去执行<code>jstack</code>命令了。</strong><br><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-3-29/12999901-file_1490756527994_11216.png\" alt=\"image\"></p>\n<h3 id=\"两种改法\"><a href=\"#两种改法\" class=\"headerlink\" title=\"两种改法\"></a>两种改法</h3><p><strong>我试了第一种未生效，第二种生效了。</strong></p>\n<ol>\n<li><p>把%JAVA_HOME%/jre/lib/security/java.security下的</p>\n<p> <code>securerandom.source=file:/dev/random</code></p>\n<p> 改成</p>\n<p> <code>securerandom.source=file:/dev/./urandom</code></p>\n</li>\n<li><p>在启动参数中加上<code>-Djava.security.egd=file:/dev/./urandom</code></p>\n<p> 如图，我在catalina.sh加上了这么一句。</p>\n<p> <img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-3-29/95284874-file_1490756122738_99d5.png\" alt=\"image\"></p>\n</li>\n</ol>\n<h3 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h3><blockquote>\n<p>信息: Server startup in 37857 ms</p>\n</blockquote>\n<p>生效后，查看catalina.out日志，发现花了37秒，相比设置前快了十倍。</p>\n<h2 id=\"题外话\"><a href=\"#题外话\" class=\"headerlink\" title=\"题外话\"></a>题外话</h2><p>说点自己的理解，这里就不摘用很高深的术语了。</p>\n<p>上面说到的优化方式在<a href=\"https://wiki.apache.org/tomcat/HowTo/FasterStartUp\" target=\"_blank\" rel=\"external\">Tomcat的启动优化文档</a>里也提到了。</p>\n<p>其他的优化有去掉不必要的jar包依赖（Maven把scope设置成private）等等。</p>\n<h3 id=\"Log4J中的日志\"><a href=\"#Log4J中的日志\" class=\"headerlink\" title=\"Log4J中的日志\"></a>Log4J中的日志</h3><p>Log4J中显示的加载完成，只是Spring框架加载完成了。</p>\n<p>我们知道Tomcat是一个Servlet容器，而生成sessionId是容器这块的。容器没加载完毕，就算Spring加载完毕，也是算没有启动完成的。</p>\n<h3 id=\"random和urandom的区别\"><a href=\"#random和urandom的区别\" class=\"headerlink\" title=\"random和urandom的区别\"></a>random和urandom的区别</h3><p>上面提到的第一种改法是把random改成了urandom。两个有什么区别呢？</p>\n<p>网上的结论是random更加安全，产生的是真正的随机数，而urandom是‘伪’随机数，可能没有random来的安全。</p>\n<p>这些随机数是依赖噪声产生的，鼠标移动，键盘键入，I/O等就会产生噪声。</p>\n<p>而为什么有urandom就变快了呢？这里就有个熵池的概念，<code>SHA1PRNG</code>算法根据熵池里的熵（我的理解熵就是随机数）来计算，<br>random是阻塞的，也就是说使用random的时候，如果熵池空了，那就会阻塞线程至熵池里的熵够用为止。而urandom是非阻塞的。</p>\n<h3 id=\"为什么是-dev-urandom\"><a href=\"#为什么是-dev-urandom\" class=\"headerlink\" title=\"为什么是/dev/./urandom\"></a>为什么是/dev/./urandom</h3><p>据说是jdk的bug，如果不加<code>/./</code>的话，最后采用的还是random的。</p>\n<h3 id=\"关于熵池的补种\"><a href=\"#关于熵池的补种\" class=\"headerlink\" title=\"关于熵池的补种\"></a>关于熵池的补种</h3><p>除了上面提到的两种办法，还有一种办法就是使用工具来补种，也就是补充熵池，可以使用<code>rng-tools</code>工具。</p>\n","excerpt":"<p>在阿里云的Linux服务器下，启动一个项目，查看Log4J日志，显示项目已经启动完成。</p>\n<p><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-3-29/64688158-file_1490765179140_13adf.png\" alt=\"image\"></p>\n<p>但是页面在请求的时候，一直在等待响应，大概要等5分钟，才能响应成功。</p>\n<p><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-3-29/82861973-file_1490765195892_6ad8.png\" alt=\"image\"></p>\n<p>这里记录一下解决的方法。</p>","more":"<p>项目启动后，查看Tomcat目录/logs/catalina.out的日志。</p>\n<p>发现</p>\n<blockquote>\n<p>Server startup in 338255 ms</p>\n</blockquote>\n<p>竟然花了338秒。</p>\n<p>继续查看日志，发现大部分时间都花在了SessionIdGenerator这个类的createSecureRandom()方法上。</p>\n<blockquote>\n<p>Mar 28, 2017 3:38:35 PM org.apache.catalina.util.SessionIdGenerator createSecureRandom<br>INFO: Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [286,439] milliseconds.</p>\n</blockquote>\n<p>大致意思是，Tomcat在生成sessionId的时候，用了叫做<code>SHA1PRNG</code>的算法，这个算法依赖于Linux下的熵池。</p>\n<p>项目启动后，通过<code>jstack pid &gt; log.txt</code>命令，如下图，观察项目中线程的运行情况，也确实看到有线程在执行createSecureRandom()方法。<br><strong>PS：pid就是项目的进程id。<code>jstack</code>可能会提示无效的命令，这个时候就要到jdk/bin目录下去执行<code>jstack</code>命令了。</strong><br><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-3-29/12999901-file_1490756527994_11216.png\" alt=\"image\"></p>\n<h3 id=\"两种改法\"><a href=\"#两种改法\" class=\"headerlink\" title=\"两种改法\"></a>两种改法</h3><p><strong>我试了第一种未生效，第二种生效了。</strong></p>\n<ol>\n<li><p>把%JAVA_HOME%/jre/lib/security/java.security下的</p>\n<p> <code>securerandom.source=file:/dev/random</code></p>\n<p> 改成</p>\n<p> <code>securerandom.source=file:/dev/./urandom</code></p>\n</li>\n<li><p>在启动参数中加上<code>-Djava.security.egd=file:/dev/./urandom</code></p>\n<p> 如图，我在catalina.sh加上了这么一句。</p>\n<p> <img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-3-29/95284874-file_1490756122738_99d5.png\" alt=\"image\"></p>\n</li>\n</ol>\n<h3 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h3><blockquote>\n<p>信息: Server startup in 37857 ms</p>\n</blockquote>\n<p>生效后，查看catalina.out日志，发现花了37秒，相比设置前快了十倍。</p>\n<h2 id=\"题外话\"><a href=\"#题外话\" class=\"headerlink\" title=\"题外话\"></a>题外话</h2><p>说点自己的理解，这里就不摘用很高深的术语了。</p>\n<p>上面说到的优化方式在<a href=\"https://wiki.apache.org/tomcat/HowTo/FasterStartUp\">Tomcat的启动优化文档</a>里也提到了。</p>\n<p>其他的优化有去掉不必要的jar包依赖（Maven把scope设置成private）等等。</p>\n<h3 id=\"Log4J中的日志\"><a href=\"#Log4J中的日志\" class=\"headerlink\" title=\"Log4J中的日志\"></a>Log4J中的日志</h3><p>Log4J中显示的加载完成，只是Spring框架加载完成了。</p>\n<p>我们知道Tomcat是一个Servlet容器，而生成sessionId是容器这块的。容器没加载完毕，就算Spring加载完毕，也是算没有启动完成的。</p>\n<h3 id=\"random和urandom的区别\"><a href=\"#random和urandom的区别\" class=\"headerlink\" title=\"random和urandom的区别\"></a>random和urandom的区别</h3><p>上面提到的第一种改法是把random改成了urandom。两个有什么区别呢？</p>\n<p>网上的结论是random更加安全，产生的是真正的随机数，而urandom是‘伪’随机数，可能没有random来的安全。</p>\n<p>这些随机数是依赖噪声产生的，鼠标移动，键盘键入，I/O等就会产生噪声。</p>\n<p>而为什么有urandom就变快了呢？这里就有个熵池的概念，<code>SHA1PRNG</code>算法根据熵池里的熵（我的理解熵就是随机数）来计算，<br>random是阻塞的，也就是说使用random的时候，如果熵池空了，那就会阻塞线程至熵池里的熵够用为止。而urandom是非阻塞的。</p>\n<h3 id=\"为什么是-dev-urandom\"><a href=\"#为什么是-dev-urandom\" class=\"headerlink\" title=\"为什么是/dev/./urandom\"></a>为什么是/dev/./urandom</h3><p>据说是jdk的bug，如果不加<code>/./</code>的话，最后采用的还是random的。</p>\n<h3 id=\"关于熵池的补种\"><a href=\"#关于熵池的补种\" class=\"headerlink\" title=\"关于熵池的补种\"></a>关于熵池的补种</h3><p>除了上面提到的两种办法，还有一种办法就是使用工具来补种，也就是补充熵池，可以使用<code>rng-tools</code>工具。</p>"},{"title":"ResponseEntity和@ResponseBody的区别","date":"2017-03-03T03:34:47.000Z","_content":"## 问题\n我在controller里定义了两个简单的handler来返回一个消息。\n```java\n@RequestMapping(value = \"/message\")\n@ResponseBody\npublic Message get() {\n    return new Message(penguinCounter.incrementAndGet() + \" penguin!\");\n}\n```\n我也可以用下面这种形式\n```java\n@RequestMapping(value = \"/message\")\nResponseEntity<Message> get() {\n    Message message = new Message(penguinCounter.incrementAndGet() + \" penguin!\");\n    return new ResponseEntity<Message>(message, HttpStatus.OK);\n}\n```\n那么这两种实现方式有什么区别呢？\n## 答案\nResponseEntity可以更加灵活的在response里添加header信息。\n\n通过[Spring官方文档](http://docs.spring.io/spring/docs/3.0.x/javadoc-api/org/springframework/http/ResponseEntity.html)里的第四个构造函数\n```java\nResponseEntity(T body, MultiValueMap<String,String> headers, HttpStatus statusCode) \n```\n比较常用的headers有Status,Content-Type和Cache-Control。\n\n如果不需要自己设置，使用@ResponseBody会稍微简便一点。\n","source":"_posts/Spring/ResponseEntity和@ResponseBody的区别.md","raw":"---\ntitle: ResponseEntity和@ResponseBody的区别\ndate: 2017-03-03 11:34:47\ncategories: Spring\n---\n## 问题\n我在controller里定义了两个简单的handler来返回一个消息。\n```java\n@RequestMapping(value = \"/message\")\n@ResponseBody\npublic Message get() {\n    return new Message(penguinCounter.incrementAndGet() + \" penguin!\");\n}\n```\n我也可以用下面这种形式\n```java\n@RequestMapping(value = \"/message\")\nResponseEntity<Message> get() {\n    Message message = new Message(penguinCounter.incrementAndGet() + \" penguin!\");\n    return new ResponseEntity<Message>(message, HttpStatus.OK);\n}\n```\n那么这两种实现方式有什么区别呢？\n## 答案\nResponseEntity可以更加灵活的在response里添加header信息。\n\n通过[Spring官方文档](http://docs.spring.io/spring/docs/3.0.x/javadoc-api/org/springframework/http/ResponseEntity.html)里的第四个构造函数\n```java\nResponseEntity(T body, MultiValueMap<String,String> headers, HttpStatus statusCode) \n```\n比较常用的headers有Status,Content-Type和Cache-Control。\n\n如果不需要自己设置，使用@ResponseBody会稍微简便一点。\n","slug":"Spring/ResponseEntity和@ResponseBody的区别","published":1,"updated":"2017-03-03T10:12:47.927Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1qae4au001nc812ama7hwsm","content":"<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>我在controller里定义了两个简单的handler来返回一个消息。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/message\"</span>)</div><div class=\"line\"><span class=\"meta\">@ResponseBody</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Message <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Message(penguinCounter.incrementAndGet() + <span class=\"string\">\" penguin!\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我也可以用下面这种形式<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/message\"</span>)</div><div class=\"line\"><span class=\"function\">ResponseEntity&lt;Message&gt; <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    Message message = <span class=\"keyword\">new</span> Message(penguinCounter.incrementAndGet() + <span class=\"string\">\" penguin!\"</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ResponseEntity&lt;Message&gt;(message, HttpStatus.OK);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>那么这两种实现方式有什么区别呢？</p>\n<h2 id=\"答案\"><a href=\"#答案\" class=\"headerlink\" title=\"答案\"></a>答案</h2><p>ResponseEntity可以更加灵活的在response里添加header信息。</p>\n<p>通过<a href=\"http://docs.spring.io/spring/docs/3.0.x/javadoc-api/org/springframework/http/ResponseEntity.html\" target=\"_blank\" rel=\"external\">Spring官方文档</a>里的第四个构造函数<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ResponseEntity(T body, MultiValueMap&lt;String,String&gt; headers, HttpStatus statusCode)</div></pre></td></tr></table></figure></p>\n<p>比较常用的headers有Status,Content-Type和Cache-Control。</p>\n<p>如果不需要自己设置，使用@ResponseBody会稍微简便一点。</p>\n","excerpt":"","more":"<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>我在controller里定义了两个简单的handler来返回一个消息。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/message\"</span>)</div><div class=\"line\"><span class=\"meta\">@ResponseBody</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Message <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Message(penguinCounter.incrementAndGet() + <span class=\"string\">\" penguin!\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我也可以用下面这种形式<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/message\"</span>)</div><div class=\"line\"><span class=\"function\">ResponseEntity&lt;Message&gt; <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    Message message = <span class=\"keyword\">new</span> Message(penguinCounter.incrementAndGet() + <span class=\"string\">\" penguin!\"</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ResponseEntity&lt;Message&gt;(message, HttpStatus.OK);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>那么这两种实现方式有什么区别呢？</p>\n<h2 id=\"答案\"><a href=\"#答案\" class=\"headerlink\" title=\"答案\"></a>答案</h2><p>ResponseEntity可以更加灵活的在response里添加header信息。</p>\n<p>通过<a href=\"http://docs.spring.io/spring/docs/3.0.x/javadoc-api/org/springframework/http/ResponseEntity.html\">Spring官方文档</a>里的第四个构造函数<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ResponseEntity(T body, MultiValueMap&lt;String,String&gt; headers, HttpStatus statusCode)</div></pre></td></tr></table></figure></p>\n<p>比较常用的headers有Status,Content-Type和Cache-Control。</p>\n<p>如果不需要自己设置，使用@ResponseBody会稍微简便一点。</p>\n"},{"title":"java的内部类--静态内部类【4】","date":"2017-03-07T03:34:47.000Z","_content":"\n静态内部类和成员内部类差不多。\n```java\npublic class InnerClassDemo07 {\n    public static void main(String[] args) {\n        Outer07.Inner07 inner07 = new Outer07.Inner07();\n    }\n}\n\nclass Outer07 {\n\n    static class Inner07 {\n        public Inner07() {\n            System.out.println(\"init\");\n        }\n    }\n}\n```\n\n# 总结\n- 静态内部类只能访问外部类的静态方法或变量\n- 静态内部类的创建形式是：`OuterClass.InnerClass inner = new OuterClass.InnerClass()`","source":"_posts/java基础/内部类/java的内部类--静态内部类【4】.md","raw":"---\ntitle: java的内部类--静态内部类【4】\ndate: 2017-03-07 11:34:47\ncategories: Java基础\n---\n\n静态内部类和成员内部类差不多。\n```java\npublic class InnerClassDemo07 {\n    public static void main(String[] args) {\n        Outer07.Inner07 inner07 = new Outer07.Inner07();\n    }\n}\n\nclass Outer07 {\n\n    static class Inner07 {\n        public Inner07() {\n            System.out.println(\"init\");\n        }\n    }\n}\n```\n\n# 总结\n- 静态内部类只能访问外部类的静态方法或变量\n- 静态内部类的创建形式是：`OuterClass.InnerClass inner = new OuterClass.InnerClass()`","slug":"java基础/内部类/java的内部类--静态内部类【4】","published":1,"updated":"2017-03-07T08:40:19.517Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1qae4dt002hc812l1w0qq9b","content":"<p>静态内部类和成员内部类差不多。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InnerClassDemo07</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        Outer07.Inner07 inner07 = <span class=\"keyword\">new</span> Outer07.Inner07();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Outer07</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Inner07</span> </span>&#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Inner07</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"init\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><ul>\n<li>静态内部类只能访问外部类的静态方法或变量</li>\n<li>静态内部类的创建形式是：<code>OuterClass.InnerClass inner = new OuterClass.InnerClass()</code></li>\n</ul>\n","excerpt":"","more":"<p>静态内部类和成员内部类差不多。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InnerClassDemo07</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        Outer07.Inner07 inner07 = <span class=\"keyword\">new</span> Outer07.Inner07();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Outer07</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Inner07</span> </span>&#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Inner07</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"init\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><ul>\n<li>静态内部类只能访问外部类的静态方法或变量</li>\n<li>静态内部类的创建形式是：<code>OuterClass.InnerClass inner = new OuterClass.InnerClass()</code></li>\n</ul>\n"},{"title":"java的内部类","date":"2017-03-07T03:34:47.000Z","_content":"内部类的分类如下，逐一分析。\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-1-23/91667236-file_1485150059304_12104.jpg)\n[java的内部类--成员内部类【1】](../java的内部类--成员内部类【1】)\n\n[java的内部类--局部内部类【2】](../java的内部类--局部内部类【2】)\n\n[java的内部类--匿名内部类【3】](../java的内部类--匿名内部类【3】)\n\n[java的内部类--静态内部类【4】](../java的内部类--静态内部类【4】)\n\n[通过反射分析内部类【5】](../通过反射分析内部类【5】)","source":"_posts/java基础/内部类/java的内部类.md","raw":"---\ntitle: java的内部类\ndate: 2017-03-07 11:34:47\ncategories: Java基础\n---\n内部类的分类如下，逐一分析。\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-1-23/91667236-file_1485150059304_12104.jpg)\n[java的内部类--成员内部类【1】](../java的内部类--成员内部类【1】)\n\n[java的内部类--局部内部类【2】](../java的内部类--局部内部类【2】)\n\n[java的内部类--匿名内部类【3】](../java的内部类--匿名内部类【3】)\n\n[java的内部类--静态内部类【4】](../java的内部类--静态内部类【4】)\n\n[通过反射分析内部类【5】](../通过反射分析内部类【5】)","slug":"java基础/内部类/java的内部类","published":1,"updated":"2017-03-07T09:01:52.047Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1qae4dw002ic812117qp3ub","content":"<p>内部类的分类如下，逐一分析。<br><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-1-23/91667236-file_1485150059304_12104.jpg\" alt=\"image\"><br><a href=\"../java的内部类--成员内部类【1】\">java的内部类–成员内部类【1】</a></p>\n<p><a href=\"../java的内部类--局部内部类【2】\">java的内部类–局部内部类【2】</a></p>\n<p><a href=\"../java的内部类--匿名内部类【3】\">java的内部类–匿名内部类【3】</a></p>\n<p><a href=\"../java的内部类--静态内部类【4】\">java的内部类–静态内部类【4】</a></p>\n<p><a href=\"../通过反射分析内部类【5】\">通过反射分析内部类【5】</a></p>\n","excerpt":"","more":"<p>内部类的分类如下，逐一分析。<br><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-1-23/91667236-file_1485150059304_12104.jpg\" alt=\"image\"><br><a href=\"../java的内部类--成员内部类【1】\">java的内部类–成员内部类【1】</a></p>\n<p><a href=\"../java的内部类--局部内部类【2】\">java的内部类–局部内部类【2】</a></p>\n<p><a href=\"../java的内部类--匿名内部类【3】\">java的内部类–匿名内部类【3】</a></p>\n<p><a href=\"../java的内部类--静态内部类【4】\">java的内部类–静态内部类【4】</a></p>\n<p><a href=\"../通过反射分析内部类【5】\">通过反射分析内部类【5】</a></p>\n"},{"title":"java的内部类--匿名内部类【3】","date":"2017-03-07T03:34:47.000Z","_content":"\n匿名内部类也就是没有名字的内部类\n\n正因为没有名字，所以匿名内部类只能使用一次，它通常用来简化代码编写\n\n但使用匿名内部类还有个前提条件：必须继承一个父类或实现一个接口\n\n### 实例1:不使用匿名内部类来实现抽象方法\n\n```java\nabstract class Person {\n    public abstract void eat();\n}\n \nclass Child extends Person {\n    public void eat() {\n        System.out.println(\"eat something\");\n    }\n}\n \npublic class Demo {\n    public static void main(String[] args) {\n        Person p = new Child();\n        p.eat();\n    }\n}\n```\n**运行结果：** eat something\n\n可以看到，我们用Child继承了Person类，然后实现了Child的一个实例，将其向上转型为Person类的引用\n\n但是，如果此处的Child类只使用一次，那么将其编写为独立的一个类岂不是很麻烦？\n\n这个时候就引入了匿名内部类\n\n### 实例2：匿名内部类的基本实现\n```java\nabstract class Person {\n    public abstract void eat();\n}\n \npublic class Demo {\n    public static void main(String[] args) {\n        Person p = new Person() {\n            public void eat() {\n                System.out.println(\"eat something\");\n            }\n        };\n        p.eat();\n    }\n}\n```\n**运行结果：** eat something\n\n可以看到，我们直接将抽象类Person中的方法在大括号中实现了\n\n这样便可以省略一个类的书写\n\n并且，匿名内部类还能用于接口上\n\n### 实例3：在接口上使用匿名内部类\n```java\n\ninterface Person {\n    public void eat();\n}\n \npublic class Demo {\n    public static void main(String[] args) {\n        Person p = new Person() {\n            public void eat() {\n                System.out.println(\"eat something\");\n            }\n        };\n        p.eat();\n    }\n}\n```\n由上面的例子可以看出，只要一个类是抽象的或是一个接口，那么其子类中的方法都可以使用匿名内部类来实现\n\n最常用的情况就是在多线程的实现上，因为要实现多线程必须继承Thread类或是继承Runnable接口\n\n### 实例4：在匿名内部类中自定义方法\n```java\npublic class InnerClassDemo06 {\n    public static void main(String[] args) {\n        new Thread(){\n            @Override\n            public void run() {\n                get();\n            }\n\n            private void get(){\n                System.out.println(111);\n            }\n        }.get();\n    }\n}\n```\n**运行结果：** 111\n\n可以看到可以定义自己的方法，并且就算是private的方法也可以访问到。   \n但是别向上转型，即`Thread t = new Thread(){};`  \n因为Thread里并没有get()方法。\n\n# 总结\n1. 匿名内部类必须是基于一个抽象类或接口的。\n2. 匿名内部类是可以定义其他方法的。\n3. 匿名内部类是局部内部类的一种，所以局部内部类的所有限制都对其生效。\n4. 匿名内部类不能有static的变量，方法。\n5. 匿名内部类不能有构造方法，但是可以通过构造块{}来初始化。\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/java基础/内部类/java的内部类--匿名内部类【3】.md","raw":"---\ntitle: java的内部类--匿名内部类【3】\ndate: 2017-03-07 11:34:47\ncategories: Java基础\n---\n\n匿名内部类也就是没有名字的内部类\n\n正因为没有名字，所以匿名内部类只能使用一次，它通常用来简化代码编写\n\n但使用匿名内部类还有个前提条件：必须继承一个父类或实现一个接口\n\n### 实例1:不使用匿名内部类来实现抽象方法\n\n```java\nabstract class Person {\n    public abstract void eat();\n}\n \nclass Child extends Person {\n    public void eat() {\n        System.out.println(\"eat something\");\n    }\n}\n \npublic class Demo {\n    public static void main(String[] args) {\n        Person p = new Child();\n        p.eat();\n    }\n}\n```\n**运行结果：** eat something\n\n可以看到，我们用Child继承了Person类，然后实现了Child的一个实例，将其向上转型为Person类的引用\n\n但是，如果此处的Child类只使用一次，那么将其编写为独立的一个类岂不是很麻烦？\n\n这个时候就引入了匿名内部类\n\n### 实例2：匿名内部类的基本实现\n```java\nabstract class Person {\n    public abstract void eat();\n}\n \npublic class Demo {\n    public static void main(String[] args) {\n        Person p = new Person() {\n            public void eat() {\n                System.out.println(\"eat something\");\n            }\n        };\n        p.eat();\n    }\n}\n```\n**运行结果：** eat something\n\n可以看到，我们直接将抽象类Person中的方法在大括号中实现了\n\n这样便可以省略一个类的书写\n\n并且，匿名内部类还能用于接口上\n\n### 实例3：在接口上使用匿名内部类\n```java\n\ninterface Person {\n    public void eat();\n}\n \npublic class Demo {\n    public static void main(String[] args) {\n        Person p = new Person() {\n            public void eat() {\n                System.out.println(\"eat something\");\n            }\n        };\n        p.eat();\n    }\n}\n```\n由上面的例子可以看出，只要一个类是抽象的或是一个接口，那么其子类中的方法都可以使用匿名内部类来实现\n\n最常用的情况就是在多线程的实现上，因为要实现多线程必须继承Thread类或是继承Runnable接口\n\n### 实例4：在匿名内部类中自定义方法\n```java\npublic class InnerClassDemo06 {\n    public static void main(String[] args) {\n        new Thread(){\n            @Override\n            public void run() {\n                get();\n            }\n\n            private void get(){\n                System.out.println(111);\n            }\n        }.get();\n    }\n}\n```\n**运行结果：** 111\n\n可以看到可以定义自己的方法，并且就算是private的方法也可以访问到。   \n但是别向上转型，即`Thread t = new Thread(){};`  \n因为Thread里并没有get()方法。\n\n# 总结\n1. 匿名内部类必须是基于一个抽象类或接口的。\n2. 匿名内部类是可以定义其他方法的。\n3. 匿名内部类是局部内部类的一种，所以局部内部类的所有限制都对其生效。\n4. 匿名内部类不能有static的变量，方法。\n5. 匿名内部类不能有构造方法，但是可以通过构造块{}来初始化。\n\n\n\n\n\n\n\n\n\n\n","slug":"java基础/内部类/java的内部类--匿名内部类【3】","published":1,"updated":"2017-03-07T08:40:04.442Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1qae4e0002jc8126ld6epu7","content":"<p>匿名内部类也就是没有名字的内部类</p>\n<p>正因为没有名字，所以匿名内部类只能使用一次，它通常用来简化代码编写</p>\n<p>但使用匿名内部类还有个前提条件：必须继承一个父类或实现一个接口</p>\n<h3 id=\"实例1-不使用匿名内部类来实现抽象方法\"><a href=\"#实例1-不使用匿名内部类来实现抽象方法\" class=\"headerlink\" title=\"实例1:不使用匿名内部类来实现抽象方法\"></a>实例1:不使用匿名内部类来实现抽象方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"eat something\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        Person p = <span class=\"keyword\">new</span> Child();</div><div class=\"line\">        p.eat();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>运行结果：</strong> eat something</p>\n<p>可以看到，我们用Child继承了Person类，然后实现了Child的一个实例，将其向上转型为Person类的引用</p>\n<p>但是，如果此处的Child类只使用一次，那么将其编写为独立的一个类岂不是很麻烦？</p>\n<p>这个时候就引入了匿名内部类</p>\n<h3 id=\"实例2：匿名内部类的基本实现\"><a href=\"#实例2：匿名内部类的基本实现\" class=\"headerlink\" title=\"实例2：匿名内部类的基本实现\"></a>实例2：匿名内部类的基本实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        Person p = <span class=\"keyword\">new</span> Person() &#123;</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                System.out.println(<span class=\"string\">\"eat something\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\">        p.eat();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>运行结果：</strong> eat something</p>\n<p>可以看到，我们直接将抽象类Person中的方法在大括号中实现了</p>\n<p>这样便可以省略一个类的书写</p>\n<p>并且，匿名内部类还能用于接口上</p>\n<h3 id=\"实例3：在接口上使用匿名内部类\"><a href=\"#实例3：在接口上使用匿名内部类\" class=\"headerlink\" title=\"实例3：在接口上使用匿名内部类\"></a>实例3：在接口上使用匿名内部类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        Person p = <span class=\"keyword\">new</span> Person() &#123;</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                System.out.println(<span class=\"string\">\"eat something\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\">        p.eat();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>由上面的例子可以看出，只要一个类是抽象的或是一个接口，那么其子类中的方法都可以使用匿名内部类来实现</p>\n<p>最常用的情况就是在多线程的实现上，因为要实现多线程必须继承Thread类或是继承Runnable接口</p>\n<h3 id=\"实例4：在匿名内部类中自定义方法\"><a href=\"#实例4：在匿名内部类中自定义方法\" class=\"headerlink\" title=\"实例4：在匿名内部类中自定义方法\"></a>实例4：在匿名内部类中自定义方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InnerClassDemo06</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">new</span> Thread()&#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                get();</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">get</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">                System.out.println(<span class=\"number\">111</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;.get();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>运行结果：</strong> 111</p>\n<p>可以看到可以定义自己的方法，并且就算是private的方法也可以访问到。<br>但是别向上转型，即<code>Thread t = new Thread(){};</code><br>因为Thread里并没有get()方法。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><ol>\n<li>匿名内部类必须是基于一个抽象类或接口的。</li>\n<li>匿名内部类是可以定义其他方法的。</li>\n<li>匿名内部类是局部内部类的一种，所以局部内部类的所有限制都对其生效。</li>\n<li>匿名内部类不能有static的变量，方法。</li>\n<li>匿名内部类不能有构造方法，但是可以通过构造块{}来初始化。</li>\n</ol>\n","excerpt":"","more":"<p>匿名内部类也就是没有名字的内部类</p>\n<p>正因为没有名字，所以匿名内部类只能使用一次，它通常用来简化代码编写</p>\n<p>但使用匿名内部类还有个前提条件：必须继承一个父类或实现一个接口</p>\n<h3 id=\"实例1-不使用匿名内部类来实现抽象方法\"><a href=\"#实例1-不使用匿名内部类来实现抽象方法\" class=\"headerlink\" title=\"实例1:不使用匿名内部类来实现抽象方法\"></a>实例1:不使用匿名内部类来实现抽象方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"eat something\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        Person p = <span class=\"keyword\">new</span> Child();</div><div class=\"line\">        p.eat();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>运行结果：</strong> eat something</p>\n<p>可以看到，我们用Child继承了Person类，然后实现了Child的一个实例，将其向上转型为Person类的引用</p>\n<p>但是，如果此处的Child类只使用一次，那么将其编写为独立的一个类岂不是很麻烦？</p>\n<p>这个时候就引入了匿名内部类</p>\n<h3 id=\"实例2：匿名内部类的基本实现\"><a href=\"#实例2：匿名内部类的基本实现\" class=\"headerlink\" title=\"实例2：匿名内部类的基本实现\"></a>实例2：匿名内部类的基本实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        Person p = <span class=\"keyword\">new</span> Person() &#123;</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                System.out.println(<span class=\"string\">\"eat something\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\">        p.eat();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>运行结果：</strong> eat something</p>\n<p>可以看到，我们直接将抽象类Person中的方法在大括号中实现了</p>\n<p>这样便可以省略一个类的书写</p>\n<p>并且，匿名内部类还能用于接口上</p>\n<h3 id=\"实例3：在接口上使用匿名内部类\"><a href=\"#实例3：在接口上使用匿名内部类\" class=\"headerlink\" title=\"实例3：在接口上使用匿名内部类\"></a>实例3：在接口上使用匿名内部类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        Person p = <span class=\"keyword\">new</span> Person() &#123;</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                System.out.println(<span class=\"string\">\"eat something\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\">        p.eat();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>由上面的例子可以看出，只要一个类是抽象的或是一个接口，那么其子类中的方法都可以使用匿名内部类来实现</p>\n<p>最常用的情况就是在多线程的实现上，因为要实现多线程必须继承Thread类或是继承Runnable接口</p>\n<h3 id=\"实例4：在匿名内部类中自定义方法\"><a href=\"#实例4：在匿名内部类中自定义方法\" class=\"headerlink\" title=\"实例4：在匿名内部类中自定义方法\"></a>实例4：在匿名内部类中自定义方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InnerClassDemo06</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">new</span> Thread()&#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                get();</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">get</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">                System.out.println(<span class=\"number\">111</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;.get();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>运行结果：</strong> 111</p>\n<p>可以看到可以定义自己的方法，并且就算是private的方法也可以访问到。<br>但是别向上转型，即<code>Thread t = new Thread(){};</code><br>因为Thread里并没有get()方法。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><ol>\n<li>匿名内部类必须是基于一个抽象类或接口的。</li>\n<li>匿名内部类是可以定义其他方法的。</li>\n<li>匿名内部类是局部内部类的一种，所以局部内部类的所有限制都对其生效。</li>\n<li>匿名内部类不能有static的变量，方法。</li>\n<li>匿名内部类不能有构造方法，但是可以通过构造块{}来初始化。</li>\n</ol>\n"},{"title":"java的内部类--局部内部类【2】","date":"2017-03-07T03:34:47.000Z","_content":"\n```java\npublic class InnerClassDemo05 {\n    public static void main(String[] args) {\n        new Outer05().printLocalClass(true);\n    }\n}\n\nclass Outer05 {\n\n    private String outerClassName = \"Outer05\";\n\n    public void printLocalClass(final boolean isPrintOuterClassName) {\n        //局部内部类前面不能有任何访问修饰符\n        class LocalClass implements Runnable {\n            private String localClassName = \"localClass\";\n\n            public void run() {\n                while (true) {\n                    try {\n                        Thread.sleep(3000);\n                    } catch (InterruptedException e) {\n                        e.printStackTrace();\n                    }\n\n                    /**\n                     * 局部内部类可以访问外部类域和局部变量，局部变量必须是final类型的\n                     */\n                    if (isPrintOuterClassName) {\n                        System.out.println(outerClassName + \" \" + localClassName);\n                    } else {\n                        System.out.println(localClassName);\n                    }\n                }\n            }\n        }\n\n        new Thread(new LocalClass()).start();\n    }\n}\n```\n为什么方法一结束，程序还在不停的输出呢。  \n我们用`javap -private Outer05\\$1LocalClass.class`来反编译看看\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-1-23/77864015-file_1485159477248_128b7.png)  \n我们看到了创建了一个局部变量的副本。  \n并且这个副本会被当作参数传入局部内部类的构造方法中。  \n为什么要final类型的局部变量呢？（在java8里面可以省略不写final）  \n因为外部方法随时会结束掉，而内部类如果引用了局部变量，那不就出错了嘛。  \n所以内部类创建了一个副本，而假设局部变量如果改变了的话，内部类的变量没变（副本），那用户不是很迷惑，所以要统一就用final。（不过改变引用对象内部的值那也是没办法统一的。。比如改变数组里的某个值）\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/java基础/内部类/java的内部类--局部内部类【2】.md","raw":"---\ntitle: java的内部类--局部内部类【2】\ndate: 2017-03-07 11:34:47\ncategories: Java基础\n---\n\n```java\npublic class InnerClassDemo05 {\n    public static void main(String[] args) {\n        new Outer05().printLocalClass(true);\n    }\n}\n\nclass Outer05 {\n\n    private String outerClassName = \"Outer05\";\n\n    public void printLocalClass(final boolean isPrintOuterClassName) {\n        //局部内部类前面不能有任何访问修饰符\n        class LocalClass implements Runnable {\n            private String localClassName = \"localClass\";\n\n            public void run() {\n                while (true) {\n                    try {\n                        Thread.sleep(3000);\n                    } catch (InterruptedException e) {\n                        e.printStackTrace();\n                    }\n\n                    /**\n                     * 局部内部类可以访问外部类域和局部变量，局部变量必须是final类型的\n                     */\n                    if (isPrintOuterClassName) {\n                        System.out.println(outerClassName + \" \" + localClassName);\n                    } else {\n                        System.out.println(localClassName);\n                    }\n                }\n            }\n        }\n\n        new Thread(new LocalClass()).start();\n    }\n}\n```\n为什么方法一结束，程序还在不停的输出呢。  \n我们用`javap -private Outer05\\$1LocalClass.class`来反编译看看\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-1-23/77864015-file_1485159477248_128b7.png)  \n我们看到了创建了一个局部变量的副本。  \n并且这个副本会被当作参数传入局部内部类的构造方法中。  \n为什么要final类型的局部变量呢？（在java8里面可以省略不写final）  \n因为外部方法随时会结束掉，而内部类如果引用了局部变量，那不就出错了嘛。  \n所以内部类创建了一个副本，而假设局部变量如果改变了的话，内部类的变量没变（副本），那用户不是很迷惑，所以要统一就用final。（不过改变引用对象内部的值那也是没办法统一的。。比如改变数组里的某个值）\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"java基础/内部类/java的内部类--局部内部类【2】","published":1,"updated":"2017-03-07T08:39:30.962Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1qae4e2002lc812g1h2s5fw","content":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InnerClassDemo05</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">new</span> Outer05().printLocalClass(<span class=\"keyword\">true</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Outer05</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> String outerClassName = <span class=\"string\">\"Outer05\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">printLocalClass</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> isPrintOuterClassName)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//局部内部类前面不能有任何访问修饰符</span></div><div class=\"line\">        <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LocalClass</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">private</span> String localClassName = <span class=\"string\">\"localClass\"</span>;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">                    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                        Thread.sleep(<span class=\"number\">3000</span>);</div><div class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">                        e.printStackTrace();</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">/**</span></div><div class=\"line\">                     * 局部内部类可以访问外部类域和局部变量，局部变量必须是final类型的</div><div class=\"line\">                     */</div><div class=\"line\">                    <span class=\"keyword\">if</span> (isPrintOuterClassName) &#123;</div><div class=\"line\">                        System.out.println(outerClassName + <span class=\"string\">\" \"</span> + localClassName);</div><div class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                        System.out.println(localClassName);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> LocalClass()).start();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>为什么方法一结束，程序还在不停的输出呢。<br>我们用<code>javap -private Outer05\\$1LocalClass.class</code>来反编译看看<br><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-1-23/77864015-file_1485159477248_128b7.png\" alt=\"image\"><br>我们看到了创建了一个局部变量的副本。<br>并且这个副本会被当作参数传入局部内部类的构造方法中。<br>为什么要final类型的局部变量呢？（在java8里面可以省略不写final）<br>因为外部方法随时会结束掉，而内部类如果引用了局部变量，那不就出错了嘛。<br>所以内部类创建了一个副本，而假设局部变量如果改变了的话，内部类的变量没变（副本），那用户不是很迷惑，所以要统一就用final。（不过改变引用对象内部的值那也是没办法统一的。。比如改变数组里的某个值）</p>\n","excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InnerClassDemo05</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">new</span> Outer05().printLocalClass(<span class=\"keyword\">true</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Outer05</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> String outerClassName = <span class=\"string\">\"Outer05\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">printLocalClass</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> isPrintOuterClassName)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//局部内部类前面不能有任何访问修饰符</span></div><div class=\"line\">        <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LocalClass</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">private</span> String localClassName = <span class=\"string\">\"localClass\"</span>;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">                    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                        Thread.sleep(<span class=\"number\">3000</span>);</div><div class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">                        e.printStackTrace();</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">/**</div><div class=\"line\">                     * 局部内部类可以访问外部类域和局部变量，局部变量必须是final类型的</div><div class=\"line\">                     */</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> (isPrintOuterClassName) &#123;</div><div class=\"line\">                        System.out.println(outerClassName + <span class=\"string\">\" \"</span> + localClassName);</div><div class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                        System.out.println(localClassName);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> LocalClass()).start();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>为什么方法一结束，程序还在不停的输出呢。<br>我们用<code>javap -private Outer05\\$1LocalClass.class</code>来反编译看看<br><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-1-23/77864015-file_1485159477248_128b7.png\" alt=\"image\"><br>我们看到了创建了一个局部变量的副本。<br>并且这个副本会被当作参数传入局部内部类的构造方法中。<br>为什么要final类型的局部变量呢？（在java8里面可以省略不写final）<br>因为外部方法随时会结束掉，而内部类如果引用了局部变量，那不就出错了嘛。<br>所以内部类创建了一个副本，而假设局部变量如果改变了的话，内部类的变量没变（副本），那用户不是很迷惑，所以要统一就用final。（不过改变引用对象内部的值那也是没办法统一的。。比如改变数组里的某个值）</p>\n"},{"title":"java的内部类--成员内部类【1】","date":"2017-03-07T03:34:47.000Z","_content":"## 例子一\n```java\npublic class InnerClassDemo01 {\n\n    public static void main(String[] args) {\n        OuterClass.InnerClass innerClass = new OuterClass().new InnerClass();\n        innerClass.print();\n        new Thread(innerClass).start();\n    }\n\n}\n\nclass OuterClass {\n\n    private String name;\n\n    public String getName() {\n        return name;\n    }\n\n    public class InnerClass implements Runnable {\n\n        public InnerClass() {\n            name = \"lxl\";    //注意不要用this.name，this指的是内部类的。\n        }\n\n        public void run() {\n            System.out.println(name);\n        }\n\n        public void print() {\n            System.out.println(getName());\n        }\n    }\n}\n```\n这个例子可以学到：  \n- 内部类可以随意的使用外部类的属性或方法。即使是private的。  \n- 如何获取成员内部类的实例，即：`OuterClass.InnerClass innerClass = new OuterClass().new InnerClass()`。\n- 内部类也是可以继承或实现接口的。\n\n## 例子二\n```java\npublic class InnerClassDemo02 {\n    public static void main(String[] args) {\n        new OuterClass02().new InnerClass02(); //编译报错\n    }\n}\n\nclass OuterClass02 {\n\n    private class InnerClass02 {\n        static {\n            //编译报错\n        }\n    }\n    \n    public OuterClass02 (){\n        new InnerClass02();\n    }\n}\n```\n这个例子可以学到：\n- 成员内部类和方法还有变量一样，也是被访问修饰符所限制住的。\n    - 我试着在外部类加了个get方法，返回一个内部类的实例。但是返回了实例发现也调用不了内部类的public方法。而且声明一个内部类也是报错的。 \n- 成员内部类里不能有static的属性，方法，静态块。\n\n## 例子三\n```java\npublic class InnerClassDemo03 {\n    public static void main(String[] args) {\n        OuterClass03 outer = new OuterClass03();\n        OuterClass03.InnerClass03 inner = outer.new InnerClass03();\n        System.out.println(outer == inner.getOuterClass());  //true\n        System.out.println(outer == inner.getNewOuterClass());  //false\n    }\n}\n\nclass OuterClass03 {\n\n    public class InnerClass03 {\n        //获取外部类的引用\n        public OuterClass03 getOuterClass() {\n            return OuterClass03.this;\n        }\n\n        public OuterClass03 getNewOuterClass() {\n            return new OuterClass03();\n        }\n    }\n}\n```\n这个例子可以学到：\n- 如何获取当前外部类的引用，貌似没什么卵用。  \n补充：在ArrayList的源码中看到，迭代器使用了内部类，并且通过```ArrayList.this.elementData```来获取外部类的引用，并获取到外部类的值。\n\n## 例子四\n我们已经知道如何获取一个内部类的实例\n```java\npublic static void main(String[] args) {\n    new OuterClass().new InnerClass();\n}\n```\n来看下反编译以后的代码\n```java\npublic static void main(String[] args) {\n    OuterClass var10002 = new OuterClass();\n    var10002.getClass();\n    new InnerClass(var10002);\n}\n```\n由于没有声明外部类的名字，所以反编译出来的名字是java生成的。  \n\n可以看到内部类其实是拿到了外部类的引用的。所以内部类可以轻松的访问到外部类的方法和属性。\n\n## 例子五\n```java\npublic class InnerClassDemo04 {\n    public static void main(String[] args) {\n        new OuterClass04();\n    }\n}\n\nclass OuterClass04 {\n\n    private String name;\n\n    //定义个内部类\n    public class InnerClass04 {\n\n        private String name;\n\n        private void print() {\n            System.out.println(name);\n        }\n    }\n\n    public OuterClass04() {\n        InnerClass04 innerClass = new InnerClass04();\n        innerClass.name = \"lxl\";\n        innerClass.print();  //输出：lxl\n    }\n\n}\n```\n这个例子可以学到：  \n- 外部类要调用内部类的方法就必须要拿到一个内部类的实例。而且外部类可以调用内部类的private方法。\n- 在外部类里声明内部类可以省略外部类的类名，java会自动加上。\n- 内部类的属性可以和外部类的属性重名，java会默认加上this . name，如果想用父类的那个，就可以用例子三了。\n\n\n\n\n\n\n","source":"_posts/java基础/内部类/java的内部类--成员内部类【1】.md","raw":"---\ntitle: java的内部类--成员内部类【1】\ndate: 2017-03-07 11:34:47\ncategories: Java基础\n---\n## 例子一\n```java\npublic class InnerClassDemo01 {\n\n    public static void main(String[] args) {\n        OuterClass.InnerClass innerClass = new OuterClass().new InnerClass();\n        innerClass.print();\n        new Thread(innerClass).start();\n    }\n\n}\n\nclass OuterClass {\n\n    private String name;\n\n    public String getName() {\n        return name;\n    }\n\n    public class InnerClass implements Runnable {\n\n        public InnerClass() {\n            name = \"lxl\";    //注意不要用this.name，this指的是内部类的。\n        }\n\n        public void run() {\n            System.out.println(name);\n        }\n\n        public void print() {\n            System.out.println(getName());\n        }\n    }\n}\n```\n这个例子可以学到：  \n- 内部类可以随意的使用外部类的属性或方法。即使是private的。  \n- 如何获取成员内部类的实例，即：`OuterClass.InnerClass innerClass = new OuterClass().new InnerClass()`。\n- 内部类也是可以继承或实现接口的。\n\n## 例子二\n```java\npublic class InnerClassDemo02 {\n    public static void main(String[] args) {\n        new OuterClass02().new InnerClass02(); //编译报错\n    }\n}\n\nclass OuterClass02 {\n\n    private class InnerClass02 {\n        static {\n            //编译报错\n        }\n    }\n    \n    public OuterClass02 (){\n        new InnerClass02();\n    }\n}\n```\n这个例子可以学到：\n- 成员内部类和方法还有变量一样，也是被访问修饰符所限制住的。\n    - 我试着在外部类加了个get方法，返回一个内部类的实例。但是返回了实例发现也调用不了内部类的public方法。而且声明一个内部类也是报错的。 \n- 成员内部类里不能有static的属性，方法，静态块。\n\n## 例子三\n```java\npublic class InnerClassDemo03 {\n    public static void main(String[] args) {\n        OuterClass03 outer = new OuterClass03();\n        OuterClass03.InnerClass03 inner = outer.new InnerClass03();\n        System.out.println(outer == inner.getOuterClass());  //true\n        System.out.println(outer == inner.getNewOuterClass());  //false\n    }\n}\n\nclass OuterClass03 {\n\n    public class InnerClass03 {\n        //获取外部类的引用\n        public OuterClass03 getOuterClass() {\n            return OuterClass03.this;\n        }\n\n        public OuterClass03 getNewOuterClass() {\n            return new OuterClass03();\n        }\n    }\n}\n```\n这个例子可以学到：\n- 如何获取当前外部类的引用，貌似没什么卵用。  \n补充：在ArrayList的源码中看到，迭代器使用了内部类，并且通过```ArrayList.this.elementData```来获取外部类的引用，并获取到外部类的值。\n\n## 例子四\n我们已经知道如何获取一个内部类的实例\n```java\npublic static void main(String[] args) {\n    new OuterClass().new InnerClass();\n}\n```\n来看下反编译以后的代码\n```java\npublic static void main(String[] args) {\n    OuterClass var10002 = new OuterClass();\n    var10002.getClass();\n    new InnerClass(var10002);\n}\n```\n由于没有声明外部类的名字，所以反编译出来的名字是java生成的。  \n\n可以看到内部类其实是拿到了外部类的引用的。所以内部类可以轻松的访问到外部类的方法和属性。\n\n## 例子五\n```java\npublic class InnerClassDemo04 {\n    public static void main(String[] args) {\n        new OuterClass04();\n    }\n}\n\nclass OuterClass04 {\n\n    private String name;\n\n    //定义个内部类\n    public class InnerClass04 {\n\n        private String name;\n\n        private void print() {\n            System.out.println(name);\n        }\n    }\n\n    public OuterClass04() {\n        InnerClass04 innerClass = new InnerClass04();\n        innerClass.name = \"lxl\";\n        innerClass.print();  //输出：lxl\n    }\n\n}\n```\n这个例子可以学到：  \n- 外部类要调用内部类的方法就必须要拿到一个内部类的实例。而且外部类可以调用内部类的private方法。\n- 在外部类里声明内部类可以省略外部类的类名，java会自动加上。\n- 内部类的属性可以和外部类的属性重名，java会默认加上this . name，如果想用父类的那个，就可以用例子三了。\n\n\n\n\n\n\n","slug":"java基础/内部类/java的内部类--成员内部类【1】","published":1,"updated":"2017-03-09T01:08:08.089Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1qae4e6002nc81264gethd7","content":"<h2 id=\"例子一\"><a href=\"#例子一\" class=\"headerlink\" title=\"例子一\"></a>例子一</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InnerClassDemo01</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        OuterClass.InnerClass innerClass = <span class=\"keyword\">new</span> OuterClass().new InnerClass();</div><div class=\"line\">        innerClass.print();</div><div class=\"line\">        <span class=\"keyword\">new</span> Thread(innerClass).start();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OuterClass</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> String name;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> name;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InnerClass</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">InnerClass</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            name = <span class=\"string\">\"lxl\"</span>;    <span class=\"comment\">//注意不要用this.name，this指的是内部类的。</span></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            System.out.println(name);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            System.out.println(getName());</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这个例子可以学到：  </p>\n<ul>\n<li>内部类可以随意的使用外部类的属性或方法。即使是private的。  </li>\n<li>如何获取成员内部类的实例，即：<code>OuterClass.InnerClass innerClass = new OuterClass().new InnerClass()</code>。</li>\n<li>内部类也是可以继承或实现接口的。</li>\n</ul>\n<h2 id=\"例子二\"><a href=\"#例子二\" class=\"headerlink\" title=\"例子二\"></a>例子二</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InnerClassDemo02</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">new</span> OuterClass02().new InnerClass02(); <span class=\"comment\">//编译报错</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OuterClass02</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InnerClass02</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">static</span> &#123;</div><div class=\"line\">            <span class=\"comment\">//编译报错</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">OuterClass02</span> <span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">new</span> InnerClass02();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这个例子可以学到：</p>\n<ul>\n<li>成员内部类和方法还有变量一样，也是被访问修饰符所限制住的。<ul>\n<li>我试着在外部类加了个get方法，返回一个内部类的实例。但是返回了实例发现也调用不了内部类的public方法。而且声明一个内部类也是报错的。 </li>\n</ul>\n</li>\n<li>成员内部类里不能有static的属性，方法，静态块。</li>\n</ul>\n<h2 id=\"例子三\"><a href=\"#例子三\" class=\"headerlink\" title=\"例子三\"></a>例子三</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InnerClassDemo03</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        OuterClass03 outer = <span class=\"keyword\">new</span> OuterClass03();</div><div class=\"line\">        OuterClass03.InnerClass03 inner = outer.new InnerClass03();</div><div class=\"line\">        System.out.println(outer == inner.getOuterClass());  <span class=\"comment\">//true</span></div><div class=\"line\">        System.out.println(outer == inner.getNewOuterClass());  <span class=\"comment\">//false</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OuterClass03</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InnerClass03</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//获取外部类的引用</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> OuterClass03 <span class=\"title\">getOuterClass</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> OuterClass03.<span class=\"keyword\">this</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> OuterClass03 <span class=\"title\">getNewOuterClass</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> OuterClass03();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这个例子可以学到：</p>\n<ul>\n<li>如何获取当前外部类的引用，貌似没什么卵用。<br>补充：在ArrayList的源码中看到，迭代器使用了内部类，并且通过<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">## 例子四</div><div class=\"line\">我们已经知道如何获取一个内部类的实例</div><div class=\"line\">```java</div><div class=\"line\">public static void main(String[] args) &#123;</div><div class=\"line\">    new OuterClass().new InnerClass();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></li>\n</ul>\n<p>来看下反编译以后的代码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">    OuterClass var10002 = <span class=\"keyword\">new</span> OuterClass();</div><div class=\"line\">    var10002.getClass();</div><div class=\"line\">    <span class=\"keyword\">new</span> InnerClass(var10002);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>由于没有声明外部类的名字，所以反编译出来的名字是java生成的。  </p>\n<p>可以看到内部类其实是拿到了外部类的引用的。所以内部类可以轻松的访问到外部类的方法和属性。</p>\n<h2 id=\"例子五\"><a href=\"#例子五\" class=\"headerlink\" title=\"例子五\"></a>例子五</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InnerClassDemo04</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">new</span> OuterClass04();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OuterClass04</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> String name;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//定义个内部类</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InnerClass04</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">private</span> String name;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            System.out.println(name);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">OuterClass04</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        InnerClass04 innerClass = <span class=\"keyword\">new</span> InnerClass04();</div><div class=\"line\">        innerClass.name = <span class=\"string\">\"lxl\"</span>;</div><div class=\"line\">        innerClass.print();  <span class=\"comment\">//输出：lxl</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这个例子可以学到：  </p>\n<ul>\n<li>外部类要调用内部类的方法就必须要拿到一个内部类的实例。而且外部类可以调用内部类的private方法。</li>\n<li>在外部类里声明内部类可以省略外部类的类名，java会自动加上。</li>\n<li>内部类的属性可以和外部类的属性重名，java会默认加上this . name，如果想用父类的那个，就可以用例子三了。</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"例子一\"><a href=\"#例子一\" class=\"headerlink\" title=\"例子一\"></a>例子一</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InnerClassDemo01</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        OuterClass.InnerClass innerClass = <span class=\"keyword\">new</span> OuterClass().new InnerClass();</div><div class=\"line\">        innerClass.print();</div><div class=\"line\">        <span class=\"keyword\">new</span> Thread(innerClass).start();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OuterClass</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> String name;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> name;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InnerClass</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">InnerClass</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            name = <span class=\"string\">\"lxl\"</span>;    <span class=\"comment\">//注意不要用this.name，this指的是内部类的。</span></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            System.out.println(name);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            System.out.println(getName());</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这个例子可以学到：  </p>\n<ul>\n<li>内部类可以随意的使用外部类的属性或方法。即使是private的。  </li>\n<li>如何获取成员内部类的实例，即：<code>OuterClass.InnerClass innerClass = new OuterClass().new InnerClass()</code>。</li>\n<li>内部类也是可以继承或实现接口的。</li>\n</ul>\n<h2 id=\"例子二\"><a href=\"#例子二\" class=\"headerlink\" title=\"例子二\"></a>例子二</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InnerClassDemo02</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">new</span> OuterClass02().new InnerClass02(); <span class=\"comment\">//编译报错</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OuterClass02</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InnerClass02</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">static</span> &#123;</div><div class=\"line\">            <span class=\"comment\">//编译报错</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">OuterClass02</span> <span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">new</span> InnerClass02();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这个例子可以学到：</p>\n<ul>\n<li>成员内部类和方法还有变量一样，也是被访问修饰符所限制住的。<ul>\n<li>我试着在外部类加了个get方法，返回一个内部类的实例。但是返回了实例发现也调用不了内部类的public方法。而且声明一个内部类也是报错的。 </li>\n</ul>\n</li>\n<li>成员内部类里不能有static的属性，方法，静态块。</li>\n</ul>\n<h2 id=\"例子三\"><a href=\"#例子三\" class=\"headerlink\" title=\"例子三\"></a>例子三</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InnerClassDemo03</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        OuterClass03 outer = <span class=\"keyword\">new</span> OuterClass03();</div><div class=\"line\">        OuterClass03.InnerClass03 inner = outer.new InnerClass03();</div><div class=\"line\">        System.out.println(outer == inner.getOuterClass());  <span class=\"comment\">//true</span></div><div class=\"line\">        System.out.println(outer == inner.getNewOuterClass());  <span class=\"comment\">//false</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OuterClass03</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InnerClass03</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//获取外部类的引用</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> OuterClass03 <span class=\"title\">getOuterClass</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> OuterClass03.<span class=\"keyword\">this</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> OuterClass03 <span class=\"title\">getNewOuterClass</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> OuterClass03();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这个例子可以学到：</p>\n<ul>\n<li>如何获取当前外部类的引用，貌似没什么卵用。<br>补充：在ArrayList的源码中看到，迭代器使用了内部类，并且通过<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">## 例子四</div><div class=\"line\">我们已经知道如何获取一个内部类的实例</div><div class=\"line\">```java</div><div class=\"line\">public static void main(String[] args) &#123;</div><div class=\"line\">    new OuterClass().new InnerClass();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></li>\n</ul>\n<p>来看下反编译以后的代码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">    OuterClass var10002 = <span class=\"keyword\">new</span> OuterClass();</div><div class=\"line\">    var10002.getClass();</div><div class=\"line\">    <span class=\"keyword\">new</span> InnerClass(var10002);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>由于没有声明外部类的名字，所以反编译出来的名字是java生成的。  </p>\n<p>可以看到内部类其实是拿到了外部类的引用的。所以内部类可以轻松的访问到外部类的方法和属性。</p>\n<h2 id=\"例子五\"><a href=\"#例子五\" class=\"headerlink\" title=\"例子五\"></a>例子五</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InnerClassDemo04</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">new</span> OuterClass04();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OuterClass04</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> String name;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//定义个内部类</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InnerClass04</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">private</span> String name;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            System.out.println(name);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">OuterClass04</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        InnerClass04 innerClass = <span class=\"keyword\">new</span> InnerClass04();</div><div class=\"line\">        innerClass.name = <span class=\"string\">\"lxl\"</span>;</div><div class=\"line\">        innerClass.print();  <span class=\"comment\">//输出：lxl</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这个例子可以学到：  </p>\n<ul>\n<li>外部类要调用内部类的方法就必须要拿到一个内部类的实例。而且外部类可以调用内部类的private方法。</li>\n<li>在外部类里声明内部类可以省略外部类的类名，java会自动加上。</li>\n<li>内部类的属性可以和外部类的属性重名，java会默认加上this . name，如果想用父类的那个，就可以用例子三了。</li>\n</ul>\n"},{"title":"通过反射分析内部类【5】","date":"2017-03-07T03:34:47.000Z","_content":"从成员内部类那篇教程里我们知道，内部类是可以拿到外部类的引用的，所以可以直接访问外部类的域，方法。  \n\n但是拿到了引用为什么能访问private类型的域或方法呢。我们用反射来打印下面这个外部类。\n```java\npublic class InnerClassDemo08 {\n\n    private String name;\n\n    public class InnerClass {\n\n        public InnerClass() {\n            name = \"lxl\";\n        }\n    }\n\n}\n```\n\n得到结果\n\n```java\npublic class cn.java.learning.innerclass.InnerClassDemo08{\n    private java.lang.String name;\n\n    public cn.java.learning.innerclass.InnerClassDemo08();\n\n    static java.lang.String access$002(cn.java.learning.innerclass.InnerClassDemo08, java.lang.String);\n}\n```\n\n可以看到有个隐藏的静态方法叫access$002，所以可以访问。  \n每次调用外部类的域或方法，相当于是执行了方法`access$002(外部类的引用)`\n\n\n## 反射的类\n```java\npublic class ReflectionTest {\n    \n    public static void main(String[] args) {\n        String className = \"cn.java.learning.innerclass.InnerClassDemo08\";\n        StringBuffer sb = new StringBuffer();\n        try {\n            Class cl = Class.forName(className);\n            Class superCl = cl.getSuperclass();\n            sb.\n                    append(Modifier.toString(cl.getModifiers())).\n                    append(\" class \").\n                    append(cl.getName());\n            if(superCl!=null&superCl!= Object.class){\n                sb.append(\" extends \").append(superCl.getName());\n            }\n            sb.append(\"{\");\n            System.out.println(sb);\n            ReflectionTest.printFields(cl);\n            System.out.println();\n            ReflectionTest.printConstructors(cl);\n            System.out.println();\n            ReflectionTest.printMethods(cl);\n            System.out.println();\n            System.out.println(\"}\");\n\n\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * 打印一个类的所有构造方法\n     *\n     * @param cl 目标类\n     */\n    public static void printConstructors(Class cl) {\n        Constructor[] constructors = cl.getConstructors();\n\n        StringBuffer sb = new StringBuffer();\n\n        for (Constructor c : constructors) {\n            sb.append(\"    \");  //缩进一个tab键的距离\n            String modifiers = Modifier.toString(c.getModifiers());\n            if (modifiers.length() > 0) {\n                sb.append(modifiers).append(\" \");  //输出访问修饰符\n            }\n            sb.append(c.getName()).append(\"(\");  //输出类名\n            Class[] paramTypes = c.getParameterTypes();\n            for (int i = 0; i < paramTypes.length; i++) {\n                if (i > 0) {\n                    sb.append(\", \");\n                }\n                sb.append(paramTypes[i].getName());  //输出形参的类型\n            }\n            sb.append(\");\");\n            System.out.println(sb);\n            sb.delete(0, sb.length());  //清空\n        }\n    }\n\n    /**\n     * 打印一个类的所有方法\n     *\n     * @param cl 目标类\n     */\n    public static void printMethods(Class cl) {\n        Method[] methods = cl.getDeclaredMethods();\n\n        StringBuffer sb = new StringBuffer();\n\n        for (Method m : methods) {\n            sb.\n                    append(\"    \").\n                    append(Modifier.toString(m.getModifiers())).\n                    append(\" \").\n                    append(m.getReturnType().getName()).\n                    append(\" \").\n                    append(m.getName()).\n                    append(\"(\");\n            Class[] paramTypes = m.getParameterTypes();\n            for (int i = 0; i < paramTypes.length; i++) {\n                if (i > 0) {\n                    sb.append(\", \");\n                }\n                sb.append(paramTypes[i].getName());  //输出形参的类型\n            }\n            sb.append(\");\");\n            System.out.println(sb);\n            sb.delete(0, sb.length());  //清空\n        }\n    }\n\n    /**\n     * 打印一个类中的所有域\n     *\n     * @param cl 目标类\n     */\n    public static void printFields(Class cl) {\n        Field[] fields = cl.getDeclaredFields();\n\n        StringBuffer sb = new StringBuffer();\n\n        for (Field f : fields) {\n            sb.\n                    append(\"    \").\n                    append(Modifier.toString(f.getModifiers())).\n                    append(\" \").\n                    append(f.getType().getName()).\n                    append(\" \").\n                    append(f.getName()).\n                    append(\";\");\n            System.out.println(sb);\n            sb.delete(0, sb.length());  //清空\n        }\n\n    }\n}\n```\n\n也可以通过javap命令来反编译.class文件直接得到结果\n`javap -private className.calss`","source":"_posts/java基础/内部类/通过反射分析内部类【5】.md","raw":"---\ntitle: 通过反射分析内部类【5】\ndate: 2017-03-07 11:34:47\ncategories: Java基础\n---\n从成员内部类那篇教程里我们知道，内部类是可以拿到外部类的引用的，所以可以直接访问外部类的域，方法。  \n\n但是拿到了引用为什么能访问private类型的域或方法呢。我们用反射来打印下面这个外部类。\n```java\npublic class InnerClassDemo08 {\n\n    private String name;\n\n    public class InnerClass {\n\n        public InnerClass() {\n            name = \"lxl\";\n        }\n    }\n\n}\n```\n\n得到结果\n\n```java\npublic class cn.java.learning.innerclass.InnerClassDemo08{\n    private java.lang.String name;\n\n    public cn.java.learning.innerclass.InnerClassDemo08();\n\n    static java.lang.String access$002(cn.java.learning.innerclass.InnerClassDemo08, java.lang.String);\n}\n```\n\n可以看到有个隐藏的静态方法叫access$002，所以可以访问。  \n每次调用外部类的域或方法，相当于是执行了方法`access$002(外部类的引用)`\n\n\n## 反射的类\n```java\npublic class ReflectionTest {\n    \n    public static void main(String[] args) {\n        String className = \"cn.java.learning.innerclass.InnerClassDemo08\";\n        StringBuffer sb = new StringBuffer();\n        try {\n            Class cl = Class.forName(className);\n            Class superCl = cl.getSuperclass();\n            sb.\n                    append(Modifier.toString(cl.getModifiers())).\n                    append(\" class \").\n                    append(cl.getName());\n            if(superCl!=null&superCl!= Object.class){\n                sb.append(\" extends \").append(superCl.getName());\n            }\n            sb.append(\"{\");\n            System.out.println(sb);\n            ReflectionTest.printFields(cl);\n            System.out.println();\n            ReflectionTest.printConstructors(cl);\n            System.out.println();\n            ReflectionTest.printMethods(cl);\n            System.out.println();\n            System.out.println(\"}\");\n\n\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * 打印一个类的所有构造方法\n     *\n     * @param cl 目标类\n     */\n    public static void printConstructors(Class cl) {\n        Constructor[] constructors = cl.getConstructors();\n\n        StringBuffer sb = new StringBuffer();\n\n        for (Constructor c : constructors) {\n            sb.append(\"    \");  //缩进一个tab键的距离\n            String modifiers = Modifier.toString(c.getModifiers());\n            if (modifiers.length() > 0) {\n                sb.append(modifiers).append(\" \");  //输出访问修饰符\n            }\n            sb.append(c.getName()).append(\"(\");  //输出类名\n            Class[] paramTypes = c.getParameterTypes();\n            for (int i = 0; i < paramTypes.length; i++) {\n                if (i > 0) {\n                    sb.append(\", \");\n                }\n                sb.append(paramTypes[i].getName());  //输出形参的类型\n            }\n            sb.append(\");\");\n            System.out.println(sb);\n            sb.delete(0, sb.length());  //清空\n        }\n    }\n\n    /**\n     * 打印一个类的所有方法\n     *\n     * @param cl 目标类\n     */\n    public static void printMethods(Class cl) {\n        Method[] methods = cl.getDeclaredMethods();\n\n        StringBuffer sb = new StringBuffer();\n\n        for (Method m : methods) {\n            sb.\n                    append(\"    \").\n                    append(Modifier.toString(m.getModifiers())).\n                    append(\" \").\n                    append(m.getReturnType().getName()).\n                    append(\" \").\n                    append(m.getName()).\n                    append(\"(\");\n            Class[] paramTypes = m.getParameterTypes();\n            for (int i = 0; i < paramTypes.length; i++) {\n                if (i > 0) {\n                    sb.append(\", \");\n                }\n                sb.append(paramTypes[i].getName());  //输出形参的类型\n            }\n            sb.append(\");\");\n            System.out.println(sb);\n            sb.delete(0, sb.length());  //清空\n        }\n    }\n\n    /**\n     * 打印一个类中的所有域\n     *\n     * @param cl 目标类\n     */\n    public static void printFields(Class cl) {\n        Field[] fields = cl.getDeclaredFields();\n\n        StringBuffer sb = new StringBuffer();\n\n        for (Field f : fields) {\n            sb.\n                    append(\"    \").\n                    append(Modifier.toString(f.getModifiers())).\n                    append(\" \").\n                    append(f.getType().getName()).\n                    append(\" \").\n                    append(f.getName()).\n                    append(\";\");\n            System.out.println(sb);\n            sb.delete(0, sb.length());  //清空\n        }\n\n    }\n}\n```\n\n也可以通过javap命令来反编译.class文件直接得到结果\n`javap -private className.calss`","slug":"java基础/内部类/通过反射分析内部类【5】","published":1,"updated":"2017-03-07T08:40:33.850Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1qae4eb002pc812bane99ly","content":"<p>从成员内部类那篇教程里我们知道，内部类是可以拿到外部类的引用的，所以可以直接访问外部类的域，方法。  </p>\n<p>但是拿到了引用为什么能访问private类型的域或方法呢。我们用反射来打印下面这个外部类。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InnerClassDemo08</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> String name;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InnerClass</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">InnerClass</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            name = <span class=\"string\">\"lxl\"</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>得到结果</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">cn</span>.<span class=\"title\">java</span>.<span class=\"title\">learning</span>.<span class=\"title\">innerclass</span>.<span class=\"title\">InnerClassDemo08</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> java.lang.String name;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> cn.java.learning.innerclass.InnerClassDemo08();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span> java.lang.String access$<span class=\"number\">002</span>(cn.java.learning.innerclass.InnerClassDemo08, java.lang.String);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>可以看到有个隐藏的静态方法叫access$002，所以可以访问。<br>每次调用外部类的域或方法，相当于是执行了方法<code>access$002(外部类的引用)</code></p>\n<h2 id=\"反射的类\"><a href=\"#反射的类\" class=\"headerlink\" title=\"反射的类\"></a>反射的类</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReflectionTest</span> </span>&#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        String className = <span class=\"string\">\"cn.java.learning.innerclass.InnerClassDemo08\"</span>;</div><div class=\"line\">        StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer();</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            Class cl = Class.forName(className);</div><div class=\"line\">            Class superCl = cl.getSuperclass();</div><div class=\"line\">            sb.</div><div class=\"line\">                    append(Modifier.toString(cl.getModifiers())).</div><div class=\"line\">                    append(<span class=\"string\">\" class \"</span>).</div><div class=\"line\">                    append(cl.getName());</div><div class=\"line\">            <span class=\"keyword\">if</span>(superCl!=<span class=\"keyword\">null</span>&amp;superCl!= Object.class)&#123;</div><div class=\"line\">                sb.append(<span class=\"string\">\" extends \"</span>).append(superCl.getName());</div><div class=\"line\">            &#125;</div><div class=\"line\">            sb.append(<span class=\"string\">\"&#123;\"</span>);</div><div class=\"line\">            System.out.println(sb);</div><div class=\"line\">            ReflectionTest.printFields(cl);</div><div class=\"line\">            System.out.println();</div><div class=\"line\">            ReflectionTest.printConstructors(cl);</div><div class=\"line\">            System.out.println();</div><div class=\"line\">            ReflectionTest.printMethods(cl);</div><div class=\"line\">            System.out.println();</div><div class=\"line\">            System.out.println(<span class=\"string\">\"&#125;\"</span>);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 打印一个类的所有构造方法</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> cl 目标类</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">printConstructors</span><span class=\"params\">(Class cl)</span> </span>&#123;</div><div class=\"line\">        Constructor[] constructors = cl.getConstructors();</div><div class=\"line\"></div><div class=\"line\">        StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (Constructor c : constructors) &#123;</div><div class=\"line\">            sb.append(<span class=\"string\">\"    \"</span>);  <span class=\"comment\">//缩进一个tab键的距离</span></div><div class=\"line\">            String modifiers = Modifier.toString(c.getModifiers());</div><div class=\"line\">            <span class=\"keyword\">if</span> (modifiers.length() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                sb.append(modifiers).append(<span class=\"string\">\" \"</span>);  <span class=\"comment\">//输出访问修饰符</span></div><div class=\"line\">            &#125;</div><div class=\"line\">            sb.append(c.getName()).append(<span class=\"string\">\"(\"</span>);  <span class=\"comment\">//输出类名</span></div><div class=\"line\">            Class[] paramTypes = c.getParameterTypes();</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; paramTypes.length; i++) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (i &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                    sb.append(<span class=\"string\">\", \"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">                sb.append(paramTypes[i].getName());  <span class=\"comment\">//输出形参的类型</span></div><div class=\"line\">            &#125;</div><div class=\"line\">            sb.append(<span class=\"string\">\");\"</span>);</div><div class=\"line\">            System.out.println(sb);</div><div class=\"line\">            sb.delete(<span class=\"number\">0</span>, sb.length());  <span class=\"comment\">//清空</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 打印一个类的所有方法</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> cl 目标类</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">printMethods</span><span class=\"params\">(Class cl)</span> </span>&#123;</div><div class=\"line\">        Method[] methods = cl.getDeclaredMethods();</div><div class=\"line\"></div><div class=\"line\">        StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (Method m : methods) &#123;</div><div class=\"line\">            sb.</div><div class=\"line\">                    append(<span class=\"string\">\"    \"</span>).</div><div class=\"line\">                    append(Modifier.toString(m.getModifiers())).</div><div class=\"line\">                    append(<span class=\"string\">\" \"</span>).</div><div class=\"line\">                    append(m.getReturnType().getName()).</div><div class=\"line\">                    append(<span class=\"string\">\" \"</span>).</div><div class=\"line\">                    append(m.getName()).</div><div class=\"line\">                    append(<span class=\"string\">\"(\"</span>);</div><div class=\"line\">            Class[] paramTypes = m.getParameterTypes();</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; paramTypes.length; i++) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (i &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                    sb.append(<span class=\"string\">\", \"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">                sb.append(paramTypes[i].getName());  <span class=\"comment\">//输出形参的类型</span></div><div class=\"line\">            &#125;</div><div class=\"line\">            sb.append(<span class=\"string\">\");\"</span>);</div><div class=\"line\">            System.out.println(sb);</div><div class=\"line\">            sb.delete(<span class=\"number\">0</span>, sb.length());  <span class=\"comment\">//清空</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 打印一个类中的所有域</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> cl 目标类</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">printFields</span><span class=\"params\">(Class cl)</span> </span>&#123;</div><div class=\"line\">        Field[] fields = cl.getDeclaredFields();</div><div class=\"line\"></div><div class=\"line\">        StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (Field f : fields) &#123;</div><div class=\"line\">            sb.</div><div class=\"line\">                    append(<span class=\"string\">\"    \"</span>).</div><div class=\"line\">                    append(Modifier.toString(f.getModifiers())).</div><div class=\"line\">                    append(<span class=\"string\">\" \"</span>).</div><div class=\"line\">                    append(f.getType().getName()).</div><div class=\"line\">                    append(<span class=\"string\">\" \"</span>).</div><div class=\"line\">                    append(f.getName()).</div><div class=\"line\">                    append(<span class=\"string\">\";\"</span>);</div><div class=\"line\">            System.out.println(sb);</div><div class=\"line\">            sb.delete(<span class=\"number\">0</span>, sb.length());  <span class=\"comment\">//清空</span></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>也可以通过javap命令来反编译.class文件直接得到结果<br><code>javap -private className.calss</code></p>\n","excerpt":"","more":"<p>从成员内部类那篇教程里我们知道，内部类是可以拿到外部类的引用的，所以可以直接访问外部类的域，方法。  </p>\n<p>但是拿到了引用为什么能访问private类型的域或方法呢。我们用反射来打印下面这个外部类。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InnerClassDemo08</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> String name;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InnerClass</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">InnerClass</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            name = <span class=\"string\">\"lxl\"</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>得到结果</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">cn</span>.<span class=\"title\">java</span>.<span class=\"title\">learning</span>.<span class=\"title\">innerclass</span>.<span class=\"title\">InnerClassDemo08</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> java.lang.String name;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> cn.java.learning.innerclass.InnerClassDemo08();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span> java.lang.String access$<span class=\"number\">002</span>(cn.java.learning.innerclass.InnerClassDemo08, java.lang.String);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>可以看到有个隐藏的静态方法叫access$002，所以可以访问。<br>每次调用外部类的域或方法，相当于是执行了方法<code>access$002(外部类的引用)</code></p>\n<h2 id=\"反射的类\"><a href=\"#反射的类\" class=\"headerlink\" title=\"反射的类\"></a>反射的类</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReflectionTest</span> </span>&#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        String className = <span class=\"string\">\"cn.java.learning.innerclass.InnerClassDemo08\"</span>;</div><div class=\"line\">        StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer();</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            Class cl = Class.forName(className);</div><div class=\"line\">            Class superCl = cl.getSuperclass();</div><div class=\"line\">            sb.</div><div class=\"line\">                    append(Modifier.toString(cl.getModifiers())).</div><div class=\"line\">                    append(<span class=\"string\">\" class \"</span>).</div><div class=\"line\">                    append(cl.getName());</div><div class=\"line\">            <span class=\"keyword\">if</span>(superCl!=<span class=\"keyword\">null</span>&amp;superCl!= Object.class)&#123;</div><div class=\"line\">                sb.append(<span class=\"string\">\" extends \"</span>).append(superCl.getName());</div><div class=\"line\">            &#125;</div><div class=\"line\">            sb.append(<span class=\"string\">\"&#123;\"</span>);</div><div class=\"line\">            System.out.println(sb);</div><div class=\"line\">            ReflectionTest.printFields(cl);</div><div class=\"line\">            System.out.println();</div><div class=\"line\">            ReflectionTest.printConstructors(cl);</div><div class=\"line\">            System.out.println();</div><div class=\"line\">            ReflectionTest.printMethods(cl);</div><div class=\"line\">            System.out.println();</div><div class=\"line\">            System.out.println(<span class=\"string\">\"&#125;\"</span>);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 打印一个类的所有构造方法</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> cl 目标类</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">printConstructors</span><span class=\"params\">(Class cl)</span> </span>&#123;</div><div class=\"line\">        Constructor[] constructors = cl.getConstructors();</div><div class=\"line\"></div><div class=\"line\">        StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (Constructor c : constructors) &#123;</div><div class=\"line\">            sb.append(<span class=\"string\">\"    \"</span>);  <span class=\"comment\">//缩进一个tab键的距离</span></div><div class=\"line\">            String modifiers = Modifier.toString(c.getModifiers());</div><div class=\"line\">            <span class=\"keyword\">if</span> (modifiers.length() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                sb.append(modifiers).append(<span class=\"string\">\" \"</span>);  <span class=\"comment\">//输出访问修饰符</span></div><div class=\"line\">            &#125;</div><div class=\"line\">            sb.append(c.getName()).append(<span class=\"string\">\"(\"</span>);  <span class=\"comment\">//输出类名</span></div><div class=\"line\">            Class[] paramTypes = c.getParameterTypes();</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; paramTypes.length; i++) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (i &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                    sb.append(<span class=\"string\">\", \"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">                sb.append(paramTypes[i].getName());  <span class=\"comment\">//输出形参的类型</span></div><div class=\"line\">            &#125;</div><div class=\"line\">            sb.append(<span class=\"string\">\");\"</span>);</div><div class=\"line\">            System.out.println(sb);</div><div class=\"line\">            sb.delete(<span class=\"number\">0</span>, sb.length());  <span class=\"comment\">//清空</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 打印一个类的所有方法</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> cl 目标类</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">printMethods</span><span class=\"params\">(Class cl)</span> </span>&#123;</div><div class=\"line\">        Method[] methods = cl.getDeclaredMethods();</div><div class=\"line\"></div><div class=\"line\">        StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (Method m : methods) &#123;</div><div class=\"line\">            sb.</div><div class=\"line\">                    append(<span class=\"string\">\"    \"</span>).</div><div class=\"line\">                    append(Modifier.toString(m.getModifiers())).</div><div class=\"line\">                    append(<span class=\"string\">\" \"</span>).</div><div class=\"line\">                    append(m.getReturnType().getName()).</div><div class=\"line\">                    append(<span class=\"string\">\" \"</span>).</div><div class=\"line\">                    append(m.getName()).</div><div class=\"line\">                    append(<span class=\"string\">\"(\"</span>);</div><div class=\"line\">            Class[] paramTypes = m.getParameterTypes();</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; paramTypes.length; i++) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (i &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                    sb.append(<span class=\"string\">\", \"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">                sb.append(paramTypes[i].getName());  <span class=\"comment\">//输出形参的类型</span></div><div class=\"line\">            &#125;</div><div class=\"line\">            sb.append(<span class=\"string\">\");\"</span>);</div><div class=\"line\">            System.out.println(sb);</div><div class=\"line\">            sb.delete(<span class=\"number\">0</span>, sb.length());  <span class=\"comment\">//清空</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 打印一个类中的所有域</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> cl 目标类</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">printFields</span><span class=\"params\">(Class cl)</span> </span>&#123;</div><div class=\"line\">        Field[] fields = cl.getDeclaredFields();</div><div class=\"line\"></div><div class=\"line\">        StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (Field f : fields) &#123;</div><div class=\"line\">            sb.</div><div class=\"line\">                    append(<span class=\"string\">\"    \"</span>).</div><div class=\"line\">                    append(Modifier.toString(f.getModifiers())).</div><div class=\"line\">                    append(<span class=\"string\">\" \"</span>).</div><div class=\"line\">                    append(f.getType().getName()).</div><div class=\"line\">                    append(<span class=\"string\">\" \"</span>).</div><div class=\"line\">                    append(f.getName()).</div><div class=\"line\">                    append(<span class=\"string\">\";\"</span>);</div><div class=\"line\">            System.out.println(sb);</div><div class=\"line\">            sb.delete(<span class=\"number\">0</span>, sb.length());  <span class=\"comment\">//清空</span></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>也可以通过javap命令来反编译.class文件直接得到结果<br><code>javap -private className.calss</code></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cj1qae4700003c812nso4tpn6","category_id":"cj1qae4790005c8121hsoifu0","_id":"cj1qae47p000bc812a42bslgp"},{"post_id":"cj1qae4750004c812xggtpqyx","category_id":"cj1qae4790005c8121hsoifu0","_id":"cj1qae47t000fc812cp6d8dpi"},{"post_id":"cj1qae47c0006c8123r18ms11","category_id":"cj1qae47q000dc812urb00ylq","_id":"cj1qae480000kc812t059atpw"},{"post_id":"cj1qae47e0007c8129g5c62n7","category_id":"cj1qae47w000hc812fksjtfpa","_id":"cj1qae489000oc812vwaky4oi"},{"post_id":"cj1qae47z000jc8129i1nn8yv","category_id":"cj1qae47q000dc812urb00ylq","_id":"cj1qae48c000rc812jwjnkl5s"},{"post_id":"cj1qae483000mc812oxuduzkk","category_id":"cj1qae47q000dc812urb00ylq","_id":"cj1qae48e000tc812stgt5gfs"},{"post_id":"cj1qae47i0008c812r5mtogfh","category_id":"cj1qae47q000dc812urb00ylq","_id":"cj1qae48h000wc812a0kq7we5"},{"post_id":"cj1qae48a000qc8123jyj2lxb","category_id":"cj1qae47q000dc812urb00ylq","_id":"cj1qae48j000yc812oza0ozk0"},{"post_id":"cj1qae47m000ac812rdwao53z","category_id":"cj1qae48a000pc812h25i9fxr","_id":"cj1qae48n0011c812h3h5p8qq"},{"post_id":"cj1qae47p000cc812seqxnz99","category_id":"cj1qae47w000hc812fksjtfpa","_id":"cj1qae48r0013c812n8ocod7o"},{"post_id":"cj1qae47r000ec812ev43dbwp","category_id":"cj1qae48j000zc812nz4uwhkg","_id":"cj1qae4930017c812h5nvxaht"},{"post_id":"cj1qae47u000gc8129l1paciq","category_id":"cj1qae47w000hc812fksjtfpa","_id":"cj1qae49e001bc812r81i7ugo"},{"post_id":"cj1qae47x000ic812hea7verb","category_id":"cj1qae48j000zc812nz4uwhkg","_id":"cj1qae49m001fc812ei8nh7x3"},{"post_id":"cj1qae488000nc812164g8f21","category_id":"cj1qae48j000zc812nz4uwhkg","_id":"cj1qae4a4001jc8129q1q3gb1"},{"post_id":"cj1qae48d000sc812y50k2bhu","category_id":"cj1qae49p001hc812fmvz4bxe","_id":"cj1qae4av001oc8128jhin1cq"},{"post_id":"cj1qae48f000vc812q1o73xev","category_id":"cj1qae4ae001lc812us9e4jhg","_id":"cj1qae4ay001qc812wnjg6zjd"},{"post_id":"cj1qae4au001nc812ama7hwsm","category_id":"cj1qae47w000hc812fksjtfpa","_id":"cj1qae4az001sc8124a5aiqrl"},{"post_id":"cj1qae48h000xc812ioz198pd","category_id":"cj1qae48j000zc812nz4uwhkg","_id":"cj1qae4b0001tc8129iy97ctl"},{"post_id":"cj1qae48k0010c8123avzyxks","category_id":"cj1qae4ay001rc812g6l3ywtx","_id":"cj1qae4b3001vc812gc2m86cq"},{"post_id":"cj1qae48p0012c812j8xq989o","category_id":"cj1qae4ae001lc812us9e4jhg","_id":"cj1qae4b8001xc812aey1br2h"},{"post_id":"cj1qae48s0014c812rs2s2q6u","category_id":"cj1qae4ae001lc812us9e4jhg","_id":"cj1qae4ba001zc812krnogrxu"},{"post_id":"cj1qae48z0016c812uohytszb","category_id":"cj1qae4b8001yc812mvklkhw6","_id":"cj1qae4bd0021c812ue74no36"},{"post_id":"cj1qae4940018c812j8f55xou","category_id":"cj1qae4bb0020c812xb3ms95v","_id":"cj1qae4bf0023c8128sstbt2b"},{"post_id":"cj1qae49c001ac812k8vm2qbd","category_id":"cj1qae4bb0020c812xb3ms95v","_id":"cj1qae4bh0025c812lsu1n8sa"},{"post_id":"cj1qae49f001cc812otgrsrxv","category_id":"cj1qae4bb0020c812xb3ms95v","_id":"cj1qae4bk0027c812af6chhax"},{"post_id":"cj1qae49j001ec8121umes8zs","category_id":"cj1qae4b8001yc812mvklkhw6","_id":"cj1qae4bm0029c812ulk6x3or"},{"post_id":"cj1qae49n001gc812g29fspoc","category_id":"cj1qae4bb0020c812xb3ms95v","_id":"cj1qae4bq002bc812dnnixelb"},{"post_id":"cj1qae49r001ic8124tdiz3bp","category_id":"cj1qae4bb0020c812xb3ms95v","_id":"cj1qae4bt002dc812n7m85d13"},{"post_id":"cj1qae4a7001kc8126ewva3f6","category_id":"cj1qae4bb0020c812xb3ms95v","_id":"cj1qae4bv002fc812wc8j2hsi"},{"post_id":"cj1qae4ai001mc812ma6lu725","category_id":"cj1qae4b8001yc812mvklkhw6","_id":"cj1qae4bv002gc8129un6o94f"},{"post_id":"cj1qae4dt002hc812l1w0qq9b","category_id":"cj1qae4bb0020c812xb3ms95v","_id":"cj1qae4e1002kc812ygrffs8b"},{"post_id":"cj1qae4dw002ic812117qp3ub","category_id":"cj1qae4bb0020c812xb3ms95v","_id":"cj1qae4e5002mc812znpzd92s"},{"post_id":"cj1qae4e0002jc8126ld6epu7","category_id":"cj1qae4bb0020c812xb3ms95v","_id":"cj1qae4ea002oc812snew692h"},{"post_id":"cj1qae4e2002lc812g1h2s5fw","category_id":"cj1qae4bb0020c812xb3ms95v","_id":"cj1qae4ee002qc8120ms3q96g"},{"post_id":"cj1qae4e6002nc81264gethd7","category_id":"cj1qae4bb0020c812xb3ms95v","_id":"cj1qae4ef002rc81267ikk7gf"},{"post_id":"cj1qae4eb002pc812bane99ly","category_id":"cj1qae4bb0020c812xb3ms95v","_id":"cj1qae4eg002sc8126s0nt674"}],"PostTag":[],"Tag":[]}}