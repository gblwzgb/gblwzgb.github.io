{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon.ico","path":"images/favicon.ico","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/404.html","hash":"2f6d7a7551aa497aaf9c48bd599791e45192c088","modified":1488260311068},{"_id":"source/CNAME","hash":"e5b567dabf2273ec013d8ead7a2101b7cbfd6898","modified":1488250678291},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1488181005000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1488181005000},{"_id":"themes/next/.gitignore","hash":"5f09fca02e030b7676c1d312cd88ce8fbccf381c","modified":1488181005000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1488181005000},{"_id":"themes/next/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1488181005000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1488181005000},{"_id":"themes/next/.travis.yml","hash":"c42d9608c8c7fe90de7b1581a8dc3886e90c179e","modified":1488181005000},{"_id":"themes/next/README.en.md","hash":"4ece25ee5f64447cd522e54cb0fffd9a375f0bd4","modified":1488181005000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1488181005000},{"_id":"themes/next/_config.yml","hash":"0bf9539dd778ff5356272217cbf049f920ac6ad0","modified":1488520993787},{"_id":"themes/next/bower.json","hash":"5abc236d9cc2512f5457ed57c1fba76669eb7399","modified":1488181005000},{"_id":"themes/next/gulpfile.coffee","hash":"b00e93c5c8667a4fbed71046dc93ce6784bf6257","modified":1488181005000},{"_id":"themes/next/package.json","hash":"a042faed34835a52505643aa2d841cd2dcf5dff6","modified":1488181005000},{"_id":"source/about/index.md","hash":"d7dec1499d11bfd8f65a641ac9b168aa7eb20e39","modified":1488422728568},{"_id":"source/_posts/AngularJs验证动态生成的表单.md","hash":"5d716112fad6357e1d271f02139ac166593c4812","modified":1488330799738},{"_id":"source/_posts/Java设计模式--单例模式.md","hash":"ade8ed84aab68c4296e0e13dd30ec44022507349","modified":1488507186618},{"_id":"source/_posts/Math类中的几种取整方式.md","hash":"8b2d981eea2be27470f12c80ef3393768ace6aa4","modified":1488349379487},{"_id":"source/_posts/ResponseEntity和@ResponseBody的区别.md","hash":"989fad55aed0ad9fda99b5dcee00ea988bbe8e95","modified":1488535967927},{"_id":"source/_posts/final的用法.md","hash":"dc4e9739b7362e816276904264389a2425adc492","modified":1488349341098},{"_id":"source/_posts/java数组复制的四种方式.md","hash":"75460d618981b819f93e38da291861dc74b711ec","modified":1488349371399},{"_id":"source/_posts/java的八种基本类型~byte.md","hash":"653ee948ba1e15390a6c091ba9e3c1ad27f5c5b3","modified":1488349350555},{"_id":"source/_posts/java的八种基本类型的默认值.md","hash":"246a39b302a1bd5c06aa4a513c751a937d3aa03c","modified":1488349361840},{"_id":"source/_posts/switch的用法.md","hash":"e2d71380853f140a391aa81683a3657c9df94be7","modified":1488349387677},{"_id":"source/_posts/浅谈AOP.md","hash":"a7e44df3d1207e2eea9cd3cc10f3998f2af0d9b1","modified":1488522099052},{"_id":"source/_posts/通过js实现导入导出txt格式.md","hash":"692764901f183b6c0ce2f9f04812c2ef1fc1e6ca","modified":1488264189378},{"_id":"source/categories/index.md","hash":"8f47c1ce7a17cf5c67b8714fb9e988824bbd63b9","modified":1488261265071},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1488181005000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1488181005000},{"_id":"themes/next/languages/de.yml","hash":"1fdea1f84b7f691f5b4dd4d2b43eeb27b10fa0c8","modified":1488181005000},{"_id":"themes/next/languages/default.yml","hash":"95ec5cdfb563854f231b76162a3494f6ecc5bf61","modified":1488181005000},{"_id":"themes/next/languages/en.yml","hash":"95ec5cdfb563854f231b76162a3494f6ecc5bf61","modified":1488181005000},{"_id":"themes/next/languages/fr-FR.yml","hash":"e98f1558347752a20019b71f0b1f9c8be1b34f42","modified":1488181005000},{"_id":"themes/next/languages/id.yml","hash":"34396bef27c4ab9e9a3c5d3e3aa94b0e3b3a7b0d","modified":1488181005000},{"_id":"themes/next/languages/ja.yml","hash":"49f12149edcc1892b26a6207328cda64da20116d","modified":1488181005000},{"_id":"themes/next/languages/ko.yml","hash":"b6bc5d6b0c000deb44099b42d3aebb8c49dbfca9","modified":1488181005000},{"_id":"themes/next/languages/pt-BR.yml","hash":"7742ba4c0d682cbe1d38305332ebc928abd754b5","modified":1488181005000},{"_id":"themes/next/languages/pt.yml","hash":"6b660b117314cad93f08757601df3adb04c68beb","modified":1488181005000},{"_id":"themes/next/languages/ru.yml","hash":"5022885d8955e1b91d8841048db272bf99c59a76","modified":1488181005000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"aa1e8d3380904a3717006759d74f00d7b6fe0267","modified":1488195637471},{"_id":"themes/next/languages/zh-hk.yml","hash":"19c23d21f262e24c06ee6ddfd51d2a6585304f88","modified":1488181005000},{"_id":"themes/next/languages/zh-tw.yml","hash":"68407799271c78ecc07f03d238257dd8c65ad42d","modified":1488181005000},{"_id":"themes/next/layout/_layout.swig","hash":"2c0c3547a5b470024326a33ae2779d5ee0252266","modified":1488181005000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1488181005000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1488181005000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1488181005000},{"_id":"themes/next/layout/page.swig","hash":"3727fab9dadb967e9c2204edca787dc72264674a","modified":1488181005000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1488181005000},{"_id":"themes/next/layout/schedule.swig","hash":"1f1cdc268f4ef773fd3ae693bbdf7d0b2f45c3a3","modified":1488181005000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1488181005000},{"_id":"themes/next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1488181005000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1488181005000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1488181005000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1488181005000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1488181005000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488181005000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1488181005000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1488181005000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"5864f5567ba5efeabcf6ea355013c0b603ee07f2","modified":1488181005000},{"_id":"themes/next/layout/_macro/post.swig","hash":"2c2efe44ea013030f3ce5da7bfdeddb74489eb6e","modified":1488181005000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1488181005000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"b57650032ed47b8bd357ec4dcc02d872fdd0e3e1","modified":1488181005000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1488181005000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"970aa668680896262b1056bb5787fc9ec8754495","modified":1488181005000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1488181005000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"7172c6053118b7c291a56a7860128a652ae66b83","modified":1488181005000},{"_id":"themes/next/layout/_partials/head.swig","hash":"a0eafe24d1dae30c790ae35612154b3ffbbd5cce","modified":1488181005000},{"_id":"themes/next/layout/_partials/header.swig","hash":"a1ffbb691dfad3eaf2832a11766e58a179003b8b","modified":1488181005000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1488181005000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1488181005000},{"_id":"themes/next/layout/_partials/search.swig","hash":"7b61e96508df70152b809ea5354236ab7f0d54f4","modified":1488181005000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1488181005000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1488181005000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1488181005000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"4512867d80d9eddfc3a0f5fea3c456f33aa9d522","modified":1488181005000},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1488181005000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1488181005000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"79378f3a1cd90518b07808ed09156a3ab55ffa31","modified":1488181005000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1488181005000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1488181005000},{"_id":"themes/next/scripts/tags/note.js","hash":"6752925eedbdb939d8ec4d11bdfb75199f18dd70","modified":1488181005000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1488181005000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1488181005000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1488181005000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1488181005000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1488181005000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1488181005000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1488181005000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1488181005000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1488181005000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1488181005000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1488181005000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1488181005000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1488181005000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1488181005000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1488181005000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488181005000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488181005000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488181005000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488181005000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488181005000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488181005000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488181005000},{"_id":"themes/next/source/images/favicon.ico","hash":"ada741a7f52c0ab960d1c2cf1d85e8f2ce16864b","modified":1488520330212},{"_id":"themes/next/layout/_components/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1488181005000},{"_id":"themes/next/layout/_components/algolia-search/dom.swig","hash":"636f1181dd5887a70b4a08ca8f655d4e46635792","modified":1488181005000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1488181005000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1488181005000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"741f09b2ba4e440011c15f5d288b109b82c87f1b","modified":1488181005000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1488181005000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1488181005000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1488181005000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1488181005000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1488181005000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1488181005000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1488181005000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1488181005000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"a279e1881208aff2f669fe235e9661ab825bc540","modified":1488181005000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1488181005000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"e46900412e28f529c26e25e6bada342006435a32","modified":1488181005000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"ceb39c100c99900294ddee8b1ff81fcaf43873b5","modified":1488181005000},{"_id":"themes/next/layout/_scripts/third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1488181005000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1488181005000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1488181005000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1488181005000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1488181005000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1488181005000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1488181005000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"06f432f328a5b8a9ef0dbd5301b002aba600b4ce","modified":1488181005000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"e7c76d93605e2b685274400afe51c55cc651486e","modified":1488181005000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1488181005000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"54ca0acff29a414e2c1b7c1790db22f0c775604c","modified":1488181005000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1488181005000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1488181005000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1488181005000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1488181005000},{"_id":"themes/next/source/js/src/post-details.js","hash":"3b2d64c2e6ae072ba2a9ebf7f09908a1543abd58","modified":1488181005000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1488181005000},{"_id":"themes/next/source/js/src/utils.js","hash":"9ff232a2d39a513b811814480502e3eaac429c52","modified":1488181005000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1488181005000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1488181005000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1488181005000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1488181005000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1488181005000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1488181005000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1488181005000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1488181005000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"c1072942459fa0880e8a33a1bd929176b62b4171","modified":1488181005000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1488181005000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1488181005000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1488181005000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1488181005000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1488181005000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1488181005000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1488181005000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1488181005000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1488181005000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1488181005000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1488181005000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1488181005000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1488181005000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1488181005000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1488181005000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1488181005000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1488181005000},{"_id":"themes/next/layout/_scripts/third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1488181005000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1488181005000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1488181005000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1488181005000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1488181005000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1488181005000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1488181005000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-mta.swig","hash":"a652f202bd5b30c648c228ab8f0e997eb4928e44","modified":1488181005000},{"_id":"themes/next/layout/_scripts/third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1488181005000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"fb1d04ede838b52ca7541973f86c3810f1ad396e","modified":1488181005000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1488181005000},{"_id":"themes/next/layout/_scripts/third-party/comments/gentie.swig","hash":"03592d1d731592103a41ebb87437fe4b0a4c78ca","modified":1488181005000},{"_id":"themes/next/layout/_scripts/third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1488181005000},{"_id":"themes/next/layout/_scripts/third-party/comments/youyan.swig","hash":"af9dd8a4aed7d06cf47b363eebff48850888566c","modified":1488181005000},{"_id":"themes/next/layout/_scripts/third-party/comments/livere.swig","hash":"7240f2e5ec7115f8abbbc4c9ef73d4bed180fdc7","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"59ad08bcc6fe9793594869ac2b4c525021453e78","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ef089a407c90e58eca10c49bc47ec978f96e03ba","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1488181005000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1488181005000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1488181005000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1488181005000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1488181005000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1488181005000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1488181005000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1488181005000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1488181005000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1488181005000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1488181005000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1488181005000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1488181005000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1488181005000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1488181005000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1488181005000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1488181005000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1488181005000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1488181005000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1488181005000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"f15537cee1a9ef4fa1e72a1670ebce4097db8115","modified":1488181005000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"7e18f08c2c82f71e83860f232d43d8b89865ac2e","modified":1488181005000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e3e23751d4ad24e8714b425d768cf68e37de7ded","modified":1488181005000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1488181005000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1488181005000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1488181005000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1488181005000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1488181005000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1488181005000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1488181005000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1488181005000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1488181005000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1488181005000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1488181005000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1488181005000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1488181005000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1488181005000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1488181005000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1488181005000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1488181005000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1488181005000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1488181005000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1488181005000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1488181005000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1488181005000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1488181005000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"755b04edbbfbdd981a783edb09c9cc34cb79cea7","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"72bb1c9c890a1dfeca7804d681b366fea0ac4421","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"b9a2e76f019a5941191f1263b54aef7b69c48789","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"bfd806d0a9f21446a22df82ac02e37d0075cc3b5","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a2ec22ef4a6817bbb2abe8660fcd99fe4ca0cc5e","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"8fe1e55bc290e6aaf07cc644fe27b62107a272a8","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"586a3ec0f1015e7207cd6a2474362e068c341744","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"173490e21bece35a34858e8e534cf86e34561350","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"42348219db93a85d2ee23cb06cebd4d8ab121726","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"74d0ba86f698165d13402670382a822c8736a556","modified":1488181005000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1488181005000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1488181005000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1488181005000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1488181005000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1488181005000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1488181005000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1488181005000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1488181005000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1488181005000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1488181005000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1488181005000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1488181005000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1488181005000},{"_id":"public/search.xml","hash":"cf674852fe00e1aaa78d9a3a30a3d04e28b8e5c6","modified":1488536031457},{"_id":"public/404.html","hash":"77150fac21c5a77f083ea84a6f33c5fcac63b729","modified":1488536031483},{"_id":"public/about/index.html","hash":"a3e423e339249d2b53f2fae810e64e8c37f9c243","modified":1488536031483},{"_id":"public/categories/index.html","hash":"7a854383d5d760fb128700ac2489224672dcd450","modified":1488536031484},{"_id":"public/archives/page/2/index.html","hash":"7667a2e2183e6acb67aef02872b2f11244c22d1d","modified":1488536031484},{"_id":"public/archives/2017/page/2/index.html","hash":"ff6a84275a5130b5b8610904e882645a6d18412d","modified":1488536031485},{"_id":"public/categories/JavaScript/index.html","hash":"572819d870a3a0efea23dc0dce9b168be4384ec6","modified":1488536031485},{"_id":"public/categories/Java设计模式/index.html","hash":"d49b385be36616a77b66c2b5d64f43f6ca258860","modified":1488536031486},{"_id":"public/categories/Spring/index.html","hash":"9f949bf69b547a0b8c7a02aa25b7d9befee61777","modified":1488536031486},{"_id":"public/2017/03/03/Java设计模式--单例模式/index.html","hash":"337e3d10fed2f2bb44ebccab7462120ad33d2fcd","modified":1488536031487},{"_id":"public/2017/03/03/ResponseEntity和@ResponseBody的区别/index.html","hash":"861383d4ba02ae80c2b3b54a96a8f15fd6635404","modified":1488536031487},{"_id":"public/2017/03/03/浅谈AOP/index.html","hash":"9ec4cbd7ba8bdc3c671dae1bf35a1f8639b24eba","modified":1488536031487},{"_id":"public/2017/02/28/java数组复制的四种方式/index.html","hash":"c161205e4bc4d023be8ab2dfb483b72b4005b628","modified":1488536031487},{"_id":"public/2017/02/28/Math类中的几种取整方式/index.html","hash":"353a4a1d5e8e5f5a5d3b28b870d42129919b7120","modified":1488536031487},{"_id":"public/2017/02/28/AngularJs验证动态生成的表单/index.html","hash":"dd0485cb6d09ae9a1139d555079312d95b552ef0","modified":1488536031487},{"_id":"public/2017/02/28/java的八种基本类型的默认值/index.html","hash":"d59ab7b076776e83b5df549aaa764e89f7e63a07","modified":1488536031488},{"_id":"public/2017/02/28/java的八种基本类型~byte/index.html","hash":"cf5800b14df7be4db0512bcd07d4c5e08509aecc","modified":1488536031488},{"_id":"public/2017/02/28/switch的用法/index.html","hash":"9ee7eb1820ee0377128a6da6c144329ec02b2675","modified":1488536031488},{"_id":"public/2017/02/28/final的用法/index.html","hash":"9037ba33ad290abe58d1f3ada299f7948f7b7918","modified":1488536031488},{"_id":"public/2017/02/28/通过js实现导入导出txt格式/index.html","hash":"fb9cd768baec6e07834b6b481116cb67f0eef6e6","modified":1488536031488},{"_id":"public/archives/index.html","hash":"2259ded3913c26c7409818be7ac5ee813a50a42b","modified":1488536031488},{"_id":"public/archives/2017/index.html","hash":"5c36294c84926d73821ef84c306dbe57e1d939bf","modified":1488536031488},{"_id":"public/archives/2017/02/index.html","hash":"33587b04bf977cc2dbd14f76cf039cdb9875c880","modified":1488536031488},{"_id":"public/archives/2017/03/index.html","hash":"718f8b082fd1b7f58a4fdc49bd5e1c3f389fecbd","modified":1488536031488},{"_id":"public/categories/Java基础/index.html","hash":"7f42f77b7d18df9c8fedabc6beb5c5fe5994a43b","modified":1488536031488},{"_id":"public/index.html","hash":"1e585485b236a80e21fadff276ab518fe9c73aff","modified":1488536031488},{"_id":"public/page/2/index.html","hash":"bcd5302124a7c663b426480a9f571f64705dee22","modified":1488536031488},{"_id":"public/CNAME","hash":"e5b567dabf2273ec013d8ead7a2101b7cbfd6898","modified":1488536031552},{"_id":"public/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1488536031552},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1488536031552},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1488536031552},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1488536031552},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1488536031552},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1488536031552},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1488536031552},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1488536031553},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1488536031553},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1488536031553},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1488536031553},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1488536031553},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1488536031553},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1488536031553},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1488536031553},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1488536031553},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1488536031553},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1488536031553},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1488536031553},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1488536031553},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1488536031554},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1488536031554},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1488536031554},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1488536031554},{"_id":"public/images/favicon.ico","hash":"ada741a7f52c0ab960d1c2cf1d85e8f2ce16864b","modified":1488536033242},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1488536033249},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1488536033260},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1488536033260},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1488536033260},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1488536033284},{"_id":"public/js/src/algolia-search.js","hash":"54ca0acff29a414e2c1b7c1790db22f0c775604c","modified":1488536033284},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1488536033284},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1488536033285},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1488536033285},{"_id":"public/js/src/post-details.js","hash":"3b2d64c2e6ae072ba2a9ebf7f09908a1543abd58","modified":1488536033285},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1488536033285},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1488536033285},{"_id":"public/js/src/utils.js","hash":"9ff232a2d39a513b811814480502e3eaac429c52","modified":1488536033285},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1488536033285},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1488536033285},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1488536033285},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1488536033285},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1488536033285},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1488536033286},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1488536033286},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1488536033286},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1488536033286},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1488536033286},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1488536033286},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1488536033286},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1488536033286},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1488536033286},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1488536033286},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1488536033286},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1488536033286},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1488536033287},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1488536033287},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1488536033287},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1488536033287},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1488536033287},{"_id":"public/css/main.css","hash":"4f0df0473cd83ce9895b348588da8ab074c57f72","modified":1488536033287},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1488536033287},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1488536033287},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1488536033287},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1488536033287},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1488536033288},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1488536033288},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1488536033288},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1488536033288},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1488536033289},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1488536033289},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1488536033289},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1488536033383}],"Category":[{"name":"Java基础","_id":"ciztnx1kw00045k12ut6o6uo4"},{"name":"JavaScript","_id":"ciztnx1lf00085k12z3tacz3q"},{"name":"Java设计模式","_id":"ciztnx1lo000c5k125hl9y9d0"},{"name":"Spring","_id":"ciztnx1lx000g5k127e463rnd"}],"Data":[],"Page":[{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\"\n        charset=\"utf-8\" homePageUrl=\"your site url \"\n        homePageName=\"�ص��ҵ���ҳ\">\n</script>\n\n</body>\n</html>","source":"404.html","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\"\n        charset=\"utf-8\" homePageUrl=\"your site url \"\n        homePageName=\"�ص��ҵ���ҳ\">\n</script>\n\n</body>\n</html>","date":"2017-02-28T05:38:31.068Z","updated":"2017-02-28T05:38:31.068Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"ciztnx1h100005k122n7nhr6l","content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"your site url \" homepagename=\"�ص��ҵ���ҳ\">\n</script>\n\n</body>\n</html>","excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\"\n        charset=\"utf-8\" homePageUrl=\"your site url \"\n        homePageName=\"�ص��ҵ���ҳ\">\n</script>\n\n</body>\n</html>"},{"title":"about","date":"2017-03-02T02:38:06.000Z","_content":"\n## 关于我\n\nJava开发攻城狮，欢迎一起交流\n\nFrom lxl\n\nQQ：348863018\nEmail: 348863018@qq.com","source":"about/index.md","raw":"---\ntitle: about\ndate: 2017-03-02 10:38:06\n---\n\n## 关于我\n\nJava开发攻城狮，欢迎一起交流\n\nFrom lxl\n\nQQ：348863018\nEmail: 348863018@qq.com","updated":"2017-03-02T02:45:28.568Z","path":"about/index.html","comments":1,"layout":"page","_id":"ciztnx1k900015k12bgrjctkd","content":"<h2 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h2><p>Java开发攻城狮，欢迎一起交流</p>\n<p>From lxl</p>\n<p>QQ：348863018<br>Email: 348863018@qq.com</p>\n","excerpt":"","more":"<h2 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h2><p>Java开发攻城狮，欢迎一起交流</p>\n<p>From lxl</p>\n<p>QQ：348863018<br>Email: 348863018@qq.com</p>\n"},{"title":"分类","date":"2017-02-28T05:51:08.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2017-02-28 13:51:08\ntype: \"categories\"\ncomments: false\n---\n","updated":"2017-02-28T05:54:25.071Z","path":"categories/index.html","layout":"page","_id":"ciztnx1ul000n5k12wg3iq3t6","content":"","excerpt":"","more":""}],"Post":[{"title":"Math类中的几种取整方式","date":"2017-02-28T10:42:47.000Z","_content":"\n方法名 | 作用\n---|---\nceil | 天花板，即向上取整，结果大于等于原值\nfloor | 地板，即向下取整，结果小于等于原值\nround | 四舍五入，算法为Math.floor(x+0.5)\n\n### 代码示例\n```java\npublic class test001 {\n\n    public static void main(String[] args) {\n        System.out.println(Math.floor(-10.4));  //-11.0\n        System.out.println(Math.floor(-10.6));  //-11.0\n        System.out.println(Math.floor(10.4));   //10.0\n        System.out.println(Math.floor(10.6));   //10.0\n        \n        System.out.println(Math.ceil(-10.4));  //-10.0\n        System.out.println(Math.ceil(-10.6));  //-10.0\n        System.out.println(Math.ceil(10.4));   //11.0\n        System.out.println(Math.ceil(10.6));   //11.0\n        \n        System.out.println(Math.round(-10.1));  //-10\n        System.out.println(Math.round(-10.5));  //-10\n        System.out.println(Math.round(-10.9));  //-11\n        System.out.println(Math.round(10.1));   //10\n        System.out.println(Math.round(10.5));   //11\n        System.out.println(Math.round(10.9));   //11\n    }\n\n}\n```","source":"_posts/Math类中的几种取整方式.md","raw":"---\ntitle: Math类中的几种取整方式\ndate: 2017-02-28 18:42:47\ncategories: Java基础\n---\n\n方法名 | 作用\n---|---\nceil | 天花板，即向上取整，结果大于等于原值\nfloor | 地板，即向下取整，结果小于等于原值\nround | 四舍五入，算法为Math.floor(x+0.5)\n\n### 代码示例\n```java\npublic class test001 {\n\n    public static void main(String[] args) {\n        System.out.println(Math.floor(-10.4));  //-11.0\n        System.out.println(Math.floor(-10.6));  //-11.0\n        System.out.println(Math.floor(10.4));   //10.0\n        System.out.println(Math.floor(10.6));   //10.0\n        \n        System.out.println(Math.ceil(-10.4));  //-10.0\n        System.out.println(Math.ceil(-10.6));  //-10.0\n        System.out.println(Math.ceil(10.4));   //11.0\n        System.out.println(Math.ceil(10.6));   //11.0\n        \n        System.out.println(Math.round(-10.1));  //-10\n        System.out.println(Math.round(-10.5));  //-10\n        System.out.println(Math.round(-10.9));  //-11\n        System.out.println(Math.round(10.1));   //10\n        System.out.println(Math.round(10.5));   //11\n        System.out.println(Math.round(10.9));   //11\n    }\n\n}\n```","slug":"Math类中的几种取整方式","published":1,"updated":"2017-03-01T06:22:59.487Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciztnx1kg00025k12alefzfxp","content":"<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ceil</td>\n<td>天花板，即向上取整，结果大于等于原值</td>\n</tr>\n<tr>\n<td>floor</td>\n<td>地板，即向下取整，结果小于等于原值</td>\n</tr>\n<tr>\n<td>round</td>\n<td>四舍五入，算法为Math.floor(x+0.5)</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test001</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        System.out.println(Math.floor(-<span class=\"number\">10.4</span>));  <span class=\"comment\">//-11.0</span></div><div class=\"line\">        System.out.println(Math.floor(-<span class=\"number\">10.6</span>));  <span class=\"comment\">//-11.0</span></div><div class=\"line\">        System.out.println(Math.floor(<span class=\"number\">10.4</span>));   <span class=\"comment\">//10.0</span></div><div class=\"line\">        System.out.println(Math.floor(<span class=\"number\">10.6</span>));   <span class=\"comment\">//10.0</span></div><div class=\"line\">        </div><div class=\"line\">        System.out.println(Math.ceil(-<span class=\"number\">10.4</span>));  <span class=\"comment\">//-10.0</span></div><div class=\"line\">        System.out.println(Math.ceil(-<span class=\"number\">10.6</span>));  <span class=\"comment\">//-10.0</span></div><div class=\"line\">        System.out.println(Math.ceil(<span class=\"number\">10.4</span>));   <span class=\"comment\">//11.0</span></div><div class=\"line\">        System.out.println(Math.ceil(<span class=\"number\">10.6</span>));   <span class=\"comment\">//11.0</span></div><div class=\"line\">        </div><div class=\"line\">        System.out.println(Math.round(-<span class=\"number\">10.1</span>));  <span class=\"comment\">//-10</span></div><div class=\"line\">        System.out.println(Math.round(-<span class=\"number\">10.5</span>));  <span class=\"comment\">//-10</span></div><div class=\"line\">        System.out.println(Math.round(-<span class=\"number\">10.9</span>));  <span class=\"comment\">//-11</span></div><div class=\"line\">        System.out.println(Math.round(<span class=\"number\">10.1</span>));   <span class=\"comment\">//10</span></div><div class=\"line\">        System.out.println(Math.round(<span class=\"number\">10.5</span>));   <span class=\"comment\">//11</span></div><div class=\"line\">        System.out.println(Math.round(<span class=\"number\">10.9</span>));   <span class=\"comment\">//11</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"","more":"<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ceil</td>\n<td>天花板，即向上取整，结果大于等于原值</td>\n</tr>\n<tr>\n<td>floor</td>\n<td>地板，即向下取整，结果小于等于原值</td>\n</tr>\n<tr>\n<td>round</td>\n<td>四舍五入，算法为Math.floor(x+0.5)</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test001</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        System.out.println(Math.floor(-<span class=\"number\">10.4</span>));  <span class=\"comment\">//-11.0</span></div><div class=\"line\">        System.out.println(Math.floor(-<span class=\"number\">10.6</span>));  <span class=\"comment\">//-11.0</span></div><div class=\"line\">        System.out.println(Math.floor(<span class=\"number\">10.4</span>));   <span class=\"comment\">//10.0</span></div><div class=\"line\">        System.out.println(Math.floor(<span class=\"number\">10.6</span>));   <span class=\"comment\">//10.0</span></div><div class=\"line\">        </div><div class=\"line\">        System.out.println(Math.ceil(-<span class=\"number\">10.4</span>));  <span class=\"comment\">//-10.0</span></div><div class=\"line\">        System.out.println(Math.ceil(-<span class=\"number\">10.6</span>));  <span class=\"comment\">//-10.0</span></div><div class=\"line\">        System.out.println(Math.ceil(<span class=\"number\">10.4</span>));   <span class=\"comment\">//11.0</span></div><div class=\"line\">        System.out.println(Math.ceil(<span class=\"number\">10.6</span>));   <span class=\"comment\">//11.0</span></div><div class=\"line\">        </div><div class=\"line\">        System.out.println(Math.round(-<span class=\"number\">10.1</span>));  <span class=\"comment\">//-10</span></div><div class=\"line\">        System.out.println(Math.round(-<span class=\"number\">10.5</span>));  <span class=\"comment\">//-10</span></div><div class=\"line\">        System.out.println(Math.round(-<span class=\"number\">10.9</span>));  <span class=\"comment\">//-11</span></div><div class=\"line\">        System.out.println(Math.round(<span class=\"number\">10.1</span>));   <span class=\"comment\">//10</span></div><div class=\"line\">        System.out.println(Math.round(<span class=\"number\">10.5</span>));   <span class=\"comment\">//11</span></div><div class=\"line\">        System.out.println(Math.round(<span class=\"number\">10.9</span>));   <span class=\"comment\">//11</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"AngularJs验证动态生成的表单","date":"2017-02-28T10:42:47.000Z","_content":"\n有这么一个需求，我的表单是ng-repeat生成的，但是要做表单验证。  \n而AngularJs的表单验证是和name绑定的。如下。\n```html\n<p>邮箱:<br>\n    <input type=\"email\" name=\"email\" ng-model=\"user.email\" required>\n    <span style=\"color:red\" ng-show=\"myForm.email.$dirty && myForm.email.$invalid\">\n        <span ng-show=\"myForm.email.$error.required\">邮箱是必须的。</span>\n        <span ng-show=\"myForm.email.$error.email\">非法的邮箱地址。</span>\n    </span>\n</p>\n```\n\n我把name改成`{ {user.email} }`，验证的地方改成`myForm.{ {user.email} }.$error.required`。报错。\n\n## 解决方法\ngoogle了一下，用`ng-form`标签\n```html\n<form name=\"outerForm\">\n<div ng-repeat=\"item in items\">\n   <ng-form name=\"innerForm\">\n      <input type=\"text\" name=\"qwe\" ng-model=\"item.foo\" />\n      <span ng-show=\"innerForm.qwe.$error.required\">required</span>\n   </ng-form>\n</div>\n<input type=\"submit\" ng-disabled=\"outerForm.$invalid\" />\n</form>\n```\n这里的name可以随便写了，只要和验证的地方对应就好了。","source":"_posts/AngularJs验证动态生成的表单.md","raw":"---\ntitle: AngularJs验证动态生成的表单\ndate: 2017-02-28 18:42:47\ncategories: JavaScript\n---\n\n有这么一个需求，我的表单是ng-repeat生成的，但是要做表单验证。  \n而AngularJs的表单验证是和name绑定的。如下。\n```html\n<p>邮箱:<br>\n    <input type=\"email\" name=\"email\" ng-model=\"user.email\" required>\n    <span style=\"color:red\" ng-show=\"myForm.email.$dirty && myForm.email.$invalid\">\n        <span ng-show=\"myForm.email.$error.required\">邮箱是必须的。</span>\n        <span ng-show=\"myForm.email.$error.email\">非法的邮箱地址。</span>\n    </span>\n</p>\n```\n\n我把name改成`{ {user.email} }`，验证的地方改成`myForm.{ {user.email} }.$error.required`。报错。\n\n## 解决方法\ngoogle了一下，用`ng-form`标签\n```html\n<form name=\"outerForm\">\n<div ng-repeat=\"item in items\">\n   <ng-form name=\"innerForm\">\n      <input type=\"text\" name=\"qwe\" ng-model=\"item.foo\" />\n      <span ng-show=\"innerForm.qwe.$error.required\">required</span>\n   </ng-form>\n</div>\n<input type=\"submit\" ng-disabled=\"outerForm.$invalid\" />\n</form>\n```\n这里的name可以随便写了，只要和验证的地方对应就好了。","slug":"AngularJs验证动态生成的表单","published":1,"updated":"2017-03-01T01:13:19.738Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciztnx1kp00035k12u6dprlcx","content":"<p>有这么一个需求，我的表单是ng-repeat生成的，但是要做表单验证。<br>而AngularJs的表单验证是和name绑定的。如下。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>邮箱:<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"email\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"email\"</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"user.email\"</span> <span class=\"attr\">required</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">\"color:red\"</span> <span class=\"attr\">ng-show</span>=<span class=\"string\">\"myForm.email.$dirty &amp;&amp; myForm.email.$invalid\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">ng-show</span>=<span class=\"string\">\"myForm.email.$error.required\"</span>&gt;</span>邮箱是必须的。<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">ng-show</span>=<span class=\"string\">\"myForm.email.$error.email\"</span>&gt;</span>非法的邮箱地址。<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>我把name改成<code>{ {user.email} }</code>，验证的地方改成<code>myForm.{ {user.email} }.$error.required</code>。报错。</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>google了一下，用<code>ng-form</code>标签<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">name</span>=<span class=\"string\">\"outerForm\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-repeat</span>=<span class=\"string\">\"item in items\"</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">ng-form</span> <span class=\"attr\">name</span>=<span class=\"string\">\"innerForm\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"qwe\"</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"item.foo\"</span> /&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">ng-show</span>=<span class=\"string\">\"innerForm.qwe.$error.required\"</span>&gt;</span>required<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">ng-form</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">ng-disabled</span>=<span class=\"string\">\"outerForm.$invalid\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>这里的name可以随便写了，只要和验证的地方对应就好了。</p>\n","excerpt":"","more":"<p>有这么一个需求，我的表单是ng-repeat生成的，但是要做表单验证。<br>而AngularJs的表单验证是和name绑定的。如下。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>邮箱:<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"email\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"email\"</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"user.email\"</span> <span class=\"attr\">required</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">\"color:red\"</span> <span class=\"attr\">ng-show</span>=<span class=\"string\">\"myForm.email.$dirty &amp;&amp; myForm.email.$invalid\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">ng-show</span>=<span class=\"string\">\"myForm.email.$error.required\"</span>&gt;</span>邮箱是必须的。<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">ng-show</span>=<span class=\"string\">\"myForm.email.$error.email\"</span>&gt;</span>非法的邮箱地址。<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>我把name改成<code>{ {user.email} }</code>，验证的地方改成<code>myForm.{ {user.email} }.$error.required</code>。报错。</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>google了一下，用<code>ng-form</code>标签<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">name</span>=<span class=\"string\">\"outerForm\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-repeat</span>=<span class=\"string\">\"item in items\"</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">ng-form</span> <span class=\"attr\">name</span>=<span class=\"string\">\"innerForm\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"qwe\"</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"item.foo\"</span> /&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">ng-show</span>=<span class=\"string\">\"innerForm.qwe.$error.required\"</span>&gt;</span>required<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">ng-form</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">ng-disabled</span>=<span class=\"string\">\"outerForm.$invalid\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>这里的name可以随便写了，只要和验证的地方对应就好了。</p>\n"},{"title":"Java设计模式--单例模式","date":"2017-03-03T10:42:47.000Z","_content":"\n## 单例模式介绍\n使用单例可以减少不必要的系统开销，比如Spring里配置的数据源，创建和销毁耗费大量的资源，所以就用单例来保证项目加载的时候只生成一个实例，大家公用该实例。Spring的bean默认都是Singleton的。\n\n单例模式有以下特点：\n1. 单例类只能有一个实例。\n2. 单例类必须自己创建自己的唯一实例。\n3. 单例类必须给所有其他对象提供这一实例。\n\n## 单例模式的写法\n我画了张图来总结一下我所知道的单例模式的写法。\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-3-1/94738122-file_1488378897476_bff8.png)\n\n具体代码演示\n\n### 懒汉式\n```java\npublic class SingletonDemo01 {\n\n    private static SingletonDemo01 instance = null;\n\n    private SingletonDemo01() {\n\n    }\n\n    public static SingletonDemo01 getInstance() {\n        if (instance == null) {\n            instance = new SingletonDemo01();\n        }\n        return instance;\n    }\n\n}\n```\n这个有线程安全问题：线程A判断完实例没有创建，刚刚准备创建对象的时候，时间片切换到第二个线程B，这个时候线程B也发现实例没有创建，然后两个线程就各创建了一个对象了。\n\n### 饿汉式\n```java\npublic class SingletonDemo02 {\n\n    private static SingletonDemo02 instance = new SingletonDemo02();\n\n    private SingletonDemo02() {\n        //设置私有构造外部就不能通过new来新建实例了。\n    }\n\n    public static SingletonDemo02 getInstance() {\n        return instance;\n    }\n\n}\n```\n**优点**：\n\n饿汉模式简单，也没有线程安全问题。\n\n了解过类加载机制的同学可能要问，如果线程A和线程B同时触发了类加载机制怎么办呢？会不会在线程切换间创建两个对象？没关系，在jvm里，类加载的时候会自动的加锁，并且有CAS保证了只有一个对象被创建。具体细节这里不展开。\n\n**缺点**：\n\n如果我的类里定义了其他静态方法或静态变量，我只是想用一下静态方法或变量，依据getstatic指令触发类的初始化，这个时候，instance变量会跟着一起初始化，也就创建了一个SingletonDemo02的对象，白白浪费了内存。\n\n### 单检锁\n```java\npublic class SingletonDemo03 {\n\n    private static SingletonDemo03 instance = null;\n\n    private SingletonDemo03() {\n\n    }\n\n    public synchronized static SingletonDemo03 getInstance() {\n        if (instance == null) {\n            instance = new SingletonDemo03();\n        }\n        return instance;\n    }\n\n}\n```\n**优点**:\n\n线程安全。\n\n在懒汉式上加上了synchronized关键字，也就解决了普通懒汉式线程不安全的问题。\n\n**缺点**：\n\n锁的粒度太粗，instance==null的判断并不需要加锁。\n\n### 双检锁\n```java\npublic class SingletonDemo04 {\n\n    private static volatile SingletonDemo04 instance = null;\n\n    private SingletonDemo04() {\n\n    }\n\n    public synchronized static SingletonDemo04 getInstance() {\n        if (instance == null) {\n            synchronized (SingletonDemo04.class) {\n                if (instance == null) {\n                    instance = new SingletonDemo04();\n                }\n            }\n        }\n        return instance;\n    }\n\n}\n```\njvm创建对象的时候大致干三件事：  \n1. 在堆上分配内存空间\n2. 执行类的构造方法初始化参数\n3. 把创建的对象指向分配的内存空间地址\n\n在编译优化里，这几步的执行顺序并不是一定的，可能是123，也可能是132。\n\n这里的volatile是为了防止132运行的时候，别的线程发现对象不为null，然后直接去操作对象里的某些参数。\n\n**优点**:\n\n线程安全，锁的粒度小\n\n**缺点**：\n\n多线程学的不扎实的可能很难理解。\n\n### 静态内部类\n```java\npublic class SingletonDemo05 {\n\n    private SingletonDemo05() {\n\n    }\n\n    private static final class SingletonManager {\n        private static SingletonDemo05 instance = new SingletonDemo05();\n    }\n\n    public static SingletonDemo05 getInstance() {\n        return SingletonManager.instance;\n    }\n\n}\n```\n**优点**:\n\n改进了饿汉式的缺点，可以发现，现在即使SingletonDemo05里有其他的静态方法，只要我不调用getInstance()方法，我就不会白白的创建一个对象了。\n\n### 枚举\n```\npublic enum SingletonDemo06 {\n\n    INSTANCE;\n    \n    private Resource instance;\n\n    SingletonDemo06() {\n        instance = new Resource();\n    }\n\n    public Resource getInstance() {\n        return instance;\n    }\n\n}\n\nclass Resource {\n}\n```\n**优点**：\n\n前面的几种方式都可以通过反射和反序列化破坏掉\n\n由于枚举类型的特性，保证了线程安全、反射安全和反序列化安全\n\n在《Effective Java》书中有一句话是：\n\n> 单元素的枚举类型已经成为实现Singleton的最佳方法。","source":"_posts/Java设计模式--单例模式.md","raw":"---\ntitle: Java设计模式--单例模式\ndate: 2017-03-03 18:42:47\ncategories: Java设计模式\n---\n\n## 单例模式介绍\n使用单例可以减少不必要的系统开销，比如Spring里配置的数据源，创建和销毁耗费大量的资源，所以就用单例来保证项目加载的时候只生成一个实例，大家公用该实例。Spring的bean默认都是Singleton的。\n\n单例模式有以下特点：\n1. 单例类只能有一个实例。\n2. 单例类必须自己创建自己的唯一实例。\n3. 单例类必须给所有其他对象提供这一实例。\n\n## 单例模式的写法\n我画了张图来总结一下我所知道的单例模式的写法。\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-3-1/94738122-file_1488378897476_bff8.png)\n\n具体代码演示\n\n### 懒汉式\n```java\npublic class SingletonDemo01 {\n\n    private static SingletonDemo01 instance = null;\n\n    private SingletonDemo01() {\n\n    }\n\n    public static SingletonDemo01 getInstance() {\n        if (instance == null) {\n            instance = new SingletonDemo01();\n        }\n        return instance;\n    }\n\n}\n```\n这个有线程安全问题：线程A判断完实例没有创建，刚刚准备创建对象的时候，时间片切换到第二个线程B，这个时候线程B也发现实例没有创建，然后两个线程就各创建了一个对象了。\n\n### 饿汉式\n```java\npublic class SingletonDemo02 {\n\n    private static SingletonDemo02 instance = new SingletonDemo02();\n\n    private SingletonDemo02() {\n        //设置私有构造外部就不能通过new来新建实例了。\n    }\n\n    public static SingletonDemo02 getInstance() {\n        return instance;\n    }\n\n}\n```\n**优点**：\n\n饿汉模式简单，也没有线程安全问题。\n\n了解过类加载机制的同学可能要问，如果线程A和线程B同时触发了类加载机制怎么办呢？会不会在线程切换间创建两个对象？没关系，在jvm里，类加载的时候会自动的加锁，并且有CAS保证了只有一个对象被创建。具体细节这里不展开。\n\n**缺点**：\n\n如果我的类里定义了其他静态方法或静态变量，我只是想用一下静态方法或变量，依据getstatic指令触发类的初始化，这个时候，instance变量会跟着一起初始化，也就创建了一个SingletonDemo02的对象，白白浪费了内存。\n\n### 单检锁\n```java\npublic class SingletonDemo03 {\n\n    private static SingletonDemo03 instance = null;\n\n    private SingletonDemo03() {\n\n    }\n\n    public synchronized static SingletonDemo03 getInstance() {\n        if (instance == null) {\n            instance = new SingletonDemo03();\n        }\n        return instance;\n    }\n\n}\n```\n**优点**:\n\n线程安全。\n\n在懒汉式上加上了synchronized关键字，也就解决了普通懒汉式线程不安全的问题。\n\n**缺点**：\n\n锁的粒度太粗，instance==null的判断并不需要加锁。\n\n### 双检锁\n```java\npublic class SingletonDemo04 {\n\n    private static volatile SingletonDemo04 instance = null;\n\n    private SingletonDemo04() {\n\n    }\n\n    public synchronized static SingletonDemo04 getInstance() {\n        if (instance == null) {\n            synchronized (SingletonDemo04.class) {\n                if (instance == null) {\n                    instance = new SingletonDemo04();\n                }\n            }\n        }\n        return instance;\n    }\n\n}\n```\njvm创建对象的时候大致干三件事：  \n1. 在堆上分配内存空间\n2. 执行类的构造方法初始化参数\n3. 把创建的对象指向分配的内存空间地址\n\n在编译优化里，这几步的执行顺序并不是一定的，可能是123，也可能是132。\n\n这里的volatile是为了防止132运行的时候，别的线程发现对象不为null，然后直接去操作对象里的某些参数。\n\n**优点**:\n\n线程安全，锁的粒度小\n\n**缺点**：\n\n多线程学的不扎实的可能很难理解。\n\n### 静态内部类\n```java\npublic class SingletonDemo05 {\n\n    private SingletonDemo05() {\n\n    }\n\n    private static final class SingletonManager {\n        private static SingletonDemo05 instance = new SingletonDemo05();\n    }\n\n    public static SingletonDemo05 getInstance() {\n        return SingletonManager.instance;\n    }\n\n}\n```\n**优点**:\n\n改进了饿汉式的缺点，可以发现，现在即使SingletonDemo05里有其他的静态方法，只要我不调用getInstance()方法，我就不会白白的创建一个对象了。\n\n### 枚举\n```\npublic enum SingletonDemo06 {\n\n    INSTANCE;\n    \n    private Resource instance;\n\n    SingletonDemo06() {\n        instance = new Resource();\n    }\n\n    public Resource getInstance() {\n        return instance;\n    }\n\n}\n\nclass Resource {\n}\n```\n**优点**：\n\n前面的几种方式都可以通过反射和反序列化破坏掉\n\n由于枚举类型的特性，保证了线程安全、反射安全和反序列化安全\n\n在《Effective Java》书中有一句话是：\n\n> 单元素的枚举类型已经成为实现Singleton的最佳方法。","slug":"Java设计模式--单例模式","published":1,"updated":"2017-03-03T02:13:06.618Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciztnx1l000055k12r8yu6h4v","content":"<h2 id=\"单例模式介绍\"><a href=\"#单例模式介绍\" class=\"headerlink\" title=\"单例模式介绍\"></a>单例模式介绍</h2><p>使用单例可以减少不必要的系统开销，比如Spring里配置的数据源，创建和销毁耗费大量的资源，所以就用单例来保证项目加载的时候只生成一个实例，大家公用该实例。Spring的bean默认都是Singleton的。</p>\n<p>单例模式有以下特点：</p>\n<ol>\n<li>单例类只能有一个实例。</li>\n<li>单例类必须自己创建自己的唯一实例。</li>\n<li>单例类必须给所有其他对象提供这一实例。</li>\n</ol>\n<h2 id=\"单例模式的写法\"><a href=\"#单例模式的写法\" class=\"headerlink\" title=\"单例模式的写法\"></a>单例模式的写法</h2><p>我画了张图来总结一下我所知道的单例模式的写法。<br><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-3-1/94738122-file_1488378897476_bff8.png\" alt=\"image\"></p>\n<p>具体代码演示</p>\n<h3 id=\"懒汉式\"><a href=\"#懒汉式\" class=\"headerlink\" title=\"懒汉式\"></a>懒汉式</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonDemo01</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SingletonDemo01 instance = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SingletonDemo01</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SingletonDemo01 <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            instance = <span class=\"keyword\">new</span> SingletonDemo01();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> instance;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这个有线程安全问题：线程A判断完实例没有创建，刚刚准备创建对象的时候，时间片切换到第二个线程B，这个时候线程B也发现实例没有创建，然后两个线程就各创建了一个对象了。</p>\n<h3 id=\"饿汉式\"><a href=\"#饿汉式\" class=\"headerlink\" title=\"饿汉式\"></a>饿汉式</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonDemo02</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SingletonDemo02 instance = <span class=\"keyword\">new</span> SingletonDemo02();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SingletonDemo02</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//设置私有构造外部就不能通过new来新建实例了。</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SingletonDemo02 <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> instance;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>优点</strong>：</p>\n<p>饿汉模式简单，也没有线程安全问题。</p>\n<p>了解过类加载机制的同学可能要问，如果线程A和线程B同时触发了类加载机制怎么办呢？会不会在线程切换间创建两个对象？没关系，在jvm里，类加载的时候会自动的加锁，并且有CAS保证了只有一个对象被创建。具体细节这里不展开。</p>\n<p><strong>缺点</strong>：</p>\n<p>如果我的类里定义了其他静态方法或静态变量，我只是想用一下静态方法或变量，依据getstatic指令触发类的初始化，这个时候，instance变量会跟着一起初始化，也就创建了一个SingletonDemo02的对象，白白浪费了内存。</p>\n<h3 id=\"单检锁\"><a href=\"#单检锁\" class=\"headerlink\" title=\"单检锁\"></a>单检锁</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonDemo03</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SingletonDemo03 instance = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SingletonDemo03</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">static</span> SingletonDemo03 <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            instance = <span class=\"keyword\">new</span> SingletonDemo03();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> instance;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>优点</strong>:</p>\n<p>线程安全。</p>\n<p>在懒汉式上加上了synchronized关键字，也就解决了普通懒汉式线程不安全的问题。</p>\n<p><strong>缺点</strong>：</p>\n<p>锁的粒度太粗，instance==null的判断并不需要加锁。</p>\n<h3 id=\"双检锁\"><a href=\"#双检锁\" class=\"headerlink\" title=\"双检锁\"></a>双检锁</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonDemo04</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> SingletonDemo04 instance = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SingletonDemo04</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">static</span> SingletonDemo04 <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">synchronized</span> (SingletonDemo04.class) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    instance = <span class=\"keyword\">new</span> SingletonDemo04();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> instance;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>jvm创建对象的时候大致干三件事：  </p>\n<ol>\n<li>在堆上分配内存空间</li>\n<li>执行类的构造方法初始化参数</li>\n<li>把创建的对象指向分配的内存空间地址</li>\n</ol>\n<p>在编译优化里，这几步的执行顺序并不是一定的，可能是123，也可能是132。</p>\n<p>这里的volatile是为了防止132运行的时候，别的线程发现对象不为null，然后直接去操作对象里的某些参数。</p>\n<p><strong>优点</strong>:</p>\n<p>线程安全，锁的粒度小</p>\n<p><strong>缺点</strong>：</p>\n<p>多线程学的不扎实的可能很难理解。</p>\n<h3 id=\"静态内部类\"><a href=\"#静态内部类\" class=\"headerlink\" title=\"静态内部类\"></a>静态内部类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonDemo05</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SingletonDemo05</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonManager</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SingletonDemo05 instance = <span class=\"keyword\">new</span> SingletonDemo05();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SingletonDemo05 <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> SingletonManager.instance;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>优点</strong>:</p>\n<p>改进了饿汉式的缺点，可以发现，现在即使SingletonDemo05里有其他的静态方法，只要我不调用getInstance()方法，我就不会白白的创建一个对象了。</p>\n<h3 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">public enum SingletonDemo06 &#123;</div><div class=\"line\"></div><div class=\"line\">    INSTANCE;</div><div class=\"line\">    </div><div class=\"line\">    private Resource instance;</div><div class=\"line\"></div><div class=\"line\">    SingletonDemo06() &#123;</div><div class=\"line\">        instance = new Resource();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public Resource getInstance() &#123;</div><div class=\"line\">        return instance;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class Resource &#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>优点</strong>：</p>\n<p>前面的几种方式都可以通过反射和反序列化破坏掉</p>\n<p>由于枚举类型的特性，保证了线程安全、反射安全和反序列化安全</p>\n<p>在《Effective Java》书中有一句话是：</p>\n<blockquote>\n<p>单元素的枚举类型已经成为实现Singleton的最佳方法。</p>\n</blockquote>\n","excerpt":"","more":"<h2 id=\"单例模式介绍\"><a href=\"#单例模式介绍\" class=\"headerlink\" title=\"单例模式介绍\"></a>单例模式介绍</h2><p>使用单例可以减少不必要的系统开销，比如Spring里配置的数据源，创建和销毁耗费大量的资源，所以就用单例来保证项目加载的时候只生成一个实例，大家公用该实例。Spring的bean默认都是Singleton的。</p>\n<p>单例模式有以下特点：</p>\n<ol>\n<li>单例类只能有一个实例。</li>\n<li>单例类必须自己创建自己的唯一实例。</li>\n<li>单例类必须给所有其他对象提供这一实例。</li>\n</ol>\n<h2 id=\"单例模式的写法\"><a href=\"#单例模式的写法\" class=\"headerlink\" title=\"单例模式的写法\"></a>单例模式的写法</h2><p>我画了张图来总结一下我所知道的单例模式的写法。<br><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-3-1/94738122-file_1488378897476_bff8.png\" alt=\"image\"></p>\n<p>具体代码演示</p>\n<h3 id=\"懒汉式\"><a href=\"#懒汉式\" class=\"headerlink\" title=\"懒汉式\"></a>懒汉式</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonDemo01</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SingletonDemo01 instance = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SingletonDemo01</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SingletonDemo01 <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            instance = <span class=\"keyword\">new</span> SingletonDemo01();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> instance;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这个有线程安全问题：线程A判断完实例没有创建，刚刚准备创建对象的时候，时间片切换到第二个线程B，这个时候线程B也发现实例没有创建，然后两个线程就各创建了一个对象了。</p>\n<h3 id=\"饿汉式\"><a href=\"#饿汉式\" class=\"headerlink\" title=\"饿汉式\"></a>饿汉式</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonDemo02</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SingletonDemo02 instance = <span class=\"keyword\">new</span> SingletonDemo02();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SingletonDemo02</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//设置私有构造外部就不能通过new来新建实例了。</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SingletonDemo02 <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> instance;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>优点</strong>：</p>\n<p>饿汉模式简单，也没有线程安全问题。</p>\n<p>了解过类加载机制的同学可能要问，如果线程A和线程B同时触发了类加载机制怎么办呢？会不会在线程切换间创建两个对象？没关系，在jvm里，类加载的时候会自动的加锁，并且有CAS保证了只有一个对象被创建。具体细节这里不展开。</p>\n<p><strong>缺点</strong>：</p>\n<p>如果我的类里定义了其他静态方法或静态变量，我只是想用一下静态方法或变量，依据getstatic指令触发类的初始化，这个时候，instance变量会跟着一起初始化，也就创建了一个SingletonDemo02的对象，白白浪费了内存。</p>\n<h3 id=\"单检锁\"><a href=\"#单检锁\" class=\"headerlink\" title=\"单检锁\"></a>单检锁</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonDemo03</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SingletonDemo03 instance = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SingletonDemo03</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">static</span> SingletonDemo03 <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            instance = <span class=\"keyword\">new</span> SingletonDemo03();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> instance;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>优点</strong>:</p>\n<p>线程安全。</p>\n<p>在懒汉式上加上了synchronized关键字，也就解决了普通懒汉式线程不安全的问题。</p>\n<p><strong>缺点</strong>：</p>\n<p>锁的粒度太粗，instance==null的判断并不需要加锁。</p>\n<h3 id=\"双检锁\"><a href=\"#双检锁\" class=\"headerlink\" title=\"双检锁\"></a>双检锁</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonDemo04</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> SingletonDemo04 instance = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SingletonDemo04</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">static</span> SingletonDemo04 <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">synchronized</span> (SingletonDemo04.class) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    instance = <span class=\"keyword\">new</span> SingletonDemo04();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> instance;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>jvm创建对象的时候大致干三件事：  </p>\n<ol>\n<li>在堆上分配内存空间</li>\n<li>执行类的构造方法初始化参数</li>\n<li>把创建的对象指向分配的内存空间地址</li>\n</ol>\n<p>在编译优化里，这几步的执行顺序并不是一定的，可能是123，也可能是132。</p>\n<p>这里的volatile是为了防止132运行的时候，别的线程发现对象不为null，然后直接去操作对象里的某些参数。</p>\n<p><strong>优点</strong>:</p>\n<p>线程安全，锁的粒度小</p>\n<p><strong>缺点</strong>：</p>\n<p>多线程学的不扎实的可能很难理解。</p>\n<h3 id=\"静态内部类\"><a href=\"#静态内部类\" class=\"headerlink\" title=\"静态内部类\"></a>静态内部类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonDemo05</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SingletonDemo05</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonManager</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SingletonDemo05 instance = <span class=\"keyword\">new</span> SingletonDemo05();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SingletonDemo05 <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> SingletonManager.instance;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>优点</strong>:</p>\n<p>改进了饿汉式的缺点，可以发现，现在即使SingletonDemo05里有其他的静态方法，只要我不调用getInstance()方法，我就不会白白的创建一个对象了。</p>\n<h3 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">public enum SingletonDemo06 &#123;</div><div class=\"line\"></div><div class=\"line\">    INSTANCE;</div><div class=\"line\">    </div><div class=\"line\">    private Resource instance;</div><div class=\"line\"></div><div class=\"line\">    SingletonDemo06() &#123;</div><div class=\"line\">        instance = new Resource();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public Resource getInstance() &#123;</div><div class=\"line\">        return instance;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class Resource &#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>优点</strong>：</p>\n<p>前面的几种方式都可以通过反射和反序列化破坏掉</p>\n<p>由于枚举类型的特性，保证了线程安全、反射安全和反序列化安全</p>\n<p>在《Effective Java》书中有一句话是：</p>\n<blockquote>\n<p>单元素的枚举类型已经成为实现Singleton的最佳方法。</p>\n</blockquote>\n"},{"title":"final的用法","date":"2017-02-28T10:42:47.000Z","_content":"\n用final可以修饰类，方法，变量。分别表示类不可被继承，方法不可重写，变量不可变（不可变指的是引用地址不可变，内部的值还是可以变的）。\n\n# 代码实例\n### final修饰的成员变量\n被final修饰的类变量就变成了常量，必须要进行初始化，有两次机会可以初始化，一是声明的时候直接初始化，或者在构造函数里初始化。\n```java\npublic class Test008 {\n\n    final int PI;  //编译报错，未初始化\n\n    public Test008(){\n        \n    }\n\n    public Test008(int i){\n        PI = i;\n    }\n\n    public static void main(String[] args) {\n\n    }\n}\n```\n这段代码是有编译报错的，因为new Test008()的时候，PI是没有被初始化的。所以要嘛在无参构造里也加上初始化，要嘛删掉这个无参构造。\n\n### final修饰的局部变量\n```java\npublic class Test008 {\n    public static void main(String[] args) {\n        final int i;\n        System.out.println(i);  //编译报错，未初始化\n    }\n}\n```\n局部变量和成员变量不一样在，可以声明成final且不初始化，但是在使用的地方会编译报错。\n\n### final定义的基本类型的运算\nJava表达式转型规则由低到高转换：\n\n1. 所有的byte,short,char型的值将被提升为int型；\n2. 如果有一个操作数是long型，计算结果是long型；\n3. 如果有一个操作数是float型，计算结果是float型；\n4. 如果有一个操作数是double型，计算结果是double型；\n5. 被final修饰的两个常量运算会直接在编译期间获得值；\n\n####  例一\n```java\npublic class Test {\n    public static void main(String... args) {\n        byte b1 = 1, b2 = 2, b3;\n        b3 = (byte) (b1 + b2);  //需要强转，因为计算结果为int\n    }\n}\n```\n反编译结果\n```\n  public static void main(java.lang.String[]);\n    Code:\n       0: iconst_1   //整数1入栈，操作数栈【1】\n       1: istore_1   //弹出栈顶元素，赋值给索引为1的变量，操作数栈【】\n       2: iconst_2   //整数1入栈，操作数栈【2】\n       3: istore_2   //弹出栈顶元素，赋值给索引为2的变量，操作数栈【】\n       4: iload_1    //索引为1的变量的值入栈，操作数栈【1】\n       5: iload_2    //索引为2的变量的值入栈，操作数栈【1|2】\n       6: iadd       //栈顶的两个元素相加，操作数栈【3】\n       7: i2b        //把int型转成byte型，操作数栈【3】\n       8: istore_3   //弹出栈顶元素，赋值给索引为3的变量，操作数栈【】\n       9: return\n\n```\n\n####  例二\n```java\npublic class Test {\n    public static void main(String... args) {\n        final byte b1 = 1, b2 = 2;\n        byte b3 = b1 + b2;  //不需要强转，因为这就是byte b3 = 3;\n    }\n}\n```\n反编译结果\n```\n  public static void main(java.lang.String[]);\n    Code:\n       0: iconst_1 //将一个int型常量值推送至栈顶，操作数栈【1】\n       1: istore_1 //弹出栈顶元素，赋值给索引为1的变量，操作数栈【】\n       2: iconst_2 //将一个int型常量值推送至栈顶，操作数栈【2】\n       3: istore_2 //弹出栈顶元素，赋值给索引为2的变量，操作数栈【】\n       4: iconst_3 //将一个int型常量值推送至栈顶，操作数栈【3】\n       5: istore_3 //弹出栈顶元素，赋值给索引为3的变量，操作数栈【】\n       6: return\n\n```\n\n####  例三\n```java\npublic class Test {\n    public static void main(String... args) {\n        final byte b1 = 127, b2 = 3;\n        byte b3 = (byte) (b1 + b2);  //需要强转，因为这就是byte b3 = 130;这是不合法的\n    }\n}\n```\n反编译结果\n```\n  public static void main(java.lang.String[]);\n    Code:\n       0: bipush        127  //将一个byte型常量值推送至栈顶，操作数栈【127】\n       2: istore_1           //弹出栈顶元素，赋值给索引为1的变量，操作数栈【】\n       3: iconst_3           //将一个int型常量值推送至栈顶，操作数栈【3】\n       4: istore_2           //弹出栈顶元素，赋值给索引为2的变量，操作数栈【】\n       5: bipush        -126 //将一个byte型常量值推送至栈顶，操作数栈【-126】\n       7: istore_3           //弹出栈顶元素，赋值给索引为3的变量，操作数栈【】\n       8: return\n\n```\n这里为什么是bipush呢？因为-1 ~ 5使用iconst_m1 ~ iconst_5来入栈的。\n\n#### 例四\n```java\npublic class Test0 {\n    public static void main(String[] args) {\n        final byte b1 = 2;\n        byte b2 = 3;\n        byte b3 = (byte) (b1 + b2);  //需要强转\n    }\n}\n```\n\n```\n  public static void main(java.lang.String[]);\n    Code:\n       0: iconst_2 //将一个int型常量值推送至栈顶，操作数栈【2】\n       1: istore_1 //弹出栈顶元素，赋值给索引为1的变量，操作数栈【】\n       2: iconst_3 //将一个int型常量值推送至栈顶，操作数栈【3】\n       3: istore_2 //弹出栈顶元素，赋值给索引为2的变量，操作数栈【】\n       4: iconst_2 //将一个int型常量值推送至栈顶，操作数栈【2】\n       5: iload_2  //索引为1的变量的值入栈，操作数栈【2|3】\n       6: iadd     //栈顶的两个元素相加，操作数栈【5】\n       7: i2b      //把int型转成byte型，操作数栈【5】\n       8: istore_3 //弹出栈顶元素，赋值给索引为3的变量，操作数栈【】\n       9: return\n```\n\n可以发现，例二和例三少了一个iadd的过程，final直接在编译阶段就计算出来了。\n\n从例四可以看出，一个final类型和非final类型的数相加，final类的数是从常量池里取了以后压入栈的，而非final类的数是从变量里load了以后压入栈的。\n\n#### 例五\n```java\npublic class Test {\n    public static void main(String[] args) {\n        int i = 10;\n        double d = 7.0;\n        float f = (float) (i % d);\n        System.out.println(f);\n    }\n}\n```\n反编译后\n```\n  public static void main(java.lang.String[]);\n    Code:\n       0: bipush        10\n       2: istore_1\n       3: ldc2_w        #2                  // double 7.0d  //将long或double型常量值从常量池中推送至栈顶（宽索引）\n       6: dstore_2\n       7: iload_1\n       8: i2d       //栈顶int值强转double值，并且结果进栈\n       9: dload_2\n      10: drem      //栈顶两double型数值作取模运算，并且结果进栈\n      11: d2f       //栈顶double值强转float值，并且结果进栈\n      12: fstore        4  //这里的4指的是第四个变量，fstore_1指的是第二个变量。\n      14: getstatic     #4                  // Field java/lang/System.out:Ljava/io/PrintStream;\n      17: fload         4\n      19: invokevirtual #5                  // Method java/io/PrintStream.println:(F)V\n      22: return\n}\n```\n可以看到，运算的时候，把int转成了double的，符合了小转大的规则；","source":"_posts/final的用法.md","raw":"---\ntitle: final的用法\ndate: 2017-02-28 18:42:47\ncategories: Java基础\n---\n\n用final可以修饰类，方法，变量。分别表示类不可被继承，方法不可重写，变量不可变（不可变指的是引用地址不可变，内部的值还是可以变的）。\n\n# 代码实例\n### final修饰的成员变量\n被final修饰的类变量就变成了常量，必须要进行初始化，有两次机会可以初始化，一是声明的时候直接初始化，或者在构造函数里初始化。\n```java\npublic class Test008 {\n\n    final int PI;  //编译报错，未初始化\n\n    public Test008(){\n        \n    }\n\n    public Test008(int i){\n        PI = i;\n    }\n\n    public static void main(String[] args) {\n\n    }\n}\n```\n这段代码是有编译报错的，因为new Test008()的时候，PI是没有被初始化的。所以要嘛在无参构造里也加上初始化，要嘛删掉这个无参构造。\n\n### final修饰的局部变量\n```java\npublic class Test008 {\n    public static void main(String[] args) {\n        final int i;\n        System.out.println(i);  //编译报错，未初始化\n    }\n}\n```\n局部变量和成员变量不一样在，可以声明成final且不初始化，但是在使用的地方会编译报错。\n\n### final定义的基本类型的运算\nJava表达式转型规则由低到高转换：\n\n1. 所有的byte,short,char型的值将被提升为int型；\n2. 如果有一个操作数是long型，计算结果是long型；\n3. 如果有一个操作数是float型，计算结果是float型；\n4. 如果有一个操作数是double型，计算结果是double型；\n5. 被final修饰的两个常量运算会直接在编译期间获得值；\n\n####  例一\n```java\npublic class Test {\n    public static void main(String... args) {\n        byte b1 = 1, b2 = 2, b3;\n        b3 = (byte) (b1 + b2);  //需要强转，因为计算结果为int\n    }\n}\n```\n反编译结果\n```\n  public static void main(java.lang.String[]);\n    Code:\n       0: iconst_1   //整数1入栈，操作数栈【1】\n       1: istore_1   //弹出栈顶元素，赋值给索引为1的变量，操作数栈【】\n       2: iconst_2   //整数1入栈，操作数栈【2】\n       3: istore_2   //弹出栈顶元素，赋值给索引为2的变量，操作数栈【】\n       4: iload_1    //索引为1的变量的值入栈，操作数栈【1】\n       5: iload_2    //索引为2的变量的值入栈，操作数栈【1|2】\n       6: iadd       //栈顶的两个元素相加，操作数栈【3】\n       7: i2b        //把int型转成byte型，操作数栈【3】\n       8: istore_3   //弹出栈顶元素，赋值给索引为3的变量，操作数栈【】\n       9: return\n\n```\n\n####  例二\n```java\npublic class Test {\n    public static void main(String... args) {\n        final byte b1 = 1, b2 = 2;\n        byte b3 = b1 + b2;  //不需要强转，因为这就是byte b3 = 3;\n    }\n}\n```\n反编译结果\n```\n  public static void main(java.lang.String[]);\n    Code:\n       0: iconst_1 //将一个int型常量值推送至栈顶，操作数栈【1】\n       1: istore_1 //弹出栈顶元素，赋值给索引为1的变量，操作数栈【】\n       2: iconst_2 //将一个int型常量值推送至栈顶，操作数栈【2】\n       3: istore_2 //弹出栈顶元素，赋值给索引为2的变量，操作数栈【】\n       4: iconst_3 //将一个int型常量值推送至栈顶，操作数栈【3】\n       5: istore_3 //弹出栈顶元素，赋值给索引为3的变量，操作数栈【】\n       6: return\n\n```\n\n####  例三\n```java\npublic class Test {\n    public static void main(String... args) {\n        final byte b1 = 127, b2 = 3;\n        byte b3 = (byte) (b1 + b2);  //需要强转，因为这就是byte b3 = 130;这是不合法的\n    }\n}\n```\n反编译结果\n```\n  public static void main(java.lang.String[]);\n    Code:\n       0: bipush        127  //将一个byte型常量值推送至栈顶，操作数栈【127】\n       2: istore_1           //弹出栈顶元素，赋值给索引为1的变量，操作数栈【】\n       3: iconst_3           //将一个int型常量值推送至栈顶，操作数栈【3】\n       4: istore_2           //弹出栈顶元素，赋值给索引为2的变量，操作数栈【】\n       5: bipush        -126 //将一个byte型常量值推送至栈顶，操作数栈【-126】\n       7: istore_3           //弹出栈顶元素，赋值给索引为3的变量，操作数栈【】\n       8: return\n\n```\n这里为什么是bipush呢？因为-1 ~ 5使用iconst_m1 ~ iconst_5来入栈的。\n\n#### 例四\n```java\npublic class Test0 {\n    public static void main(String[] args) {\n        final byte b1 = 2;\n        byte b2 = 3;\n        byte b3 = (byte) (b1 + b2);  //需要强转\n    }\n}\n```\n\n```\n  public static void main(java.lang.String[]);\n    Code:\n       0: iconst_2 //将一个int型常量值推送至栈顶，操作数栈【2】\n       1: istore_1 //弹出栈顶元素，赋值给索引为1的变量，操作数栈【】\n       2: iconst_3 //将一个int型常量值推送至栈顶，操作数栈【3】\n       3: istore_2 //弹出栈顶元素，赋值给索引为2的变量，操作数栈【】\n       4: iconst_2 //将一个int型常量值推送至栈顶，操作数栈【2】\n       5: iload_2  //索引为1的变量的值入栈，操作数栈【2|3】\n       6: iadd     //栈顶的两个元素相加，操作数栈【5】\n       7: i2b      //把int型转成byte型，操作数栈【5】\n       8: istore_3 //弹出栈顶元素，赋值给索引为3的变量，操作数栈【】\n       9: return\n```\n\n可以发现，例二和例三少了一个iadd的过程，final直接在编译阶段就计算出来了。\n\n从例四可以看出，一个final类型和非final类型的数相加，final类的数是从常量池里取了以后压入栈的，而非final类的数是从变量里load了以后压入栈的。\n\n#### 例五\n```java\npublic class Test {\n    public static void main(String[] args) {\n        int i = 10;\n        double d = 7.0;\n        float f = (float) (i % d);\n        System.out.println(f);\n    }\n}\n```\n反编译后\n```\n  public static void main(java.lang.String[]);\n    Code:\n       0: bipush        10\n       2: istore_1\n       3: ldc2_w        #2                  // double 7.0d  //将long或double型常量值从常量池中推送至栈顶（宽索引）\n       6: dstore_2\n       7: iload_1\n       8: i2d       //栈顶int值强转double值，并且结果进栈\n       9: dload_2\n      10: drem      //栈顶两double型数值作取模运算，并且结果进栈\n      11: d2f       //栈顶double值强转float值，并且结果进栈\n      12: fstore        4  //这里的4指的是第四个变量，fstore_1指的是第二个变量。\n      14: getstatic     #4                  // Field java/lang/System.out:Ljava/io/PrintStream;\n      17: fload         4\n      19: invokevirtual #5                  // Method java/io/PrintStream.println:(F)V\n      22: return\n}\n```\n可以看到，运算的时候，把int转成了double的，符合了小转大的规则；","slug":"final的用法","published":1,"updated":"2017-03-01T06:22:21.098Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciztnx1l300065k12jtao7gns","content":"<p>用final可以修饰类，方法，变量。分别表示类不可被继承，方法不可重写，变量不可变（不可变指的是引用地址不可变，内部的值还是可以变的）。</p>\n<h1 id=\"代码实例\"><a href=\"#代码实例\" class=\"headerlink\" title=\"代码实例\"></a>代码实例</h1><h3 id=\"final修饰的成员变量\"><a href=\"#final修饰的成员变量\" class=\"headerlink\" title=\"final修饰的成员变量\"></a>final修饰的成员变量</h3><p>被final修饰的类变量就变成了常量，必须要进行初始化，有两次机会可以初始化，一是声明的时候直接初始化，或者在构造函数里初始化。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test008</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> PI;  <span class=\"comment\">//编译报错，未初始化</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Test008</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        </div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Test008</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span></span>&#123;</div><div class=\"line\">        PI = i;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这段代码是有编译报错的，因为new Test008()的时候，PI是没有被初始化的。所以要嘛在无参构造里也加上初始化，要嘛删掉这个无参构造。</p>\n<h3 id=\"final修饰的局部变量\"><a href=\"#final修饰的局部变量\" class=\"headerlink\" title=\"final修饰的局部变量\"></a>final修饰的局部变量</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test008</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> i;</div><div class=\"line\">        System.out.println(i);  <span class=\"comment\">//编译报错，未初始化</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>局部变量和成员变量不一样在，可以声明成final且不初始化，但是在使用的地方会编译报错。</p>\n<h3 id=\"final定义的基本类型的运算\"><a href=\"#final定义的基本类型的运算\" class=\"headerlink\" title=\"final定义的基本类型的运算\"></a>final定义的基本类型的运算</h3><p>Java表达式转型规则由低到高转换：</p>\n<ol>\n<li>所有的byte,short,char型的值将被提升为int型；</li>\n<li>如果有一个操作数是long型，计算结果是long型；</li>\n<li>如果有一个操作数是float型，计算结果是float型；</li>\n<li>如果有一个操作数是double型，计算结果是double型；</li>\n<li>被final修饰的两个常量运算会直接在编译期间获得值；</li>\n</ol>\n<h4 id=\"例一\"><a href=\"#例一\" class=\"headerlink\" title=\"例一\"></a>例一</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String... args)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">byte</span> b1 = <span class=\"number\">1</span>, b2 = <span class=\"number\">2</span>, b3;</div><div class=\"line\">        b3 = (<span class=\"keyword\">byte</span>) (b1 + b2);  <span class=\"comment\">//需要强转，因为计算结果为int</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>反编译结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static void main(java.lang.String[]);</div><div class=\"line\">  Code:</div><div class=\"line\">     0: iconst_1   //整数1入栈，操作数栈【1】</div><div class=\"line\">     1: istore_1   //弹出栈顶元素，赋值给索引为1的变量，操作数栈【】</div><div class=\"line\">     2: iconst_2   //整数1入栈，操作数栈【2】</div><div class=\"line\">     3: istore_2   //弹出栈顶元素，赋值给索引为2的变量，操作数栈【】</div><div class=\"line\">     4: iload_1    //索引为1的变量的值入栈，操作数栈【1】</div><div class=\"line\">     5: iload_2    //索引为2的变量的值入栈，操作数栈【1|2】</div><div class=\"line\">     6: iadd       //栈顶的两个元素相加，操作数栈【3】</div><div class=\"line\">     7: i2b        //把int型转成byte型，操作数栈【3】</div><div class=\"line\">     8: istore_3   //弹出栈顶元素，赋值给索引为3的变量，操作数栈【】</div><div class=\"line\">     9: return</div></pre></td></tr></table></figure></p>\n<h4 id=\"例二\"><a href=\"#例二\" class=\"headerlink\" title=\"例二\"></a>例二</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String... args)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">byte</span> b1 = <span class=\"number\">1</span>, b2 = <span class=\"number\">2</span>;</div><div class=\"line\">        <span class=\"keyword\">byte</span> b3 = b1 + b2;  <span class=\"comment\">//不需要强转，因为这就是byte b3 = 3;</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>反编译结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static void main(java.lang.String[]);</div><div class=\"line\">  Code:</div><div class=\"line\">     0: iconst_1 //将一个int型常量值推送至栈顶，操作数栈【1】</div><div class=\"line\">     1: istore_1 //弹出栈顶元素，赋值给索引为1的变量，操作数栈【】</div><div class=\"line\">     2: iconst_2 //将一个int型常量值推送至栈顶，操作数栈【2】</div><div class=\"line\">     3: istore_2 //弹出栈顶元素，赋值给索引为2的变量，操作数栈【】</div><div class=\"line\">     4: iconst_3 //将一个int型常量值推送至栈顶，操作数栈【3】</div><div class=\"line\">     5: istore_3 //弹出栈顶元素，赋值给索引为3的变量，操作数栈【】</div><div class=\"line\">     6: return</div></pre></td></tr></table></figure></p>\n<h4 id=\"例三\"><a href=\"#例三\" class=\"headerlink\" title=\"例三\"></a>例三</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String... args)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">byte</span> b1 = <span class=\"number\">127</span>, b2 = <span class=\"number\">3</span>;</div><div class=\"line\">        <span class=\"keyword\">byte</span> b3 = (<span class=\"keyword\">byte</span>) (b1 + b2);  <span class=\"comment\">//需要强转，因为这就是byte b3 = 130;这是不合法的</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>反编译结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static void main(java.lang.String[]);</div><div class=\"line\">  Code:</div><div class=\"line\">     0: bipush        127  //将一个byte型常量值推送至栈顶，操作数栈【127】</div><div class=\"line\">     2: istore_1           //弹出栈顶元素，赋值给索引为1的变量，操作数栈【】</div><div class=\"line\">     3: iconst_3           //将一个int型常量值推送至栈顶，操作数栈【3】</div><div class=\"line\">     4: istore_2           //弹出栈顶元素，赋值给索引为2的变量，操作数栈【】</div><div class=\"line\">     5: bipush        -126 //将一个byte型常量值推送至栈顶，操作数栈【-126】</div><div class=\"line\">     7: istore_3           //弹出栈顶元素，赋值给索引为3的变量，操作数栈【】</div><div class=\"line\">     8: return</div></pre></td></tr></table></figure></p>\n<p>这里为什么是bipush呢？因为-1 ~ 5使用iconst_m1 ~ iconst_5来入栈的。</p>\n<h4 id=\"例四\"><a href=\"#例四\" class=\"headerlink\" title=\"例四\"></a>例四</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test0</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">byte</span> b1 = <span class=\"number\">2</span>;</div><div class=\"line\">        <span class=\"keyword\">byte</span> b2 = <span class=\"number\">3</span>;</div><div class=\"line\">        <span class=\"keyword\">byte</span> b3 = (<span class=\"keyword\">byte</span>) (b1 + b2);  <span class=\"comment\">//需要强转</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static void main(java.lang.String[]);</div><div class=\"line\">  Code:</div><div class=\"line\">     0: iconst_2 //将一个int型常量值推送至栈顶，操作数栈【2】</div><div class=\"line\">     1: istore_1 //弹出栈顶元素，赋值给索引为1的变量，操作数栈【】</div><div class=\"line\">     2: iconst_3 //将一个int型常量值推送至栈顶，操作数栈【3】</div><div class=\"line\">     3: istore_2 //弹出栈顶元素，赋值给索引为2的变量，操作数栈【】</div><div class=\"line\">     4: iconst_2 //将一个int型常量值推送至栈顶，操作数栈【2】</div><div class=\"line\">     5: iload_2  //索引为1的变量的值入栈，操作数栈【2|3】</div><div class=\"line\">     6: iadd     //栈顶的两个元素相加，操作数栈【5】</div><div class=\"line\">     7: i2b      //把int型转成byte型，操作数栈【5】</div><div class=\"line\">     8: istore_3 //弹出栈顶元素，赋值给索引为3的变量，操作数栈【】</div><div class=\"line\">     9: return</div></pre></td></tr></table></figure>\n<p>可以发现，例二和例三少了一个iadd的过程，final直接在编译阶段就计算出来了。</p>\n<p>从例四可以看出，一个final类型和非final类型的数相加，final类的数是从常量池里取了以后压入栈的，而非final类的数是从变量里load了以后压入栈的。</p>\n<h4 id=\"例五\"><a href=\"#例五\" class=\"headerlink\" title=\"例五\"></a>例五</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"number\">10</span>;</div><div class=\"line\">        <span class=\"keyword\">double</span> d = <span class=\"number\">7.0</span>;</div><div class=\"line\">        <span class=\"keyword\">float</span> f = (<span class=\"keyword\">float</span>) (i % d);</div><div class=\"line\">        System.out.println(f);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>反编译后<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">  public static void main(java.lang.String[]);</div><div class=\"line\">    Code:</div><div class=\"line\">       0: bipush        10</div><div class=\"line\">       2: istore_1</div><div class=\"line\">       3: ldc2_w        #2                  // double 7.0d  //将long或double型常量值从常量池中推送至栈顶（宽索引）</div><div class=\"line\">       6: dstore_2</div><div class=\"line\">       7: iload_1</div><div class=\"line\">       8: i2d       //栈顶int值强转double值，并且结果进栈</div><div class=\"line\">       9: dload_2</div><div class=\"line\">      10: drem      //栈顶两double型数值作取模运算，并且结果进栈</div><div class=\"line\">      11: d2f       //栈顶double值强转float值，并且结果进栈</div><div class=\"line\">      12: fstore        4  //这里的4指的是第四个变量，fstore_1指的是第二个变量。</div><div class=\"line\">      14: getstatic     #4                  // Field java/lang/System.out:Ljava/io/PrintStream;</div><div class=\"line\">      17: fload         4</div><div class=\"line\">      19: invokevirtual #5                  // Method java/io/PrintStream.println:(F)V</div><div class=\"line\">      22: return</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>可以看到，运算的时候，把int转成了double的，符合了小转大的规则；</p>\n","excerpt":"","more":"<p>用final可以修饰类，方法，变量。分别表示类不可被继承，方法不可重写，变量不可变（不可变指的是引用地址不可变，内部的值还是可以变的）。</p>\n<h1 id=\"代码实例\"><a href=\"#代码实例\" class=\"headerlink\" title=\"代码实例\"></a>代码实例</h1><h3 id=\"final修饰的成员变量\"><a href=\"#final修饰的成员变量\" class=\"headerlink\" title=\"final修饰的成员变量\"></a>final修饰的成员变量</h3><p>被final修饰的类变量就变成了常量，必须要进行初始化，有两次机会可以初始化，一是声明的时候直接初始化，或者在构造函数里初始化。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test008</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> PI;  <span class=\"comment\">//编译报错，未初始化</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Test008</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        </div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Test008</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span></span>&#123;</div><div class=\"line\">        PI = i;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这段代码是有编译报错的，因为new Test008()的时候，PI是没有被初始化的。所以要嘛在无参构造里也加上初始化，要嘛删掉这个无参构造。</p>\n<h3 id=\"final修饰的局部变量\"><a href=\"#final修饰的局部变量\" class=\"headerlink\" title=\"final修饰的局部变量\"></a>final修饰的局部变量</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test008</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> i;</div><div class=\"line\">        System.out.println(i);  <span class=\"comment\">//编译报错，未初始化</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>局部变量和成员变量不一样在，可以声明成final且不初始化，但是在使用的地方会编译报错。</p>\n<h3 id=\"final定义的基本类型的运算\"><a href=\"#final定义的基本类型的运算\" class=\"headerlink\" title=\"final定义的基本类型的运算\"></a>final定义的基本类型的运算</h3><p>Java表达式转型规则由低到高转换：</p>\n<ol>\n<li>所有的byte,short,char型的值将被提升为int型；</li>\n<li>如果有一个操作数是long型，计算结果是long型；</li>\n<li>如果有一个操作数是float型，计算结果是float型；</li>\n<li>如果有一个操作数是double型，计算结果是double型；</li>\n<li>被final修饰的两个常量运算会直接在编译期间获得值；</li>\n</ol>\n<h4 id=\"例一\"><a href=\"#例一\" class=\"headerlink\" title=\"例一\"></a>例一</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String... args)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">byte</span> b1 = <span class=\"number\">1</span>, b2 = <span class=\"number\">2</span>, b3;</div><div class=\"line\">        b3 = (<span class=\"keyword\">byte</span>) (b1 + b2);  <span class=\"comment\">//需要强转，因为计算结果为int</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>反编译结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static void main(java.lang.String[]);</div><div class=\"line\">  Code:</div><div class=\"line\">     0: iconst_1   //整数1入栈，操作数栈【1】</div><div class=\"line\">     1: istore_1   //弹出栈顶元素，赋值给索引为1的变量，操作数栈【】</div><div class=\"line\">     2: iconst_2   //整数1入栈，操作数栈【2】</div><div class=\"line\">     3: istore_2   //弹出栈顶元素，赋值给索引为2的变量，操作数栈【】</div><div class=\"line\">     4: iload_1    //索引为1的变量的值入栈，操作数栈【1】</div><div class=\"line\">     5: iload_2    //索引为2的变量的值入栈，操作数栈【1|2】</div><div class=\"line\">     6: iadd       //栈顶的两个元素相加，操作数栈【3】</div><div class=\"line\">     7: i2b        //把int型转成byte型，操作数栈【3】</div><div class=\"line\">     8: istore_3   //弹出栈顶元素，赋值给索引为3的变量，操作数栈【】</div><div class=\"line\">     9: return</div></pre></td></tr></table></figure></p>\n<h4 id=\"例二\"><a href=\"#例二\" class=\"headerlink\" title=\"例二\"></a>例二</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String... args)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">byte</span> b1 = <span class=\"number\">1</span>, b2 = <span class=\"number\">2</span>;</div><div class=\"line\">        <span class=\"keyword\">byte</span> b3 = b1 + b2;  <span class=\"comment\">//不需要强转，因为这就是byte b3 = 3;</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>反编译结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static void main(java.lang.String[]);</div><div class=\"line\">  Code:</div><div class=\"line\">     0: iconst_1 //将一个int型常量值推送至栈顶，操作数栈【1】</div><div class=\"line\">     1: istore_1 //弹出栈顶元素，赋值给索引为1的变量，操作数栈【】</div><div class=\"line\">     2: iconst_2 //将一个int型常量值推送至栈顶，操作数栈【2】</div><div class=\"line\">     3: istore_2 //弹出栈顶元素，赋值给索引为2的变量，操作数栈【】</div><div class=\"line\">     4: iconst_3 //将一个int型常量值推送至栈顶，操作数栈【3】</div><div class=\"line\">     5: istore_3 //弹出栈顶元素，赋值给索引为3的变量，操作数栈【】</div><div class=\"line\">     6: return</div></pre></td></tr></table></figure></p>\n<h4 id=\"例三\"><a href=\"#例三\" class=\"headerlink\" title=\"例三\"></a>例三</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String... args)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">byte</span> b1 = <span class=\"number\">127</span>, b2 = <span class=\"number\">3</span>;</div><div class=\"line\">        <span class=\"keyword\">byte</span> b3 = (<span class=\"keyword\">byte</span>) (b1 + b2);  <span class=\"comment\">//需要强转，因为这就是byte b3 = 130;这是不合法的</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>反编译结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static void main(java.lang.String[]);</div><div class=\"line\">  Code:</div><div class=\"line\">     0: bipush        127  //将一个byte型常量值推送至栈顶，操作数栈【127】</div><div class=\"line\">     2: istore_1           //弹出栈顶元素，赋值给索引为1的变量，操作数栈【】</div><div class=\"line\">     3: iconst_3           //将一个int型常量值推送至栈顶，操作数栈【3】</div><div class=\"line\">     4: istore_2           //弹出栈顶元素，赋值给索引为2的变量，操作数栈【】</div><div class=\"line\">     5: bipush        -126 //将一个byte型常量值推送至栈顶，操作数栈【-126】</div><div class=\"line\">     7: istore_3           //弹出栈顶元素，赋值给索引为3的变量，操作数栈【】</div><div class=\"line\">     8: return</div></pre></td></tr></table></figure></p>\n<p>这里为什么是bipush呢？因为-1 ~ 5使用iconst_m1 ~ iconst_5来入栈的。</p>\n<h4 id=\"例四\"><a href=\"#例四\" class=\"headerlink\" title=\"例四\"></a>例四</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test0</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">byte</span> b1 = <span class=\"number\">2</span>;</div><div class=\"line\">        <span class=\"keyword\">byte</span> b2 = <span class=\"number\">3</span>;</div><div class=\"line\">        <span class=\"keyword\">byte</span> b3 = (<span class=\"keyword\">byte</span>) (b1 + b2);  <span class=\"comment\">//需要强转</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static void main(java.lang.String[]);</div><div class=\"line\">  Code:</div><div class=\"line\">     0: iconst_2 //将一个int型常量值推送至栈顶，操作数栈【2】</div><div class=\"line\">     1: istore_1 //弹出栈顶元素，赋值给索引为1的变量，操作数栈【】</div><div class=\"line\">     2: iconst_3 //将一个int型常量值推送至栈顶，操作数栈【3】</div><div class=\"line\">     3: istore_2 //弹出栈顶元素，赋值给索引为2的变量，操作数栈【】</div><div class=\"line\">     4: iconst_2 //将一个int型常量值推送至栈顶，操作数栈【2】</div><div class=\"line\">     5: iload_2  //索引为1的变量的值入栈，操作数栈【2|3】</div><div class=\"line\">     6: iadd     //栈顶的两个元素相加，操作数栈【5】</div><div class=\"line\">     7: i2b      //把int型转成byte型，操作数栈【5】</div><div class=\"line\">     8: istore_3 //弹出栈顶元素，赋值给索引为3的变量，操作数栈【】</div><div class=\"line\">     9: return</div></pre></td></tr></table></figure>\n<p>可以发现，例二和例三少了一个iadd的过程，final直接在编译阶段就计算出来了。</p>\n<p>从例四可以看出，一个final类型和非final类型的数相加，final类的数是从常量池里取了以后压入栈的，而非final类的数是从变量里load了以后压入栈的。</p>\n<h4 id=\"例五\"><a href=\"#例五\" class=\"headerlink\" title=\"例五\"></a>例五</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"number\">10</span>;</div><div class=\"line\">        <span class=\"keyword\">double</span> d = <span class=\"number\">7.0</span>;</div><div class=\"line\">        <span class=\"keyword\">float</span> f = (<span class=\"keyword\">float</span>) (i % d);</div><div class=\"line\">        System.out.println(f);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>反编译后<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">  public static void main(java.lang.String[]);</div><div class=\"line\">    Code:</div><div class=\"line\">       0: bipush        10</div><div class=\"line\">       2: istore_1</div><div class=\"line\">       3: ldc2_w        #2                  // double 7.0d  //将long或double型常量值从常量池中推送至栈顶（宽索引）</div><div class=\"line\">       6: dstore_2</div><div class=\"line\">       7: iload_1</div><div class=\"line\">       8: i2d       //栈顶int值强转double值，并且结果进栈</div><div class=\"line\">       9: dload_2</div><div class=\"line\">      10: drem      //栈顶两double型数值作取模运算，并且结果进栈</div><div class=\"line\">      11: d2f       //栈顶double值强转float值，并且结果进栈</div><div class=\"line\">      12: fstore        4  //这里的4指的是第四个变量，fstore_1指的是第二个变量。</div><div class=\"line\">      14: getstatic     #4                  // Field java/lang/System.out:Ljava/io/PrintStream;</div><div class=\"line\">      17: fload         4</div><div class=\"line\">      19: invokevirtual #5                  // Method java/io/PrintStream.println:(F)V</div><div class=\"line\">      22: return</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>可以看到，运算的时候，把int转成了double的，符合了小转大的规则；</p>\n"},{"title":"ResponseEntity和@ResponseBody的区别","date":"2017-03-03T03:34:47.000Z","_content":"## 问题\n我在controller里定义了两个简单的handler来返回一个消息。\n```java\n@RequestMapping(value = \"/message\")\n@ResponseBody\npublic Message get() {\n    return new Message(penguinCounter.incrementAndGet() + \" penguin!\");\n}\n```\n我也可以用下面这种形式\n```java\n@RequestMapping(value = \"/message\")\nResponseEntity<Message> get() {\n    Message message = new Message(penguinCounter.incrementAndGet() + \" penguin!\");\n    return new ResponseEntity<Message>(message, HttpStatus.OK);\n}\n```\n那么这两种实现方式有什么区别呢？\n## 答案\nResponseEntity可以更加灵活的在response里添加header信息。\n\n通过[Spring官方文档](http://docs.spring.io/spring/docs/3.0.x/javadoc-api/org/springframework/http/ResponseEntity.html)里的第四个构造函数\n```java\nResponseEntity(T body, MultiValueMap<String,String> headers, HttpStatus statusCode) \n```\n比较常用的headers有Status,Content-Type和Cache-Control。\n\n如果不需要自己设置，使用@ResponseBody会稍微简便一点。\n","source":"_posts/ResponseEntity和@ResponseBody的区别.md","raw":"---\ntitle: ResponseEntity和@ResponseBody的区别\ndate: 2017-03-03 11:34:47\ncategories: Spring\n---\n## 问题\n我在controller里定义了两个简单的handler来返回一个消息。\n```java\n@RequestMapping(value = \"/message\")\n@ResponseBody\npublic Message get() {\n    return new Message(penguinCounter.incrementAndGet() + \" penguin!\");\n}\n```\n我也可以用下面这种形式\n```java\n@RequestMapping(value = \"/message\")\nResponseEntity<Message> get() {\n    Message message = new Message(penguinCounter.incrementAndGet() + \" penguin!\");\n    return new ResponseEntity<Message>(message, HttpStatus.OK);\n}\n```\n那么这两种实现方式有什么区别呢？\n## 答案\nResponseEntity可以更加灵活的在response里添加header信息。\n\n通过[Spring官方文档](http://docs.spring.io/spring/docs/3.0.x/javadoc-api/org/springframework/http/ResponseEntity.html)里的第四个构造函数\n```java\nResponseEntity(T body, MultiValueMap<String,String> headers, HttpStatus statusCode) \n```\n比较常用的headers有Status,Content-Type和Cache-Control。\n\n如果不需要自己设置，使用@ResponseBody会稍微简便一点。\n","slug":"ResponseEntity和@ResponseBody的区别","published":1,"updated":"2017-03-03T10:12:47.927Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciztnx1l600075k12lnywwm0t","content":"<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>我在controller里定义了两个简单的handler来返回一个消息。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/message\"</span>)</div><div class=\"line\"><span class=\"meta\">@ResponseBody</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Message <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Message(penguinCounter.incrementAndGet() + <span class=\"string\">\" penguin!\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我也可以用下面这种形式<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/message\"</span>)</div><div class=\"line\"><span class=\"function\">ResponseEntity&lt;Message&gt; <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    Message message = <span class=\"keyword\">new</span> Message(penguinCounter.incrementAndGet() + <span class=\"string\">\" penguin!\"</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ResponseEntity&lt;Message&gt;(message, HttpStatus.OK);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>那么这两种实现方式有什么区别呢？</p>\n<h2 id=\"答案\"><a href=\"#答案\" class=\"headerlink\" title=\"答案\"></a>答案</h2><p>ResponseEntity可以更加灵活的在response里添加header信息。</p>\n<p>通过<a href=\"http://docs.spring.io/spring/docs/3.0.x/javadoc-api/org/springframework/http/ResponseEntity.html\" target=\"_blank\" rel=\"external\">Spring官方文档</a>里的第四个构造函数<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ResponseEntity(T body, MultiValueMap&lt;String,String&gt; headers, HttpStatus statusCode)</div></pre></td></tr></table></figure></p>\n<p>比较常用的headers有Status,Content-Type和Cache-Control。</p>\n<p>如果不需要自己设置，使用@ResponseBody会稍微简便一点。</p>\n","excerpt":"","more":"<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>我在controller里定义了两个简单的handler来返回一个消息。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/message\"</span>)</div><div class=\"line\"><span class=\"meta\">@ResponseBody</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Message <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Message(penguinCounter.incrementAndGet() + <span class=\"string\">\" penguin!\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我也可以用下面这种形式<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/message\"</span>)</div><div class=\"line\"><span class=\"function\">ResponseEntity&lt;Message&gt; <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    Message message = <span class=\"keyword\">new</span> Message(penguinCounter.incrementAndGet() + <span class=\"string\">\" penguin!\"</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ResponseEntity&lt;Message&gt;(message, HttpStatus.OK);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>那么这两种实现方式有什么区别呢？</p>\n<h2 id=\"答案\"><a href=\"#答案\" class=\"headerlink\" title=\"答案\"></a>答案</h2><p>ResponseEntity可以更加灵活的在response里添加header信息。</p>\n<p>通过<a href=\"http://docs.spring.io/spring/docs/3.0.x/javadoc-api/org/springframework/http/ResponseEntity.html\">Spring官方文档</a>里的第四个构造函数<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ResponseEntity(T body, MultiValueMap&lt;String,String&gt; headers, HttpStatus statusCode)</div></pre></td></tr></table></figure></p>\n<p>比较常用的headers有Status,Content-Type和Cache-Control。</p>\n<p>如果不需要自己设置，使用@ResponseBody会稍微简便一点。</p>\n"},{"title":"java数组复制的四种方式","date":"2017-02-28T10:42:47.000Z","_content":"\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-2-9/19026684-file_1486612180846_1715d.png)\n\n我测试出来的效率如图。\n\n但是clone方法和Arrays.copyOf谁快不好说，貌似和数据量也有关系。\n\n反正System.arrayCopy肯定是最快的，因为是native的方法。ArrayList里用的也是这个方法。\n\nArrays.copyOf底层用的其实也是System.arrayCopy\n\n**测试代码如下**\n\n```java\npublic class ArrayCopyTest {\n    private static String[] src\n            = {\"Aaaaaaaaaa\", \"Vvvvvvv\", \"Bbbb\", \"Cccc\", \"Dddd\", \"Eddeee\", \"FFFFFFffffffff\",\n            \"Aaaaaaaaaa\", \"Vvvvvvv\", \"Bbbb\", \"Cccc\", \"Dddd\", \"Eddeee\", \"FFFFFFffffffff\",\n            \"Aaaaaaaaaa\", \"Vvvvvvv\", \"Bbbb\", \"Cccc\", \"Dddd\", \"Eddeee\", \"FFFFFFffffffff\",\n            \"Aaaaaaaaaa\", \"Vvvvvvv\", \"Bbbb\", \"Cccc\", \"Dddd\", \"Eddeee\", \"FFFFFFffffffff\",\n            \"Aaaaaaaaaa\", \"Vvvvvvv\", \"Bbbb\", \"Cccc\", \"Dddd\", \"Eddeee\", \"FFFFFFffffffff\",\n            \"Aaaaaaaaaa\", \"Vvvvvvv\", \"Bbbb\", \"Cccc\", \"Dddd\", \"Eddeee\", \"FFFFFFffffffff\",\n            \"Aaaaaaaaaa\", \"Vvvvvvv\", \"Bbbb\", \"Cccc\", \"Dddd\", \"Eddeee\", \"FFFFFFffffffff\",\n            \"Aaaaaaaaaa\", \"Vvvvvvv\", \"Bbbb\", \"Cccc\", \"Dddd\", \"Eddeee\", \"FFFFFFffffffff\",\n            \"Aaaaaaaaaa\", \"Vvvvvvv\", \"Bbbb\", \"Cccc\", \"Dddd\", \"Eddeee\", \"FFFFFFffffffff\",\n            \"Aaaaaaaaaa\", \"Vvvvvvv\", \"Bbbb\", \"Cccc\", \"Dddd\", \"Eddeee\", \"FFFFFFffffffff\"};\n\n    private static String[] dst;\n\n    public static void main(String[] args) {\n        int num = 5000000;\n        System.out.println(forCopy(num));\n        System.out.println(cloneCopy(num));\n        System.out.println(systemJNICopy(num));\n        System.out.println(ArraysToolCopy(num));\n    }\n\n    private static long forCopy(int num) {\n        long start = System.currentTimeMillis();\n        while (num-- > 0) {\n            int size = src.length;\n            dst = new String[size];\n            for (int i = 0; i < size; i++) {\n                dst[i] = src[i];\n            }\n        }\n        long end = System.currentTimeMillis();\n        return end - start;\n    }\n\n    private static long cloneCopy(int num) {\n        long start = System.currentTimeMillis();\n        while (num-- > 0) {\n            dst = src.clone();\n        }\n        long end = System.currentTimeMillis();\n        return end - start;\n    }\n\n    private static long systemJNICopy(int num) {\n        long start = System.currentTimeMillis();\n        while (num-- > 0) {\n            System.arraycopy(src, 0, dst, 0, src.length);\n        }\n        long end = System.currentTimeMillis();\n        return end - start;\n    }\n\n    private static long ArraysToolCopy(int num) {\n        long start = System.currentTimeMillis();\n        while (num-- > 0) {\n            dst = Arrays.copyOf(src, src.length);\n        }\n        long end = System.currentTimeMillis();\n        return end - start;\n    }\n}\n```","source":"_posts/java数组复制的四种方式.md","raw":"---\ntitle: java数组复制的四种方式\ndate: 2017-02-28 18:42:47\ncategories: Java基础\n---\n\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-2-9/19026684-file_1486612180846_1715d.png)\n\n我测试出来的效率如图。\n\n但是clone方法和Arrays.copyOf谁快不好说，貌似和数据量也有关系。\n\n反正System.arrayCopy肯定是最快的，因为是native的方法。ArrayList里用的也是这个方法。\n\nArrays.copyOf底层用的其实也是System.arrayCopy\n\n**测试代码如下**\n\n```java\npublic class ArrayCopyTest {\n    private static String[] src\n            = {\"Aaaaaaaaaa\", \"Vvvvvvv\", \"Bbbb\", \"Cccc\", \"Dddd\", \"Eddeee\", \"FFFFFFffffffff\",\n            \"Aaaaaaaaaa\", \"Vvvvvvv\", \"Bbbb\", \"Cccc\", \"Dddd\", \"Eddeee\", \"FFFFFFffffffff\",\n            \"Aaaaaaaaaa\", \"Vvvvvvv\", \"Bbbb\", \"Cccc\", \"Dddd\", \"Eddeee\", \"FFFFFFffffffff\",\n            \"Aaaaaaaaaa\", \"Vvvvvvv\", \"Bbbb\", \"Cccc\", \"Dddd\", \"Eddeee\", \"FFFFFFffffffff\",\n            \"Aaaaaaaaaa\", \"Vvvvvvv\", \"Bbbb\", \"Cccc\", \"Dddd\", \"Eddeee\", \"FFFFFFffffffff\",\n            \"Aaaaaaaaaa\", \"Vvvvvvv\", \"Bbbb\", \"Cccc\", \"Dddd\", \"Eddeee\", \"FFFFFFffffffff\",\n            \"Aaaaaaaaaa\", \"Vvvvvvv\", \"Bbbb\", \"Cccc\", \"Dddd\", \"Eddeee\", \"FFFFFFffffffff\",\n            \"Aaaaaaaaaa\", \"Vvvvvvv\", \"Bbbb\", \"Cccc\", \"Dddd\", \"Eddeee\", \"FFFFFFffffffff\",\n            \"Aaaaaaaaaa\", \"Vvvvvvv\", \"Bbbb\", \"Cccc\", \"Dddd\", \"Eddeee\", \"FFFFFFffffffff\",\n            \"Aaaaaaaaaa\", \"Vvvvvvv\", \"Bbbb\", \"Cccc\", \"Dddd\", \"Eddeee\", \"FFFFFFffffffff\"};\n\n    private static String[] dst;\n\n    public static void main(String[] args) {\n        int num = 5000000;\n        System.out.println(forCopy(num));\n        System.out.println(cloneCopy(num));\n        System.out.println(systemJNICopy(num));\n        System.out.println(ArraysToolCopy(num));\n    }\n\n    private static long forCopy(int num) {\n        long start = System.currentTimeMillis();\n        while (num-- > 0) {\n            int size = src.length;\n            dst = new String[size];\n            for (int i = 0; i < size; i++) {\n                dst[i] = src[i];\n            }\n        }\n        long end = System.currentTimeMillis();\n        return end - start;\n    }\n\n    private static long cloneCopy(int num) {\n        long start = System.currentTimeMillis();\n        while (num-- > 0) {\n            dst = src.clone();\n        }\n        long end = System.currentTimeMillis();\n        return end - start;\n    }\n\n    private static long systemJNICopy(int num) {\n        long start = System.currentTimeMillis();\n        while (num-- > 0) {\n            System.arraycopy(src, 0, dst, 0, src.length);\n        }\n        long end = System.currentTimeMillis();\n        return end - start;\n    }\n\n    private static long ArraysToolCopy(int num) {\n        long start = System.currentTimeMillis();\n        while (num-- > 0) {\n            dst = Arrays.copyOf(src, src.length);\n        }\n        long end = System.currentTimeMillis();\n        return end - start;\n    }\n}\n```","slug":"java数组复制的四种方式","published":1,"updated":"2017-03-01T06:22:51.399Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciztnx1lg00095k12i9m9szy8","content":"<p><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-2-9/19026684-file_1486612180846_1715d.png\" alt=\"image\"></p>\n<p>我测试出来的效率如图。</p>\n<p>但是clone方法和Arrays.copyOf谁快不好说，貌似和数据量也有关系。</p>\n<p>反正System.arrayCopy肯定是最快的，因为是native的方法。ArrayList里用的也是这个方法。</p>\n<p>Arrays.copyOf底层用的其实也是System.arrayCopy</p>\n<p><strong>测试代码如下</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayCopyTest</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String[] src</div><div class=\"line\">            = &#123;<span class=\"string\">\"Aaaaaaaaaa\"</span>, <span class=\"string\">\"Vvvvvvv\"</span>, <span class=\"string\">\"Bbbb\"</span>, <span class=\"string\">\"Cccc\"</span>, <span class=\"string\">\"Dddd\"</span>, <span class=\"string\">\"Eddeee\"</span>, <span class=\"string\">\"FFFFFFffffffff\"</span>,</div><div class=\"line\">            <span class=\"string\">\"Aaaaaaaaaa\"</span>, <span class=\"string\">\"Vvvvvvv\"</span>, <span class=\"string\">\"Bbbb\"</span>, <span class=\"string\">\"Cccc\"</span>, <span class=\"string\">\"Dddd\"</span>, <span class=\"string\">\"Eddeee\"</span>, <span class=\"string\">\"FFFFFFffffffff\"</span>,</div><div class=\"line\">            <span class=\"string\">\"Aaaaaaaaaa\"</span>, <span class=\"string\">\"Vvvvvvv\"</span>, <span class=\"string\">\"Bbbb\"</span>, <span class=\"string\">\"Cccc\"</span>, <span class=\"string\">\"Dddd\"</span>, <span class=\"string\">\"Eddeee\"</span>, <span class=\"string\">\"FFFFFFffffffff\"</span>,</div><div class=\"line\">            <span class=\"string\">\"Aaaaaaaaaa\"</span>, <span class=\"string\">\"Vvvvvvv\"</span>, <span class=\"string\">\"Bbbb\"</span>, <span class=\"string\">\"Cccc\"</span>, <span class=\"string\">\"Dddd\"</span>, <span class=\"string\">\"Eddeee\"</span>, <span class=\"string\">\"FFFFFFffffffff\"</span>,</div><div class=\"line\">            <span class=\"string\">\"Aaaaaaaaaa\"</span>, <span class=\"string\">\"Vvvvvvv\"</span>, <span class=\"string\">\"Bbbb\"</span>, <span class=\"string\">\"Cccc\"</span>, <span class=\"string\">\"Dddd\"</span>, <span class=\"string\">\"Eddeee\"</span>, <span class=\"string\">\"FFFFFFffffffff\"</span>,</div><div class=\"line\">            <span class=\"string\">\"Aaaaaaaaaa\"</span>, <span class=\"string\">\"Vvvvvvv\"</span>, <span class=\"string\">\"Bbbb\"</span>, <span class=\"string\">\"Cccc\"</span>, <span class=\"string\">\"Dddd\"</span>, <span class=\"string\">\"Eddeee\"</span>, <span class=\"string\">\"FFFFFFffffffff\"</span>,</div><div class=\"line\">            <span class=\"string\">\"Aaaaaaaaaa\"</span>, <span class=\"string\">\"Vvvvvvv\"</span>, <span class=\"string\">\"Bbbb\"</span>, <span class=\"string\">\"Cccc\"</span>, <span class=\"string\">\"Dddd\"</span>, <span class=\"string\">\"Eddeee\"</span>, <span class=\"string\">\"FFFFFFffffffff\"</span>,</div><div class=\"line\">            <span class=\"string\">\"Aaaaaaaaaa\"</span>, <span class=\"string\">\"Vvvvvvv\"</span>, <span class=\"string\">\"Bbbb\"</span>, <span class=\"string\">\"Cccc\"</span>, <span class=\"string\">\"Dddd\"</span>, <span class=\"string\">\"Eddeee\"</span>, <span class=\"string\">\"FFFFFFffffffff\"</span>,</div><div class=\"line\">            <span class=\"string\">\"Aaaaaaaaaa\"</span>, <span class=\"string\">\"Vvvvvvv\"</span>, <span class=\"string\">\"Bbbb\"</span>, <span class=\"string\">\"Cccc\"</span>, <span class=\"string\">\"Dddd\"</span>, <span class=\"string\">\"Eddeee\"</span>, <span class=\"string\">\"FFFFFFffffffff\"</span>,</div><div class=\"line\">            <span class=\"string\">\"Aaaaaaaaaa\"</span>, <span class=\"string\">\"Vvvvvvv\"</span>, <span class=\"string\">\"Bbbb\"</span>, <span class=\"string\">\"Cccc\"</span>, <span class=\"string\">\"Dddd\"</span>, <span class=\"string\">\"Eddeee\"</span>, <span class=\"string\">\"FFFFFFffffffff\"</span>&#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String[] dst;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> num = <span class=\"number\">5000000</span>;</div><div class=\"line\">        System.out.println(forCopy(num));</div><div class=\"line\">        System.out.println(cloneCopy(num));</div><div class=\"line\">        System.out.println(systemJNICopy(num));</div><div class=\"line\">        System.out.println(ArraysToolCopy(num));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">forCopy</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">long</span> start = System.currentTimeMillis();</div><div class=\"line\">        <span class=\"keyword\">while</span> (num-- &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> size = src.length;</div><div class=\"line\">            dst = <span class=\"keyword\">new</span> String[size];</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</div><div class=\"line\">                dst[i] = src[i];</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">long</span> end = System.currentTimeMillis();</div><div class=\"line\">        <span class=\"keyword\">return</span> end - start;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">cloneCopy</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">long</span> start = System.currentTimeMillis();</div><div class=\"line\">        <span class=\"keyword\">while</span> (num-- &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            dst = src.clone();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">long</span> end = System.currentTimeMillis();</div><div class=\"line\">        <span class=\"keyword\">return</span> end - start;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">systemJNICopy</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">long</span> start = System.currentTimeMillis();</div><div class=\"line\">        <span class=\"keyword\">while</span> (num-- &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            System.arraycopy(src, <span class=\"number\">0</span>, dst, <span class=\"number\">0</span>, src.length);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">long</span> end = System.currentTimeMillis();</div><div class=\"line\">        <span class=\"keyword\">return</span> end - start;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">ArraysToolCopy</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">long</span> start = System.currentTimeMillis();</div><div class=\"line\">        <span class=\"keyword\">while</span> (num-- &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            dst = Arrays.copyOf(src, src.length);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">long</span> end = System.currentTimeMillis();</div><div class=\"line\">        <span class=\"keyword\">return</span> end - start;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"","more":"<p><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-2-9/19026684-file_1486612180846_1715d.png\" alt=\"image\"></p>\n<p>我测试出来的效率如图。</p>\n<p>但是clone方法和Arrays.copyOf谁快不好说，貌似和数据量也有关系。</p>\n<p>反正System.arrayCopy肯定是最快的，因为是native的方法。ArrayList里用的也是这个方法。</p>\n<p>Arrays.copyOf底层用的其实也是System.arrayCopy</p>\n<p><strong>测试代码如下</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayCopyTest</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String[] src</div><div class=\"line\">            = &#123;<span class=\"string\">\"Aaaaaaaaaa\"</span>, <span class=\"string\">\"Vvvvvvv\"</span>, <span class=\"string\">\"Bbbb\"</span>, <span class=\"string\">\"Cccc\"</span>, <span class=\"string\">\"Dddd\"</span>, <span class=\"string\">\"Eddeee\"</span>, <span class=\"string\">\"FFFFFFffffffff\"</span>,</div><div class=\"line\">            <span class=\"string\">\"Aaaaaaaaaa\"</span>, <span class=\"string\">\"Vvvvvvv\"</span>, <span class=\"string\">\"Bbbb\"</span>, <span class=\"string\">\"Cccc\"</span>, <span class=\"string\">\"Dddd\"</span>, <span class=\"string\">\"Eddeee\"</span>, <span class=\"string\">\"FFFFFFffffffff\"</span>,</div><div class=\"line\">            <span class=\"string\">\"Aaaaaaaaaa\"</span>, <span class=\"string\">\"Vvvvvvv\"</span>, <span class=\"string\">\"Bbbb\"</span>, <span class=\"string\">\"Cccc\"</span>, <span class=\"string\">\"Dddd\"</span>, <span class=\"string\">\"Eddeee\"</span>, <span class=\"string\">\"FFFFFFffffffff\"</span>,</div><div class=\"line\">            <span class=\"string\">\"Aaaaaaaaaa\"</span>, <span class=\"string\">\"Vvvvvvv\"</span>, <span class=\"string\">\"Bbbb\"</span>, <span class=\"string\">\"Cccc\"</span>, <span class=\"string\">\"Dddd\"</span>, <span class=\"string\">\"Eddeee\"</span>, <span class=\"string\">\"FFFFFFffffffff\"</span>,</div><div class=\"line\">            <span class=\"string\">\"Aaaaaaaaaa\"</span>, <span class=\"string\">\"Vvvvvvv\"</span>, <span class=\"string\">\"Bbbb\"</span>, <span class=\"string\">\"Cccc\"</span>, <span class=\"string\">\"Dddd\"</span>, <span class=\"string\">\"Eddeee\"</span>, <span class=\"string\">\"FFFFFFffffffff\"</span>,</div><div class=\"line\">            <span class=\"string\">\"Aaaaaaaaaa\"</span>, <span class=\"string\">\"Vvvvvvv\"</span>, <span class=\"string\">\"Bbbb\"</span>, <span class=\"string\">\"Cccc\"</span>, <span class=\"string\">\"Dddd\"</span>, <span class=\"string\">\"Eddeee\"</span>, <span class=\"string\">\"FFFFFFffffffff\"</span>,</div><div class=\"line\">            <span class=\"string\">\"Aaaaaaaaaa\"</span>, <span class=\"string\">\"Vvvvvvv\"</span>, <span class=\"string\">\"Bbbb\"</span>, <span class=\"string\">\"Cccc\"</span>, <span class=\"string\">\"Dddd\"</span>, <span class=\"string\">\"Eddeee\"</span>, <span class=\"string\">\"FFFFFFffffffff\"</span>,</div><div class=\"line\">            <span class=\"string\">\"Aaaaaaaaaa\"</span>, <span class=\"string\">\"Vvvvvvv\"</span>, <span class=\"string\">\"Bbbb\"</span>, <span class=\"string\">\"Cccc\"</span>, <span class=\"string\">\"Dddd\"</span>, <span class=\"string\">\"Eddeee\"</span>, <span class=\"string\">\"FFFFFFffffffff\"</span>,</div><div class=\"line\">            <span class=\"string\">\"Aaaaaaaaaa\"</span>, <span class=\"string\">\"Vvvvvvv\"</span>, <span class=\"string\">\"Bbbb\"</span>, <span class=\"string\">\"Cccc\"</span>, <span class=\"string\">\"Dddd\"</span>, <span class=\"string\">\"Eddeee\"</span>, <span class=\"string\">\"FFFFFFffffffff\"</span>,</div><div class=\"line\">            <span class=\"string\">\"Aaaaaaaaaa\"</span>, <span class=\"string\">\"Vvvvvvv\"</span>, <span class=\"string\">\"Bbbb\"</span>, <span class=\"string\">\"Cccc\"</span>, <span class=\"string\">\"Dddd\"</span>, <span class=\"string\">\"Eddeee\"</span>, <span class=\"string\">\"FFFFFFffffffff\"</span>&#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String[] dst;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> num = <span class=\"number\">5000000</span>;</div><div class=\"line\">        System.out.println(forCopy(num));</div><div class=\"line\">        System.out.println(cloneCopy(num));</div><div class=\"line\">        System.out.println(systemJNICopy(num));</div><div class=\"line\">        System.out.println(ArraysToolCopy(num));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">forCopy</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">long</span> start = System.currentTimeMillis();</div><div class=\"line\">        <span class=\"keyword\">while</span> (num-- &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> size = src.length;</div><div class=\"line\">            dst = <span class=\"keyword\">new</span> String[size];</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</div><div class=\"line\">                dst[i] = src[i];</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">long</span> end = System.currentTimeMillis();</div><div class=\"line\">        <span class=\"keyword\">return</span> end - start;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">cloneCopy</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">long</span> start = System.currentTimeMillis();</div><div class=\"line\">        <span class=\"keyword\">while</span> (num-- &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            dst = src.clone();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">long</span> end = System.currentTimeMillis();</div><div class=\"line\">        <span class=\"keyword\">return</span> end - start;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">systemJNICopy</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">long</span> start = System.currentTimeMillis();</div><div class=\"line\">        <span class=\"keyword\">while</span> (num-- &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            System.arraycopy(src, <span class=\"number\">0</span>, dst, <span class=\"number\">0</span>, src.length);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">long</span> end = System.currentTimeMillis();</div><div class=\"line\">        <span class=\"keyword\">return</span> end - start;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">ArraysToolCopy</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">long</span> start = System.currentTimeMillis();</div><div class=\"line\">        <span class=\"keyword\">while</span> (num-- &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            dst = Arrays.copyOf(src, src.length);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">long</span> end = System.currentTimeMillis();</div><div class=\"line\">        <span class=\"keyword\">return</span> end - start;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"java的八种基本类型的默认值","date":"2017-02-28T10:42:47.000Z","_content":"\n### 参见表格\n基本类型 | 默认值\n---|---\nbyte|\t0\nshort|\t0\nint|\t0\nlong|\t0L\nfloat|\t0.0f\ndouble|\t0.0d\nchar|\t'\\u0000'\nboolean|\tfalse\n\n### 代码\n```java\n/**\n * 实验基本类型的默认值\n */\npublic class Test002 {\n\n    private static byte defaultByte; //如果是final类型的话就必须初始化了，没有默认值\n    private static short defaultShort;\n    private static int defaultInt;\n    private static long defaultLong;\n    private static float defaultFloat;\n    private static double defaultDouble;\n    private static char defaultChar;\n    private static boolean defaultBoolean;\n    private static String str;\n\n    public static void main(String[] args) {\n        System.out.println(defaultByte);\n        System.out.println(defaultShort);\n        System.out.println(defaultInt);\n        System.out.println(defaultLong);\n        System.out.println(defaultFloat);\n        System.out.println(defaultDouble);\n        System.out.println(defaultChar);\n        System.out.println(defaultBoolean);\n        System.out.println(\"输出\" + str);\n    }\n}\n```\n**输出**  \n0  \n0  \n0  \n0  \n0.0  \n0.0  \n \nfalse  \n输出null\n\n### 注意点\n默认值只有成员变量才有，局部变量是没有默认值的。\n\n\n","source":"_posts/java的八种基本类型的默认值.md","raw":"---\ntitle: java的八种基本类型的默认值\ndate: 2017-02-28 18:42:47\ncategories: Java基础\n---\n\n### 参见表格\n基本类型 | 默认值\n---|---\nbyte|\t0\nshort|\t0\nint|\t0\nlong|\t0L\nfloat|\t0.0f\ndouble|\t0.0d\nchar|\t'\\u0000'\nboolean|\tfalse\n\n### 代码\n```java\n/**\n * 实验基本类型的默认值\n */\npublic class Test002 {\n\n    private static byte defaultByte; //如果是final类型的话就必须初始化了，没有默认值\n    private static short defaultShort;\n    private static int defaultInt;\n    private static long defaultLong;\n    private static float defaultFloat;\n    private static double defaultDouble;\n    private static char defaultChar;\n    private static boolean defaultBoolean;\n    private static String str;\n\n    public static void main(String[] args) {\n        System.out.println(defaultByte);\n        System.out.println(defaultShort);\n        System.out.println(defaultInt);\n        System.out.println(defaultLong);\n        System.out.println(defaultFloat);\n        System.out.println(defaultDouble);\n        System.out.println(defaultChar);\n        System.out.println(defaultBoolean);\n        System.out.println(\"输出\" + str);\n    }\n}\n```\n**输出**  \n0  \n0  \n0  \n0  \n0.0  \n0.0  \n \nfalse  \n输出null\n\n### 注意点\n默认值只有成员变量才有，局部变量是没有默认值的。\n\n\n","slug":"java的八种基本类型的默认值","published":1,"updated":"2017-03-01T06:22:41.840Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciztnx1ll000b5k12zqilz2n2","content":"<h3 id=\"参见表格\"><a href=\"#参见表格\" class=\"headerlink\" title=\"参见表格\"></a>参见表格</h3><table>\n<thead>\n<tr>\n<th>基本类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>byte</td>\n<td>0</td>\n</tr>\n<tr>\n<td>short</td>\n<td>0</td>\n</tr>\n<tr>\n<td>int</td>\n<td>0</td>\n</tr>\n<tr>\n<td>long</td>\n<td>0L</td>\n</tr>\n<tr>\n<td>float</td>\n<td>0.0f</td>\n</tr>\n<tr>\n<td>double</td>\n<td>0.0d</td>\n</tr>\n<tr>\n<td>char</td>\n<td>‘\\u0000’</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>false</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 实验基本类型的默认值</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test002</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">byte</span> defaultByte; <span class=\"comment\">//如果是final类型的话就必须初始化了，没有默认值</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">short</span> defaultShort;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> defaultInt;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> defaultLong;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">float</span> defaultFloat;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">double</span> defaultDouble;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">char</span> defaultChar;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> defaultBoolean;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String str;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        System.out.println(defaultByte);</div><div class=\"line\">        System.out.println(defaultShort);</div><div class=\"line\">        System.out.println(defaultInt);</div><div class=\"line\">        System.out.println(defaultLong);</div><div class=\"line\">        System.out.println(defaultFloat);</div><div class=\"line\">        System.out.println(defaultDouble);</div><div class=\"line\">        System.out.println(defaultChar);</div><div class=\"line\">        System.out.println(defaultBoolean);</div><div class=\"line\">        System.out.println(<span class=\"string\">\"输出\"</span> + str);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>输出</strong><br>0<br>0<br>0<br>0<br>0.0<br>0.0  </p>\n<p>false<br>输出null</p>\n<h3 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h3><p>默认值只有成员变量才有，局部变量是没有默认值的。</p>\n","excerpt":"","more":"<h3 id=\"参见表格\"><a href=\"#参见表格\" class=\"headerlink\" title=\"参见表格\"></a>参见表格</h3><table>\n<thead>\n<tr>\n<th>基本类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>byte</td>\n<td>0</td>\n</tr>\n<tr>\n<td>short</td>\n<td>0</td>\n</tr>\n<tr>\n<td>int</td>\n<td>0</td>\n</tr>\n<tr>\n<td>long</td>\n<td>0L</td>\n</tr>\n<tr>\n<td>float</td>\n<td>0.0f</td>\n</tr>\n<tr>\n<td>double</td>\n<td>0.0d</td>\n</tr>\n<tr>\n<td>char</td>\n<td>‘\\u0000’</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>false</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 实验基本类型的默认值</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test002</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">byte</span> defaultByte; <span class=\"comment\">//如果是final类型的话就必须初始化了，没有默认值</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">short</span> defaultShort;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> defaultInt;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> defaultLong;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">float</span> defaultFloat;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">double</span> defaultDouble;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">char</span> defaultChar;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> defaultBoolean;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String str;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        System.out.println(defaultByte);</div><div class=\"line\">        System.out.println(defaultShort);</div><div class=\"line\">        System.out.println(defaultInt);</div><div class=\"line\">        System.out.println(defaultLong);</div><div class=\"line\">        System.out.println(defaultFloat);</div><div class=\"line\">        System.out.println(defaultDouble);</div><div class=\"line\">        System.out.println(defaultChar);</div><div class=\"line\">        System.out.println(defaultBoolean);</div><div class=\"line\">        System.out.println(<span class=\"string\">\"输出\"</span> + str);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>输出</strong><br>0<br>0<br>0<br>0<br>0.0<br>0.0  </p>\n<p>false<br>输出null</p>\n<h3 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h3><p>默认值只有成员变量才有，局部变量是没有默认值的。</p>\n"},{"title":"java的八种基本类型~byte","date":"2017-02-28T10:42:47.000Z","_content":"\n1. byte可表示的位数\n2. byte与int互转\n3. byte的包装类\n4. byte与字节流（TODO）\n\n\n# byte可表示的位数\n\n> \n> ```math\n> -2^7\n> ```\n> \n> ```math\n> \\downarrow\n> ```\n> \n> ```math\n>  2^7-1\n> ```\n\n \n\nbyte在java中是一字节的，而一字节在内存中是8bit，而8bit中，  \n第一位又是符号位，那只有7位可以表示数字，所以\n- byte能表示的最大的正数在内存中是0111 1111，即 127\n- byte能表示的最小的负数在内存中是1000 0000，即-128  \n\n可以用byte的包装类Byte.java的静态常量来查看\n```\npublic class Test01 {\n    public static void main(String[] args) {\n        System.out.println(Byte.MIN_VALUE + \"~\" + Byte.MAX_VALUE);  //输出：-128~127\n        byte b = 128; //error，编译报错\n        byte c = 127; //编译通过\n        byte d = (byte)128; //编译通过\n    }\n}\n```\n  \n# byte与int互转\n- ## byte转int\n好像也没什么需要注意的...\n```\npublic class Test01 {\n    public static void main(String[] args) {\n        /**\n         * int在byte范围内\n         */\n        byte b = 10;\n        System.out.println(b + 10);  //输出： 20\n        int b1 = b;\n        System.out.println(b1);  //输出： 10\n        /**\n         * int不在byte范围内\n         */\n        byte c = 127;\n        System.out.println(c + 10);  //输出： 137\n        int d = c + 10;\n        System.out.println(d);  //输出： 137，与上一句是一样的，java底层是int计算的。\n    }\n}\n```\n\n- ## int转byte\n```\npublic class Test01 {\n    public static void main(String[] args) {\n        int i = 128;\n        byte j = (byte) i;  //不强转编译报错\n        System.out.println(j);  //输出： -128\n        int m = -129;\n        byte n = (byte) m;  //不强转编译报错\n        System.out.println(n);  //输出： 127\n        int a = 127;\n        byte b = (byte) a;  //不强转编译报错\n        System.out.println(b);  //输出： 127\n        byte e = 127;  //这里字面量是int，为什么不用强转呢，jvm做了处理\n        System.out.println(e);  //输出： 127\n        byte c = 127;\n        byte d = 1;\n        byte e = c + d;  //error，编译报错，必须加上强转。因为java计算是通过int的。\n    }\n}\n```\n[TODO:计算一下为什么128变成了-128]\n\n# byte的包装类\nbyte的包装类就是Byte，列举一下常见方法\n\n```\n- toString(byte b)  //静态的，调用了Integer.toString()\n- ByteCache() //不是很懂，也不是静态方法啊\n- parseByte(String s) //超过范围或者不是数字会报：NumberFormatException，调用了Integer.parseInt()\n- valueOf() //把括号里的参数变成Byte对象，超过范围或者不是数字会报：NumberFormatException\n- byteValue() //返回Byte里的byte\n- shortValue() //返回short，代码里加了强转，平时不写是隐式类型转换，jvm实现的。\n- intValue(),longValue() //同上\n- floatValue(),doubleValue() //同上，但是不知道精度是否会丢失【TODO】\n- toString() //源码里调用了Integer.toString，非静态\n- hashCode() //返回这个类的hashCode\n- equals() //直接比byte了，也不用比hashCode了\n- compareTo(Byte anotherByte) //和另外一个Byte比较大小\n- compare(byte x, byte y) //静态方法\n\n```\n\nByteCache可以查看[128的hashCode共享](http://blog.csdn.net/mazhimazh/article/details/17681787)\n\n```\npublic class Test01 {\n    public static void main(String[] args) {\n        System.out.println(Byte.toString((byte) 1));  //1\n        System.out.println(Byte.parseByte(\"129\")); //NumberFormatException：Value out of range. Value:\"129\" Radix:10\n        System.out.println(Byte.parseByte(\"x\")); //NumberFormatException：For input string: \"x\"\n        System.out.println(Byte.parseByte(\"20\")); //20，调用了重写的toString方法\n        System.out.println(Byte.valueOf(\"20\")); //20，与parseByte()的区别是返回类型不同，这个返回Byte\n        System.out.println(Byte.valueOf((byte) 130)); //-126，与parseByte()的区别是返回类型不同，这个返回Byte\n        Byte testByte = new Byte(\"-5\");\n        System.out.println(testByte.shortValue()); //-5\n        System.out.println(testByte.intValue()); //-5\n        System.out.println(testByte.longValue()); //-5\n        System.out.println(testByte.floatValue()); //-5.0\n        System.out.println(testByte.doubleValue()); //-5.0\n    }\n}\n```\n\nByte是final类型的类，也就是不可变的。（其他的基本类型的包装类也都是final类型的）下面的例子可以验证。\n```java\n/**\n * 试验包装类的自增。\n */\npublic class Test001 {\n    private static void add(Byte b) {\n        b = b++;\n    }\n\n    public static void main(String[] args) {\n        Byte a = 127;\n        Byte b = 127;\n        add(++a);\n        System.out.println(a);  //-128，自动拆箱\n        add(b);\n        System.out.println(b);  //127\n    }\n}\n```\n\n\n\n\n\n\n","source":"_posts/java的八种基本类型~byte.md","raw":"---\ntitle: java的八种基本类型~byte\ndate: 2017-02-28 18:42:47\ncategories: Java基础\n---\n\n1. byte可表示的位数\n2. byte与int互转\n3. byte的包装类\n4. byte与字节流（TODO）\n\n\n# byte可表示的位数\n\n> \n> ```math\n> -2^7\n> ```\n> \n> ```math\n> \\downarrow\n> ```\n> \n> ```math\n>  2^7-1\n> ```\n\n \n\nbyte在java中是一字节的，而一字节在内存中是8bit，而8bit中，  \n第一位又是符号位，那只有7位可以表示数字，所以\n- byte能表示的最大的正数在内存中是0111 1111，即 127\n- byte能表示的最小的负数在内存中是1000 0000，即-128  \n\n可以用byte的包装类Byte.java的静态常量来查看\n```\npublic class Test01 {\n    public static void main(String[] args) {\n        System.out.println(Byte.MIN_VALUE + \"~\" + Byte.MAX_VALUE);  //输出：-128~127\n        byte b = 128; //error，编译报错\n        byte c = 127; //编译通过\n        byte d = (byte)128; //编译通过\n    }\n}\n```\n  \n# byte与int互转\n- ## byte转int\n好像也没什么需要注意的...\n```\npublic class Test01 {\n    public static void main(String[] args) {\n        /**\n         * int在byte范围内\n         */\n        byte b = 10;\n        System.out.println(b + 10);  //输出： 20\n        int b1 = b;\n        System.out.println(b1);  //输出： 10\n        /**\n         * int不在byte范围内\n         */\n        byte c = 127;\n        System.out.println(c + 10);  //输出： 137\n        int d = c + 10;\n        System.out.println(d);  //输出： 137，与上一句是一样的，java底层是int计算的。\n    }\n}\n```\n\n- ## int转byte\n```\npublic class Test01 {\n    public static void main(String[] args) {\n        int i = 128;\n        byte j = (byte) i;  //不强转编译报错\n        System.out.println(j);  //输出： -128\n        int m = -129;\n        byte n = (byte) m;  //不强转编译报错\n        System.out.println(n);  //输出： 127\n        int a = 127;\n        byte b = (byte) a;  //不强转编译报错\n        System.out.println(b);  //输出： 127\n        byte e = 127;  //这里字面量是int，为什么不用强转呢，jvm做了处理\n        System.out.println(e);  //输出： 127\n        byte c = 127;\n        byte d = 1;\n        byte e = c + d;  //error，编译报错，必须加上强转。因为java计算是通过int的。\n    }\n}\n```\n[TODO:计算一下为什么128变成了-128]\n\n# byte的包装类\nbyte的包装类就是Byte，列举一下常见方法\n\n```\n- toString(byte b)  //静态的，调用了Integer.toString()\n- ByteCache() //不是很懂，也不是静态方法啊\n- parseByte(String s) //超过范围或者不是数字会报：NumberFormatException，调用了Integer.parseInt()\n- valueOf() //把括号里的参数变成Byte对象，超过范围或者不是数字会报：NumberFormatException\n- byteValue() //返回Byte里的byte\n- shortValue() //返回short，代码里加了强转，平时不写是隐式类型转换，jvm实现的。\n- intValue(),longValue() //同上\n- floatValue(),doubleValue() //同上，但是不知道精度是否会丢失【TODO】\n- toString() //源码里调用了Integer.toString，非静态\n- hashCode() //返回这个类的hashCode\n- equals() //直接比byte了，也不用比hashCode了\n- compareTo(Byte anotherByte) //和另外一个Byte比较大小\n- compare(byte x, byte y) //静态方法\n\n```\n\nByteCache可以查看[128的hashCode共享](http://blog.csdn.net/mazhimazh/article/details/17681787)\n\n```\npublic class Test01 {\n    public static void main(String[] args) {\n        System.out.println(Byte.toString((byte) 1));  //1\n        System.out.println(Byte.parseByte(\"129\")); //NumberFormatException：Value out of range. Value:\"129\" Radix:10\n        System.out.println(Byte.parseByte(\"x\")); //NumberFormatException：For input string: \"x\"\n        System.out.println(Byte.parseByte(\"20\")); //20，调用了重写的toString方法\n        System.out.println(Byte.valueOf(\"20\")); //20，与parseByte()的区别是返回类型不同，这个返回Byte\n        System.out.println(Byte.valueOf((byte) 130)); //-126，与parseByte()的区别是返回类型不同，这个返回Byte\n        Byte testByte = new Byte(\"-5\");\n        System.out.println(testByte.shortValue()); //-5\n        System.out.println(testByte.intValue()); //-5\n        System.out.println(testByte.longValue()); //-5\n        System.out.println(testByte.floatValue()); //-5.0\n        System.out.println(testByte.doubleValue()); //-5.0\n    }\n}\n```\n\nByte是final类型的类，也就是不可变的。（其他的基本类型的包装类也都是final类型的）下面的例子可以验证。\n```java\n/**\n * 试验包装类的自增。\n */\npublic class Test001 {\n    private static void add(Byte b) {\n        b = b++;\n    }\n\n    public static void main(String[] args) {\n        Byte a = 127;\n        Byte b = 127;\n        add(++a);\n        System.out.println(a);  //-128，自动拆箱\n        add(b);\n        System.out.println(b);  //127\n    }\n}\n```\n\n\n\n\n\n\n","slug":"java的八种基本类型~byte","published":1,"updated":"2017-03-01T06:22:30.555Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciztnx1lu000e5k12zadlju5g","content":"<ol>\n<li>byte可表示的位数</li>\n<li>byte与int互转</li>\n<li>byte的包装类</li>\n<li>byte与字节流（TODO）</li>\n</ol>\n<h1 id=\"byte可表示的位数\"><a href=\"#byte可表示的位数\" class=\"headerlink\" title=\"byte可表示的位数\"></a>byte可表示的位数</h1><blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; -2^7</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; \\downarrow</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;  2^7-1</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>byte在java中是一字节的，而一字节在内存中是8bit，而8bit中，<br>第一位又是符号位，那只有7位可以表示数字，所以</p>\n<ul>\n<li>byte能表示的最大的正数在内存中是0111 1111，即 127</li>\n<li>byte能表示的最小的负数在内存中是1000 0000，即-128  </li>\n</ul>\n<p>可以用byte的包装类Byte.java的静态常量来查看<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Test01 &#123;</div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        System.out.println(Byte.MIN_VALUE + &quot;~&quot; + Byte.MAX_VALUE);  //输出：-128~127</div><div class=\"line\">        byte b = 128; //error，编译报错</div><div class=\"line\">        byte c = 127; //编译通过</div><div class=\"line\">        byte d = (byte)128; //编译通过</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"byte与int互转\"><a href=\"#byte与int互转\" class=\"headerlink\" title=\"byte与int互转\"></a>byte与int互转</h1><ul>\n<li><h2 id=\"byte转int\"><a href=\"#byte转int\" class=\"headerlink\" title=\"byte转int\"></a>byte转int</h2><p>好像也没什么需要注意的…</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Test01 &#123;</div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        /**</div><div class=\"line\">         * int在byte范围内</div><div class=\"line\">         */</div><div class=\"line\">        byte b = 10;</div><div class=\"line\">        System.out.println(b + 10);  //输出： 20</div><div class=\"line\">        int b1 = b;</div><div class=\"line\">        System.out.println(b1);  //输出： 10</div><div class=\"line\">        /**</div><div class=\"line\">         * int不在byte范围内</div><div class=\"line\">         */</div><div class=\"line\">        byte c = 127;</div><div class=\"line\">        System.out.println(c + 10);  //输出： 137</div><div class=\"line\">        int d = c + 10;</div><div class=\"line\">        System.out.println(d);  //输出： 137，与上一句是一样的，java底层是int计算的。</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><h2 id=\"int转byte\"><a href=\"#int转byte\" class=\"headerlink\" title=\"int转byte\"></a>int转byte</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Test01 &#123;</div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        int i = 128;</div><div class=\"line\">        byte j = (byte) i;  //不强转编译报错</div><div class=\"line\">        System.out.println(j);  //输出： -128</div><div class=\"line\">        int m = -129;</div><div class=\"line\">        byte n = (byte) m;  //不强转编译报错</div><div class=\"line\">        System.out.println(n);  //输出： 127</div><div class=\"line\">        int a = 127;</div><div class=\"line\">        byte b = (byte) a;  //不强转编译报错</div><div class=\"line\">        System.out.println(b);  //输出： 127</div><div class=\"line\">        byte e = 127;  //这里字面量是int，为什么不用强转呢，jvm做了处理</div><div class=\"line\">        System.out.println(e);  //输出： 127</div><div class=\"line\">        byte c = 127;</div><div class=\"line\">        byte d = 1;</div><div class=\"line\">        byte e = c + d;  //error，编译报错，必须加上强转。因为java计算是通过int的。</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>[TODO:计算一下为什么128变成了-128]</p>\n<h1 id=\"byte的包装类\"><a href=\"#byte的包装类\" class=\"headerlink\" title=\"byte的包装类\"></a>byte的包装类</h1><p>byte的包装类就是Byte，列举一下常见方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">- toString(byte b)  //静态的，调用了Integer.toString()</div><div class=\"line\">- ByteCache() //不是很懂，也不是静态方法啊</div><div class=\"line\">- parseByte(String s) //超过范围或者不是数字会报：NumberFormatException，调用了Integer.parseInt()</div><div class=\"line\">- valueOf() //把括号里的参数变成Byte对象，超过范围或者不是数字会报：NumberFormatException</div><div class=\"line\">- byteValue() //返回Byte里的byte</div><div class=\"line\">- shortValue() //返回short，代码里加了强转，平时不写是隐式类型转换，jvm实现的。</div><div class=\"line\">- intValue(),longValue() //同上</div><div class=\"line\">- floatValue(),doubleValue() //同上，但是不知道精度是否会丢失【TODO】</div><div class=\"line\">- toString() //源码里调用了Integer.toString，非静态</div><div class=\"line\">- hashCode() //返回这个类的hashCode</div><div class=\"line\">- equals() //直接比byte了，也不用比hashCode了</div><div class=\"line\">- compareTo(Byte anotherByte) //和另外一个Byte比较大小</div><div class=\"line\">- compare(byte x, byte y) //静态方法</div></pre></td></tr></table></figure>\n<p>ByteCache可以查看<a href=\"http://blog.csdn.net/mazhimazh/article/details/17681787\" target=\"_blank\" rel=\"external\">128的hashCode共享</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Test01 &#123;</div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        System.out.println(Byte.toString((byte) 1));  //1</div><div class=\"line\">        System.out.println(Byte.parseByte(&quot;129&quot;)); //NumberFormatException：Value out of range. Value:&quot;129&quot; Radix:10</div><div class=\"line\">        System.out.println(Byte.parseByte(&quot;x&quot;)); //NumberFormatException：For input string: &quot;x&quot;</div><div class=\"line\">        System.out.println(Byte.parseByte(&quot;20&quot;)); //20，调用了重写的toString方法</div><div class=\"line\">        System.out.println(Byte.valueOf(&quot;20&quot;)); //20，与parseByte()的区别是返回类型不同，这个返回Byte</div><div class=\"line\">        System.out.println(Byte.valueOf((byte) 130)); //-126，与parseByte()的区别是返回类型不同，这个返回Byte</div><div class=\"line\">        Byte testByte = new Byte(&quot;-5&quot;);</div><div class=\"line\">        System.out.println(testByte.shortValue()); //-5</div><div class=\"line\">        System.out.println(testByte.intValue()); //-5</div><div class=\"line\">        System.out.println(testByte.longValue()); //-5</div><div class=\"line\">        System.out.println(testByte.floatValue()); //-5.0</div><div class=\"line\">        System.out.println(testByte.doubleValue()); //-5.0</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Byte是final类型的类，也就是不可变的。（其他的基本类型的包装类也都是final类型的）下面的例子可以验证。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 试验包装类的自增。</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test001</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(Byte b)</span> </span>&#123;</div><div class=\"line\">        b = b++;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        Byte a = <span class=\"number\">127</span>;</div><div class=\"line\">        Byte b = <span class=\"number\">127</span>;</div><div class=\"line\">        add(++a);</div><div class=\"line\">        System.out.println(a);  <span class=\"comment\">//-128，自动拆箱</span></div><div class=\"line\">        add(b);</div><div class=\"line\">        System.out.println(b);  <span class=\"comment\">//127</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<ol>\n<li>byte可表示的位数</li>\n<li>byte与int互转</li>\n<li>byte的包装类</li>\n<li>byte与字节流（TODO）</li>\n</ol>\n<h1 id=\"byte可表示的位数\"><a href=\"#byte可表示的位数\" class=\"headerlink\" title=\"byte可表示的位数\"></a>byte可表示的位数</h1><blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; -2^7</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; \\downarrow</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;  2^7-1</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>byte在java中是一字节的，而一字节在内存中是8bit，而8bit中，<br>第一位又是符号位，那只有7位可以表示数字，所以</p>\n<ul>\n<li>byte能表示的最大的正数在内存中是0111 1111，即 127</li>\n<li>byte能表示的最小的负数在内存中是1000 0000，即-128  </li>\n</ul>\n<p>可以用byte的包装类Byte.java的静态常量来查看<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Test01 &#123;</div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        System.out.println(Byte.MIN_VALUE + &quot;~&quot; + Byte.MAX_VALUE);  //输出：-128~127</div><div class=\"line\">        byte b = 128; //error，编译报错</div><div class=\"line\">        byte c = 127; //编译通过</div><div class=\"line\">        byte d = (byte)128; //编译通过</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"byte与int互转\"><a href=\"#byte与int互转\" class=\"headerlink\" title=\"byte与int互转\"></a>byte与int互转</h1><ul>\n<li><h2 id=\"byte转int\"><a href=\"#byte转int\" class=\"headerlink\" title=\"byte转int\"></a>byte转int</h2><p>好像也没什么需要注意的…</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Test01 &#123;</div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        /**</div><div class=\"line\">         * int在byte范围内</div><div class=\"line\">         */</div><div class=\"line\">        byte b = 10;</div><div class=\"line\">        System.out.println(b + 10);  //输出： 20</div><div class=\"line\">        int b1 = b;</div><div class=\"line\">        System.out.println(b1);  //输出： 10</div><div class=\"line\">        /**</div><div class=\"line\">         * int不在byte范围内</div><div class=\"line\">         */</div><div class=\"line\">        byte c = 127;</div><div class=\"line\">        System.out.println(c + 10);  //输出： 137</div><div class=\"line\">        int d = c + 10;</div><div class=\"line\">        System.out.println(d);  //输出： 137，与上一句是一样的，java底层是int计算的。</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><h2 id=\"int转byte\"><a href=\"#int转byte\" class=\"headerlink\" title=\"int转byte\"></a>int转byte</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Test01 &#123;</div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        int i = 128;</div><div class=\"line\">        byte j = (byte) i;  //不强转编译报错</div><div class=\"line\">        System.out.println(j);  //输出： -128</div><div class=\"line\">        int m = -129;</div><div class=\"line\">        byte n = (byte) m;  //不强转编译报错</div><div class=\"line\">        System.out.println(n);  //输出： 127</div><div class=\"line\">        int a = 127;</div><div class=\"line\">        byte b = (byte) a;  //不强转编译报错</div><div class=\"line\">        System.out.println(b);  //输出： 127</div><div class=\"line\">        byte e = 127;  //这里字面量是int，为什么不用强转呢，jvm做了处理</div><div class=\"line\">        System.out.println(e);  //输出： 127</div><div class=\"line\">        byte c = 127;</div><div class=\"line\">        byte d = 1;</div><div class=\"line\">        byte e = c + d;  //error，编译报错，必须加上强转。因为java计算是通过int的。</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>[TODO:计算一下为什么128变成了-128]</p>\n<h1 id=\"byte的包装类\"><a href=\"#byte的包装类\" class=\"headerlink\" title=\"byte的包装类\"></a>byte的包装类</h1><p>byte的包装类就是Byte，列举一下常见方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">- toString(byte b)  //静态的，调用了Integer.toString()</div><div class=\"line\">- ByteCache() //不是很懂，也不是静态方法啊</div><div class=\"line\">- parseByte(String s) //超过范围或者不是数字会报：NumberFormatException，调用了Integer.parseInt()</div><div class=\"line\">- valueOf() //把括号里的参数变成Byte对象，超过范围或者不是数字会报：NumberFormatException</div><div class=\"line\">- byteValue() //返回Byte里的byte</div><div class=\"line\">- shortValue() //返回short，代码里加了强转，平时不写是隐式类型转换，jvm实现的。</div><div class=\"line\">- intValue(),longValue() //同上</div><div class=\"line\">- floatValue(),doubleValue() //同上，但是不知道精度是否会丢失【TODO】</div><div class=\"line\">- toString() //源码里调用了Integer.toString，非静态</div><div class=\"line\">- hashCode() //返回这个类的hashCode</div><div class=\"line\">- equals() //直接比byte了，也不用比hashCode了</div><div class=\"line\">- compareTo(Byte anotherByte) //和另外一个Byte比较大小</div><div class=\"line\">- compare(byte x, byte y) //静态方法</div></pre></td></tr></table></figure>\n<p>ByteCache可以查看<a href=\"http://blog.csdn.net/mazhimazh/article/details/17681787\">128的hashCode共享</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Test01 &#123;</div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        System.out.println(Byte.toString((byte) 1));  //1</div><div class=\"line\">        System.out.println(Byte.parseByte(&quot;129&quot;)); //NumberFormatException：Value out of range. Value:&quot;129&quot; Radix:10</div><div class=\"line\">        System.out.println(Byte.parseByte(&quot;x&quot;)); //NumberFormatException：For input string: &quot;x&quot;</div><div class=\"line\">        System.out.println(Byte.parseByte(&quot;20&quot;)); //20，调用了重写的toString方法</div><div class=\"line\">        System.out.println(Byte.valueOf(&quot;20&quot;)); //20，与parseByte()的区别是返回类型不同，这个返回Byte</div><div class=\"line\">        System.out.println(Byte.valueOf((byte) 130)); //-126，与parseByte()的区别是返回类型不同，这个返回Byte</div><div class=\"line\">        Byte testByte = new Byte(&quot;-5&quot;);</div><div class=\"line\">        System.out.println(testByte.shortValue()); //-5</div><div class=\"line\">        System.out.println(testByte.intValue()); //-5</div><div class=\"line\">        System.out.println(testByte.longValue()); //-5</div><div class=\"line\">        System.out.println(testByte.floatValue()); //-5.0</div><div class=\"line\">        System.out.println(testByte.doubleValue()); //-5.0</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Byte是final类型的类，也就是不可变的。（其他的基本类型的包装类也都是final类型的）下面的例子可以验证。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 试验包装类的自增。</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test001</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(Byte b)</span> </span>&#123;</div><div class=\"line\">        b = b++;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        Byte a = <span class=\"number\">127</span>;</div><div class=\"line\">        Byte b = <span class=\"number\">127</span>;</div><div class=\"line\">        add(++a);</div><div class=\"line\">        System.out.println(a);  <span class=\"comment\">//-128，自动拆箱</span></div><div class=\"line\">        add(b);</div><div class=\"line\">        System.out.println(b);  <span class=\"comment\">//127</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n"},{"title":"switch的用法","date":"2017-02-28T10:42:47.000Z","_content":"\n## 前言\nswitch-case语句完全可以与if-else语句互转，但通常来说，switch-case语句执行效率要高。\n\ndefault在当前switch找不到匹配的case时执行。default并不是必须的。\n\n一旦case匹配，就会顺序执行后面的程序代码，而不管后面的case是否匹配，直到遇见break。（所以这里有坑要避免）\n\n# switch支持的类型\njava7的switch支持一下几种类型\n\n类型 |\n---|---\nchar | \nCharacter | \nbyte |\nByte |\nint |\nInteger |\nshort |\nShort |\nString(java7) |\nenum(java5) |\n\n# 代码实例\n### default的使用\ndefault在当前switch找不到匹配的case时执行。default并不是必须的。default并不一定要写在最后，但是好怪。。\n```java\npublic class Test004 {\n    public static void main(String[] args) {\n        int i = 4;\n        switch (i){\n            case 1:      //这个值要和括号里变量的类型一样，不然编译报错\n                System.out.print(1);\n                break;\n            default:\n                System.out.print(0);\n            case 5:\n                System.out.print(5);\n        }\n    }\n}\n```\n**输出结果:** 05  \n因为default后面没有break，所以会执行case5。如前言里所说。\n\n### switch使用枚举\n```java\npublic class Test005 {\n\n    static enum E {\n        A, B, C, D\n    }\n\n    public static void main(String[] args) {\n        E e = E.B;    //注意不要写成Enum e = E.b; 否则case那句会编译报错\n        switch (e) {\n            case A:\n                System.out.println(1);\n                break;\n            default:\n                System.out.println(0);\n        }\n    }\n\n}\n```\n\n### 忘记写break的陷阱\n```java\npublic class Test007 {\n    public static void main(String[] args) {\n        int i = 2;\n        switch (i){\n            case 1:\n                System.out.print(1);\n            case 2:\n                System.out.print(2);\n            case 3:\n                System.out.print(3);\n            default:\n                System.out.print(0);\n        }\n    }\n}\n```\n**输出结果:** 230  ","source":"_posts/switch的用法.md","raw":"---\ntitle: switch的用法\ndate: 2017-02-28 18:42:47\ncategories: Java基础\n---\n\n## 前言\nswitch-case语句完全可以与if-else语句互转，但通常来说，switch-case语句执行效率要高。\n\ndefault在当前switch找不到匹配的case时执行。default并不是必须的。\n\n一旦case匹配，就会顺序执行后面的程序代码，而不管后面的case是否匹配，直到遇见break。（所以这里有坑要避免）\n\n# switch支持的类型\njava7的switch支持一下几种类型\n\n类型 |\n---|---\nchar | \nCharacter | \nbyte |\nByte |\nint |\nInteger |\nshort |\nShort |\nString(java7) |\nenum(java5) |\n\n# 代码实例\n### default的使用\ndefault在当前switch找不到匹配的case时执行。default并不是必须的。default并不一定要写在最后，但是好怪。。\n```java\npublic class Test004 {\n    public static void main(String[] args) {\n        int i = 4;\n        switch (i){\n            case 1:      //这个值要和括号里变量的类型一样，不然编译报错\n                System.out.print(1);\n                break;\n            default:\n                System.out.print(0);\n            case 5:\n                System.out.print(5);\n        }\n    }\n}\n```\n**输出结果:** 05  \n因为default后面没有break，所以会执行case5。如前言里所说。\n\n### switch使用枚举\n```java\npublic class Test005 {\n\n    static enum E {\n        A, B, C, D\n    }\n\n    public static void main(String[] args) {\n        E e = E.B;    //注意不要写成Enum e = E.b; 否则case那句会编译报错\n        switch (e) {\n            case A:\n                System.out.println(1);\n                break;\n            default:\n                System.out.println(0);\n        }\n    }\n\n}\n```\n\n### 忘记写break的陷阱\n```java\npublic class Test007 {\n    public static void main(String[] args) {\n        int i = 2;\n        switch (i){\n            case 1:\n                System.out.print(1);\n            case 2:\n                System.out.print(2);\n            case 3:\n                System.out.print(3);\n            default:\n                System.out.print(0);\n        }\n    }\n}\n```\n**输出结果:** 230  ","slug":"switch的用法","published":1,"updated":"2017-03-01T06:23:07.677Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciztnx1uk000m5k12o8tkmxje","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>switch-case语句完全可以与if-else语句互转，但通常来说，switch-case语句执行效率要高。</p>\n<p>default在当前switch找不到匹配的case时执行。default并不是必须的。</p>\n<p>一旦case匹配，就会顺序执行后面的程序代码，而不管后面的case是否匹配，直到遇见break。（所以这里有坑要避免）</p>\n<h1 id=\"switch支持的类型\"><a href=\"#switch支持的类型\" class=\"headerlink\" title=\"switch支持的类型\"></a>switch支持的类型</h1><p>java7的switch支持一下几种类型</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>char</td>\n<td></td>\n</tr>\n<tr>\n<td>Character</td>\n<td></td>\n</tr>\n<tr>\n<td>byte</td>\n<td></td>\n</tr>\n<tr>\n<td>Byte</td>\n<td></td>\n</tr>\n<tr>\n<td>int</td>\n<td></td>\n</tr>\n<tr>\n<td>Integer</td>\n<td></td>\n</tr>\n<tr>\n<td>short</td>\n<td></td>\n</tr>\n<tr>\n<td>Short</td>\n<td></td>\n</tr>\n<tr>\n<td>String(java7)</td>\n<td></td>\n</tr>\n<tr>\n<td>enum(java5)</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"代码实例\"><a href=\"#代码实例\" class=\"headerlink\" title=\"代码实例\"></a>代码实例</h1><h3 id=\"default的使用\"><a href=\"#default的使用\" class=\"headerlink\" title=\"default的使用\"></a>default的使用</h3><p>default在当前switch找不到匹配的case时执行。default并不是必须的。default并不一定要写在最后，但是好怪。。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test004</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"number\">4</span>;</div><div class=\"line\">        <span class=\"keyword\">switch</span> (i)&#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">1</span>:      <span class=\"comment\">//这个值要和括号里变量的类型一样，不然编译报错</span></div><div class=\"line\">                System.out.print(<span class=\"number\">1</span>);</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">default</span>:</div><div class=\"line\">                System.out.print(<span class=\"number\">0</span>);</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">5</span>:</div><div class=\"line\">                System.out.print(<span class=\"number\">5</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>输出结果:</strong> 05<br>因为default后面没有break，所以会执行case5。如前言里所说。</p>\n<h3 id=\"switch使用枚举\"><a href=\"#switch使用枚举\" class=\"headerlink\" title=\"switch使用枚举\"></a>switch使用枚举</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test005</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">enum</span> E &#123;</div><div class=\"line\">        A, B, C, D</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        E e = E.B;    <span class=\"comment\">//注意不要写成Enum e = E.b; 否则case那句会编译报错</span></div><div class=\"line\">        <span class=\"keyword\">switch</span> (e) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> A:</div><div class=\"line\">                System.out.println(<span class=\"number\">1</span>);</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">default</span>:</div><div class=\"line\">                System.out.println(<span class=\"number\">0</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"忘记写break的陷阱\"><a href=\"#忘记写break的陷阱\" class=\"headerlink\" title=\"忘记写break的陷阱\"></a>忘记写break的陷阱</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test007</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"number\">2</span>;</div><div class=\"line\">        <span class=\"keyword\">switch</span> (i)&#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</div><div class=\"line\">                System.out.print(<span class=\"number\">1</span>);</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</div><div class=\"line\">                System.out.print(<span class=\"number\">2</span>);</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</div><div class=\"line\">                System.out.print(<span class=\"number\">3</span>);</div><div class=\"line\">            <span class=\"keyword\">default</span>:</div><div class=\"line\">                System.out.print(<span class=\"number\">0</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>输出结果:</strong> 230  </p>\n","excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>switch-case语句完全可以与if-else语句互转，但通常来说，switch-case语句执行效率要高。</p>\n<p>default在当前switch找不到匹配的case时执行。default并不是必须的。</p>\n<p>一旦case匹配，就会顺序执行后面的程序代码，而不管后面的case是否匹配，直到遇见break。（所以这里有坑要避免）</p>\n<h1 id=\"switch支持的类型\"><a href=\"#switch支持的类型\" class=\"headerlink\" title=\"switch支持的类型\"></a>switch支持的类型</h1><p>java7的switch支持一下几种类型</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>char</td>\n<td></td>\n</tr>\n<tr>\n<td>Character</td>\n<td></td>\n</tr>\n<tr>\n<td>byte</td>\n<td></td>\n</tr>\n<tr>\n<td>Byte</td>\n<td></td>\n</tr>\n<tr>\n<td>int</td>\n<td></td>\n</tr>\n<tr>\n<td>Integer</td>\n<td></td>\n</tr>\n<tr>\n<td>short</td>\n<td></td>\n</tr>\n<tr>\n<td>Short</td>\n<td></td>\n</tr>\n<tr>\n<td>String(java7)</td>\n<td></td>\n</tr>\n<tr>\n<td>enum(java5)</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"代码实例\"><a href=\"#代码实例\" class=\"headerlink\" title=\"代码实例\"></a>代码实例</h1><h3 id=\"default的使用\"><a href=\"#default的使用\" class=\"headerlink\" title=\"default的使用\"></a>default的使用</h3><p>default在当前switch找不到匹配的case时执行。default并不是必须的。default并不一定要写在最后，但是好怪。。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test004</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"number\">4</span>;</div><div class=\"line\">        <span class=\"keyword\">switch</span> (i)&#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">1</span>:      <span class=\"comment\">//这个值要和括号里变量的类型一样，不然编译报错</span></div><div class=\"line\">                System.out.print(<span class=\"number\">1</span>);</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">default</span>:</div><div class=\"line\">                System.out.print(<span class=\"number\">0</span>);</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">5</span>:</div><div class=\"line\">                System.out.print(<span class=\"number\">5</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>输出结果:</strong> 05<br>因为default后面没有break，所以会执行case5。如前言里所说。</p>\n<h3 id=\"switch使用枚举\"><a href=\"#switch使用枚举\" class=\"headerlink\" title=\"switch使用枚举\"></a>switch使用枚举</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test005</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">enum</span> E &#123;</div><div class=\"line\">        A, B, C, D</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        E e = E.B;    <span class=\"comment\">//注意不要写成Enum e = E.b; 否则case那句会编译报错</span></div><div class=\"line\">        <span class=\"keyword\">switch</span> (e) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> A:</div><div class=\"line\">                System.out.println(<span class=\"number\">1</span>);</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">default</span>:</div><div class=\"line\">                System.out.println(<span class=\"number\">0</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"忘记写break的陷阱\"><a href=\"#忘记写break的陷阱\" class=\"headerlink\" title=\"忘记写break的陷阱\"></a>忘记写break的陷阱</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test007</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"number\">2</span>;</div><div class=\"line\">        <span class=\"keyword\">switch</span> (i)&#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</div><div class=\"line\">                System.out.print(<span class=\"number\">1</span>);</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</div><div class=\"line\">                System.out.print(<span class=\"number\">2</span>);</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</div><div class=\"line\">                System.out.print(<span class=\"number\">3</span>);</div><div class=\"line\">            <span class=\"keyword\">default</span>:</div><div class=\"line\">                System.out.print(<span class=\"number\">0</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>输出结果:</strong> 230  </p>\n"},{"title":"浅谈AOP","date":"2017-03-03T03:34:47.000Z","_content":"AOP（Aspect-Oriented Programming，面向切面编程）是一种编程的思想。是对OOP的补充和完善。OOP擅长纵向的编程，对横向编程无力，因为会产生大量重复代码。而AOP的横向编程能力正好弥补了这一缺陷。\n\n# java实现AOP\n\n## 1. 过滤器\n也就是Filter，技术基于java的回调机制。设计的模式使用的责任链模式。\n## 2. 拦截器\n技术基于java的反射。设计的模式使用的代理模式。\n\n可以是动态代理，也可以是静态代理。\n\n因为使用了代理模式，所以可以在拦截前做一些事，在拦截后再做一些事。\n\n## 过滤器和拦截器的区别\n1. 过滤器基于回调，拦截器基于反射。\n2. 过滤器依赖servler容器，拦截器不依赖servler容器。\n3. 过滤器几乎可以对任何请求起作用，拦截器只能对action请求起作用。\n4. 拦截器可以访问action上下文、值栈里的对象，过滤器不能。\n5. 在action生命周期中，拦截器可以多次被调用，而过滤器只能在容器初始化时被调用一次。\n\n看了这几点可能有疑惑，看下书上是怎么写的吧\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-3-3/4150228-file_1488522027418_33ad.png)\n## 执行顺序\n一个action请求进来。\n\n过滤前-->拦截前-->action处理-->拦截后-->过滤后\n\n\n# Spring实现AOP\n\n## 1. aop\n不要被Spring的aop给迷惑了，aop是种编程思想，而Spring的aop只是这种思想的具体实现。使用的也是代理模式。可以选择通过JDKProxy或cglib来代理。","source":"_posts/浅谈AOP.md","raw":"---\ntitle: 浅谈AOP\ndate: 2017-03-03 11:34:47\ncategories: Spring\n---\nAOP（Aspect-Oriented Programming，面向切面编程）是一种编程的思想。是对OOP的补充和完善。OOP擅长纵向的编程，对横向编程无力，因为会产生大量重复代码。而AOP的横向编程能力正好弥补了这一缺陷。\n\n# java实现AOP\n\n## 1. 过滤器\n也就是Filter，技术基于java的回调机制。设计的模式使用的责任链模式。\n## 2. 拦截器\n技术基于java的反射。设计的模式使用的代理模式。\n\n可以是动态代理，也可以是静态代理。\n\n因为使用了代理模式，所以可以在拦截前做一些事，在拦截后再做一些事。\n\n## 过滤器和拦截器的区别\n1. 过滤器基于回调，拦截器基于反射。\n2. 过滤器依赖servler容器，拦截器不依赖servler容器。\n3. 过滤器几乎可以对任何请求起作用，拦截器只能对action请求起作用。\n4. 拦截器可以访问action上下文、值栈里的对象，过滤器不能。\n5. 在action生命周期中，拦截器可以多次被调用，而过滤器只能在容器初始化时被调用一次。\n\n看了这几点可能有疑惑，看下书上是怎么写的吧\n![image](http://ok7wlv1ee.bkt.clouddn.com/17-3-3/4150228-file_1488522027418_33ad.png)\n## 执行顺序\n一个action请求进来。\n\n过滤前-->拦截前-->action处理-->拦截后-->过滤后\n\n\n# Spring实现AOP\n\n## 1. aop\n不要被Spring的aop给迷惑了，aop是种编程思想，而Spring的aop只是这种思想的具体实现。使用的也是代理模式。可以选择通过JDKProxy或cglib来代理。","slug":"浅谈AOP","published":1,"updated":"2017-03-03T06:21:39.052Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciztnx1uq000o5k12uxhnvncs","content":"<p>AOP（Aspect-Oriented Programming，面向切面编程）是一种编程的思想。是对OOP的补充和完善。OOP擅长纵向的编程，对横向编程无力，因为会产生大量重复代码。而AOP的横向编程能力正好弥补了这一缺陷。</p>\n<h1 id=\"java实现AOP\"><a href=\"#java实现AOP\" class=\"headerlink\" title=\"java实现AOP\"></a>java实现AOP</h1><h2 id=\"1-过滤器\"><a href=\"#1-过滤器\" class=\"headerlink\" title=\"1. 过滤器\"></a>1. 过滤器</h2><p>也就是Filter，技术基于java的回调机制。设计的模式使用的责任链模式。</p>\n<h2 id=\"2-拦截器\"><a href=\"#2-拦截器\" class=\"headerlink\" title=\"2. 拦截器\"></a>2. 拦截器</h2><p>技术基于java的反射。设计的模式使用的代理模式。</p>\n<p>可以是动态代理，也可以是静态代理。</p>\n<p>因为使用了代理模式，所以可以在拦截前做一些事，在拦截后再做一些事。</p>\n<h2 id=\"过滤器和拦截器的区别\"><a href=\"#过滤器和拦截器的区别\" class=\"headerlink\" title=\"过滤器和拦截器的区别\"></a>过滤器和拦截器的区别</h2><ol>\n<li>过滤器基于回调，拦截器基于反射。</li>\n<li>过滤器依赖servler容器，拦截器不依赖servler容器。</li>\n<li>过滤器几乎可以对任何请求起作用，拦截器只能对action请求起作用。</li>\n<li>拦截器可以访问action上下文、值栈里的对象，过滤器不能。</li>\n<li>在action生命周期中，拦截器可以多次被调用，而过滤器只能在容器初始化时被调用一次。</li>\n</ol>\n<p>看了这几点可能有疑惑，看下书上是怎么写的吧<br><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-3-3/4150228-file_1488522027418_33ad.png\" alt=\"image\"></p>\n<h2 id=\"执行顺序\"><a href=\"#执行顺序\" class=\"headerlink\" title=\"执行顺序\"></a>执行顺序</h2><p>一个action请求进来。</p>\n<p>过滤前–&gt;拦截前–&gt;action处理–&gt;拦截后–&gt;过滤后</p>\n<h1 id=\"Spring实现AOP\"><a href=\"#Spring实现AOP\" class=\"headerlink\" title=\"Spring实现AOP\"></a>Spring实现AOP</h1><h2 id=\"1-aop\"><a href=\"#1-aop\" class=\"headerlink\" title=\"1. aop\"></a>1. aop</h2><p>不要被Spring的aop给迷惑了，aop是种编程思想，而Spring的aop只是这种思想的具体实现。使用的也是代理模式。可以选择通过JDKProxy或cglib来代理。</p>\n","excerpt":"","more":"<p>AOP（Aspect-Oriented Programming，面向切面编程）是一种编程的思想。是对OOP的补充和完善。OOP擅长纵向的编程，对横向编程无力，因为会产生大量重复代码。而AOP的横向编程能力正好弥补了这一缺陷。</p>\n<h1 id=\"java实现AOP\"><a href=\"#java实现AOP\" class=\"headerlink\" title=\"java实现AOP\"></a>java实现AOP</h1><h2 id=\"1-过滤器\"><a href=\"#1-过滤器\" class=\"headerlink\" title=\"1. 过滤器\"></a>1. 过滤器</h2><p>也就是Filter，技术基于java的回调机制。设计的模式使用的责任链模式。</p>\n<h2 id=\"2-拦截器\"><a href=\"#2-拦截器\" class=\"headerlink\" title=\"2. 拦截器\"></a>2. 拦截器</h2><p>技术基于java的反射。设计的模式使用的代理模式。</p>\n<p>可以是动态代理，也可以是静态代理。</p>\n<p>因为使用了代理模式，所以可以在拦截前做一些事，在拦截后再做一些事。</p>\n<h2 id=\"过滤器和拦截器的区别\"><a href=\"#过滤器和拦截器的区别\" class=\"headerlink\" title=\"过滤器和拦截器的区别\"></a>过滤器和拦截器的区别</h2><ol>\n<li>过滤器基于回调，拦截器基于反射。</li>\n<li>过滤器依赖servler容器，拦截器不依赖servler容器。</li>\n<li>过滤器几乎可以对任何请求起作用，拦截器只能对action请求起作用。</li>\n<li>拦截器可以访问action上下文、值栈里的对象，过滤器不能。</li>\n<li>在action生命周期中，拦截器可以多次被调用，而过滤器只能在容器初始化时被调用一次。</li>\n</ol>\n<p>看了这几点可能有疑惑，看下书上是怎么写的吧<br><img src=\"http://ok7wlv1ee.bkt.clouddn.com/17-3-3/4150228-file_1488522027418_33ad.png\" alt=\"image\"></p>\n<h2 id=\"执行顺序\"><a href=\"#执行顺序\" class=\"headerlink\" title=\"执行顺序\"></a>执行顺序</h2><p>一个action请求进来。</p>\n<p>过滤前–&gt;拦截前–&gt;action处理–&gt;拦截后–&gt;过滤后</p>\n<h1 id=\"Spring实现AOP\"><a href=\"#Spring实现AOP\" class=\"headerlink\" title=\"Spring实现AOP\"></a>Spring实现AOP</h1><h2 id=\"1-aop\"><a href=\"#1-aop\" class=\"headerlink\" title=\"1. aop\"></a>1. aop</h2><p>不要被Spring的aop给迷惑了，aop是种编程思想，而Spring的aop只是这种思想的具体实现。使用的也是代理模式。可以选择通过JDKProxy或cglib来代理。</p>\n"},{"title":"通过js实现导入导出txt格式","date":"2017-02-28T06:42:47.000Z","_content":"\n项目中有一个需求是要导出页面上的配置，然后又不想走后台来实现。google之~\n\n# 导出\n使用FileSaver.min.js\n\n[FileSaver.min.js的github地址](https://github.com/eligrey/FileSaver.js)\n\n示例（项目用的是AngularJs）:\n```js\nPatientVisitModel.prototype.downloadConfig = function () {\n\n    var saveText = {};\n    saveText.currentType = this.currentType;\n    saveText.currentConfig = this.uiConfigs;\n\n    var blob = new Blob([JSON.stringify(saveText)], {type: \"text/plain;charset=utf-8\"});\n    saveAs(blob, \"hello world.txt\");\n\n};\n```\n\n# 导入\n使用HTML5.JS的FileReader对象\n```js\nPatientVisitModel.prototype.uploadConfig = function (myFile) {\n\n    var self = this;\n\n    var file = myFile.files[0];\n    var reader = new FileReader();\n    //将文件以文本形式读入页面\n    reader.readAsText(file);\n    reader.onload = function()\n    {\n        var resultText = JSON.parse(this.result);\n        self.uiConfigs = resultText.currentConfig;\n        self.currentType = resultText.currentType;\n    };\n};\n```\n\nhtml页面上的写法\n```html\n<input type=\"file\" id=\"file-input\" onchange=\"angular.element(this).scope().patientVisitModel.uploadConfig(this)\" >\n```","source":"_posts/通过js实现导入导出txt格式.md","raw":"---\ntitle: 通过js实现导入导出txt格式\ndate: 2017-02-28 14:42:47\ncategories: JavaScript\n---\n\n项目中有一个需求是要导出页面上的配置，然后又不想走后台来实现。google之~\n\n# 导出\n使用FileSaver.min.js\n\n[FileSaver.min.js的github地址](https://github.com/eligrey/FileSaver.js)\n\n示例（项目用的是AngularJs）:\n```js\nPatientVisitModel.prototype.downloadConfig = function () {\n\n    var saveText = {};\n    saveText.currentType = this.currentType;\n    saveText.currentConfig = this.uiConfigs;\n\n    var blob = new Blob([JSON.stringify(saveText)], {type: \"text/plain;charset=utf-8\"});\n    saveAs(blob, \"hello world.txt\");\n\n};\n```\n\n# 导入\n使用HTML5.JS的FileReader对象\n```js\nPatientVisitModel.prototype.uploadConfig = function (myFile) {\n\n    var self = this;\n\n    var file = myFile.files[0];\n    var reader = new FileReader();\n    //将文件以文本形式读入页面\n    reader.readAsText(file);\n    reader.onload = function()\n    {\n        var resultText = JSON.parse(this.result);\n        self.uiConfigs = resultText.currentConfig;\n        self.currentType = resultText.currentType;\n    };\n};\n```\n\nhtml页面上的写法\n```html\n<input type=\"file\" id=\"file-input\" onchange=\"angular.element(this).scope().patientVisitModel.uploadConfig(this)\" >\n```","slug":"通过js实现导入导出txt格式","published":1,"updated":"2017-02-28T06:43:09.378Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciztnx1uv000p5k12rmwybqp1","content":"<p>项目中有一个需求是要导出页面上的配置，然后又不想走后台来实现。google之~</p>\n<h1 id=\"导出\"><a href=\"#导出\" class=\"headerlink\" title=\"导出\"></a>导出</h1><p>使用FileSaver.min.js</p>\n<p><a href=\"https://github.com/eligrey/FileSaver.js\" target=\"_blank\" rel=\"external\">FileSaver.min.js的github地址</a></p>\n<p>示例（项目用的是AngularJs）:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">PatientVisitModel.prototype.downloadConfig = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> saveText = &#123;&#125;;</div><div class=\"line\">    saveText.currentType = <span class=\"keyword\">this</span>.currentType;</div><div class=\"line\">    saveText.currentConfig = <span class=\"keyword\">this</span>.uiConfigs;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> blob = <span class=\"keyword\">new</span> Blob([<span class=\"built_in\">JSON</span>.stringify(saveText)], &#123;<span class=\"attr\">type</span>: <span class=\"string\">\"text/plain;charset=utf-8\"</span>&#125;);</div><div class=\"line\">    saveAs(blob, <span class=\"string\">\"hello world.txt\"</span>);</div><div class=\"line\"></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<h1 id=\"导入\"><a href=\"#导入\" class=\"headerlink\" title=\"导入\"></a>导入</h1><p>使用HTML5.JS的FileReader对象<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">PatientVisitModel.prototype.uploadConfig = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">myFile</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> file = myFile.files[<span class=\"number\">0</span>];</div><div class=\"line\">    <span class=\"keyword\">var</span> reader = <span class=\"keyword\">new</span> FileReader();</div><div class=\"line\">    <span class=\"comment\">//将文件以文本形式读入页面</span></div><div class=\"line\">    reader.readAsText(file);</div><div class=\"line\">    reader.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> resultText = <span class=\"built_in\">JSON</span>.parse(<span class=\"keyword\">this</span>.result);</div><div class=\"line\">        self.uiConfigs = resultText.currentConfig;</div><div class=\"line\">        self.currentType = resultText.currentType;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>html页面上的写法<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"file-input\"</span> <span class=\"attr\">onchange</span>=<span class=\"string\">\"angular.element(this).scope().patientVisitModel.uploadConfig(this)\"</span> &gt;</span></div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p>项目中有一个需求是要导出页面上的配置，然后又不想走后台来实现。google之~</p>\n<h1 id=\"导出\"><a href=\"#导出\" class=\"headerlink\" title=\"导出\"></a>导出</h1><p>使用FileSaver.min.js</p>\n<p><a href=\"https://github.com/eligrey/FileSaver.js\">FileSaver.min.js的github地址</a></p>\n<p>示例（项目用的是AngularJs）:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">PatientVisitModel.prototype.downloadConfig = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> saveText = &#123;&#125;;</div><div class=\"line\">    saveText.currentType = <span class=\"keyword\">this</span>.currentType;</div><div class=\"line\">    saveText.currentConfig = <span class=\"keyword\">this</span>.uiConfigs;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> blob = <span class=\"keyword\">new</span> Blob([<span class=\"built_in\">JSON</span>.stringify(saveText)], &#123;<span class=\"attr\">type</span>: <span class=\"string\">\"text/plain;charset=utf-8\"</span>&#125;);</div><div class=\"line\">    saveAs(blob, <span class=\"string\">\"hello world.txt\"</span>);</div><div class=\"line\"></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<h1 id=\"导入\"><a href=\"#导入\" class=\"headerlink\" title=\"导入\"></a>导入</h1><p>使用HTML5.JS的FileReader对象<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">PatientVisitModel.prototype.uploadConfig = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">myFile</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> file = myFile.files[<span class=\"number\">0</span>];</div><div class=\"line\">    <span class=\"keyword\">var</span> reader = <span class=\"keyword\">new</span> FileReader();</div><div class=\"line\">    <span class=\"comment\">//将文件以文本形式读入页面</span></div><div class=\"line\">    reader.readAsText(file);</div><div class=\"line\">    reader.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> resultText = <span class=\"built_in\">JSON</span>.parse(<span class=\"keyword\">this</span>.result);</div><div class=\"line\">        self.uiConfigs = resultText.currentConfig;</div><div class=\"line\">        self.currentType = resultText.currentType;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>html页面上的写法<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"file-input\"</span> <span class=\"attr\">onchange</span>=<span class=\"string\">\"angular.element(this).scope().patientVisitModel.uploadConfig(this)\"</span> &gt;</span></div></pre></td></tr></table></figure></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ciztnx1l300065k12jtao7gns","category_id":"ciztnx1kw00045k12ut6o6uo4","_id":"ciztnx1lk000a5k12ievf3x0q"},{"post_id":"ciztnx1kg00025k12alefzfxp","category_id":"ciztnx1kw00045k12ut6o6uo4","_id":"ciztnx1lt000d5k12h30yd9f6"},{"post_id":"ciztnx1lg00095k12i9m9szy8","category_id":"ciztnx1kw00045k12ut6o6uo4","_id":"ciztnx1lw000f5k12j684ivd0"},{"post_id":"ciztnx1kp00035k12u6dprlcx","category_id":"ciztnx1lf00085k12z3tacz3q","_id":"ciztnx1lx000h5k122romm2sk"},{"post_id":"ciztnx1ll000b5k12zqilz2n2","category_id":"ciztnx1kw00045k12ut6o6uo4","_id":"ciztnx1mc000i5k127g8yuau5"},{"post_id":"ciztnx1lu000e5k12zadlju5g","category_id":"ciztnx1kw00045k12ut6o6uo4","_id":"ciztnx1me000j5k12q8hu1mn3"},{"post_id":"ciztnx1l000055k12r8yu6h4v","category_id":"ciztnx1lo000c5k125hl9y9d0","_id":"ciztnx1me000k5k12x3hfqz9r"},{"post_id":"ciztnx1l600075k12lnywwm0t","category_id":"ciztnx1lx000g5k127e463rnd","_id":"ciztnx1mf000l5k12knf9n2dq"},{"post_id":"ciztnx1uk000m5k12o8tkmxje","category_id":"ciztnx1kw00045k12ut6o6uo4","_id":"ciztnx1uy000q5k12jfolyu7o"},{"post_id":"ciztnx1uq000o5k12uxhnvncs","category_id":"ciztnx1lx000g5k127e463rnd","_id":"ciztnx1v1000r5k12jx5xchfm"},{"post_id":"ciztnx1uv000p5k12rmwybqp1","category_id":"ciztnx1lf00085k12z3tacz3q","_id":"ciztnx1v3000s5k12fr9isosz"}],"PostTag":[],"Tag":[]}}